"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4488],{17942:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(50959);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=i,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},10738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(28957),i=(n(50959),n(17942));const r={},l="Prisma runtime",o={unversionedId:"reference/runtimes/prisma",id:"reference/runtimes/prisma",title:"Prisma runtime",description:"Prisma is a database ORM runtime that enables to query many different databases. It enables to create, read, update and delete data with a developer-friendly API. This runtime is included within the typegate and is compatible with the following databases:",source:"@site/docs/reference/runtimes/prisma.mdx",sourceDirName:"reference/runtimes",slug:"/reference/runtimes/prisma",permalink:"/docs/reference/runtimes/prisma",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/runtimes/prisma.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"HTTP runtime",permalink:"/docs/reference/runtimes/http"},next:{title:"Python runtime",permalink:"/docs/reference/runtimes/python"}},p={},s=[{value:"Usage",id:"usage",level:2},{value:"Raw query",id:"raw-query",level:3},{value:"Models",id:"models",level:2},{value:"Relationships",id:"relationships",level:2},{value:"One-to-one relationships",id:"one-to-one-relationships",level:3},{value:"One-to-many relationships",id:"one-to-many-relationships",level:3},{value:"Many-to-many relationships",id:"many-to-many-relationships",level:3},{value:"Link",id:"link",level:3},{value:"Generators",id:"generators",level:2}],d={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prisma-runtime"},"Prisma runtime"),(0,i.kt)("p",null,"Prisma is a database ORM runtime that enables to query many different databases. It enables to create, read, update and delete data with a developer-friendly API. This runtime is included within the typegate and is compatible with the following databases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"PostgreSQL"),(0,i.kt)("li",{parentName:"ul"},"MySQL"),(0,i.kt)("li",{parentName:"ul"},"MariaDB"),(0,i.kt)("li",{parentName:"ul"},"SQLite (however, SQLite is unlikely to be used with Metatype as it cannot be distributed easily)"),(0,i.kt)("li",{parentName:"ul"},"AWS Aurora"),(0,i.kt)("li",{parentName:"ul"},"AWS Aurora Serverless"),(0,i.kt)("li",{parentName:"ul"},"Microsoft SQL Server"),(0,i.kt)("li",{parentName:"ul"},"Azure SQL"),(0,i.kt)("li",{parentName:"ul"},"MongoDB"),(0,i.kt)("li",{parentName:"ul"},"CockroachDB")),(0,i.kt)("p",null,"The exact supported version can be found on their ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/supported-databases"},"documentation"),". Some databases may not have some specific behaviors and features support. The precise details are also available in ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-reference/database-features"},"this page"),"."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'with TypeGraph("prisma-runtime-example") as g:\n    db = PrismaRuntime("main_db", "DB_CONNECTION")\n\n    user = t.struct(\n        {\n            "id": t.uuid().config("id", "auto"),\n            "email": t.email(),\n        }\n    )\n\n    g.expose(\n        createUser=db.create(user).add_policy(public)\n    )\n')),(0,i.kt)("h3",{id:"raw-query"},"Raw query"),(0,i.kt)("p",null,"Generate a raw SQL query operation on the runtime"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'db = PrismaRuntime("my-app", "POSTGRES")\ng.expose(\n    countUsers=db.raw_query(\n        "SELECT COUNT(*) as total FROM User",\n        t.struct({}),\n        t.list(t.struct({"total": t.integer()}))\n    )\n)\n')),(0,i.kt)("p",null,"Generate a raw SQL query operation without return"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'db = PrismaRuntime("my-app", "POSTGRES")\ng.expose(\n    setActive=db.raw_execute(\n        "UPDATE User SET active = TRUE WHERE id=${id}",\n        t.struct({"id": t.uuid()}),\n        effect=effects.update()\n    ),\n)\n')),(0,i.kt)("h2",{id:"models"},"Models"),(0,i.kt)("p",null,"Any ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct")," that is passed to a generator of a ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaRuntime"),"\ndefines a model. Models must have an ID field specified by the ",(0,i.kt)("inlineCode",{parentName:"p"},'"id"')," config."),(0,i.kt)("p",null,"Here is the list of all the available configs for model fields:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Config"),(0,i.kt)("th",{parentName:"tr",align:null},"Effect"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"id")),(0,i.kt)("td",{parentName:"tr",align:null},"defines the field ID for the model (a.k.a. primary key)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"auto")),(0,i.kt)("td",{parentName:"tr",align:null},"the value of this field can be auto generated; supported for ",(0,i.kt)("inlineCode",{parentName:"td"},"t.integer()")," (auto-increment) and ",(0,i.kt)("inlineCode",{parentName:"td"},"t.uuid()"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"unique")),(0,i.kt)("td",{parentName:"tr",align:null},"make this field unique among all instances of the model")))),(0,i.kt)("h2",{id:"relationships"},"Relationships"),(0,i.kt)("p",null,"Relationship fields must be defined on both sides of the relationship.\nA relationship is always defined for ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct")," types and ",(0,i.kt)("inlineCode",{parentName:"p"},"t.optional")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"t.list")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct"),"."),(0,i.kt)("p",null,"Relationships can also be defined implicitly using the ",(0,i.kt)("a",{parentName:"p",href:"#link"},(0,i.kt)("inlineCode",{parentName:"a"},"link"))," instance method\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaRuntime"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'runtime = PrismaRuntime("example", "POSTGRES")\n\nuser = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "email": t.email().config("unique"),\n        "posts": t.list(g("Post")),\n    }\n).named("User")\n\npost = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "title": t.string(),\n        "author": g("User"),\n    }\n).named("Post")\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaRuntime")," supports two kinds of relationship between models."),(0,i.kt)("h3",{id:"one-to-one-relationships"},"One-to-one relationships"),(0,i.kt)("p",null,"A one-to-one relationship must be in one of these two variants."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Cardinality"),(0,i.kt)("th",{parentName:"tr",align:null},"Field type in Model1"),(0,i.kt)("th",{parentName:"tr",align:null},"Field type in Model2"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1..1 \u2194 0..1"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model2")')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model1").optional()'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..1 \u2194 0..1"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model2").optional()')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model1").optional()'))))),(0,i.kt)("p",null,"For the optional (0..1 \u2194 0..1) one-to-one relationship,\nyou need to indicate on which field/model the foreign key will be by:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"wrapping the type in a ",(0,i.kt)("a",{parentName:"li",href:"#link"},(0,i.kt)("inlineCode",{parentName:"a"},"runtime.link(.)"))," with ",(0,i.kt)("inlineCode",{parentName:"li"},"fkey=True"),":\n",(0,i.kt)("inlineCode",{parentName:"li"},'runtime.link(g("Model2").optional(), fkey=True)'),";",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},"or adding ",(0,i.kt)("inlineCode",{parentName:"li"},'.config("unique")'),": ",(0,i.kt)("inlineCode",{parentName:"li"},'g("Model2").optional().config("unique")'),".")),(0,i.kt)("h3",{id:"one-to-many-relationships"},"One-to-many relationships"),(0,i.kt)("p",null,"A one-to-many relationship must be in one of these two variants."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Cardinality"),(0,i.kt)("th",{parentName:"tr",align:null},"Field type in Model1"),(0,i.kt)("th",{parentName:"tr",align:null},"Field type in Model2"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1..1 \u2194 0..n"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model2")')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'t.list(g("Model1"))'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0..1 \u2194 0..n"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'g("Model2").optional()')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'t.list(g("Model1"))'))))),(0,i.kt)("h3",{id:"many-to-many-relationships"},"Many-to-many relationships"),(0,i.kt)("p",null,"Many-to-many relationships must be modelled explicitly using a join model."),(0,i.kt)("h3",{id:"link"},"Link"),(0,i.kt)("p",null,"Explicitly declare a relationship between models. The return value of\nthis function shall be the type of a property of a ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct")," that\ndefines a model. If the other end of the relationship is also defined using ",(0,i.kt)("inlineCode",{parentName:"p"},"link"),",\nboth links must have the same name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'runtime = PrismaRuntime("example", "POSTGRES")\n\nuser = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "email": t.email().config("unique"),\n        "posts": runtime.link(t.list(g("Post")), "postAuthor"),\n    }\n).named("User")\n\npost = t.struct(\n    {\n        "id": t.uuid().config("id", "auto"),\n        "title": t.string(),\n        "author": runtime.link(g("User"), "postAuthor"),\n    }\n).named("Post")\n')),(0,i.kt)("h2",{id:"generators"},"Generators"),(0,i.kt)("p",null,"Generators are instance methods of ",(0,i.kt)("inlineCode",{parentName:"p"},"PrismaRuntime")," that can be used\nto generate a ",(0,i.kt)("inlineCode",{parentName:"p"},"t.func")," that represents a specific operation on a specific\nmodel of the runtime. They match to the model queries defined for the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/api-reference/prisma-client-reference"},"prisma client API"),".\nfor the type of the input ",(0,i.kt)("inlineCode",{parentName:"p"},"t.struct")," and the return type."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'with TypeGraph("prisma-runtime-example") as g:\n    db = PrismaRuntime("main_db", "DB_CONNECTION")\n\n    user = t.struct(\n        {\n            "id": t.uuid().config("id", "auto"),\n            "email": t.email(),\n        }\n    )\n\n    g.expose(\n        createUser=db.create(user).add_policy(public),\n        findUser=db.find(user).add_policy(public),\n        findManyUsers=db.find_many(user).add_policy(public),\n    )\n')),(0,i.kt)("p",null,"Here is a list of all available generators:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"find_unique")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"find_first")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"find_many")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"create")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"update")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"upsert")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delete")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delete_many"))))}m.isMDXComponent=!0}}]);