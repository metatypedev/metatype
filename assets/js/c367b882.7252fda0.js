(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7100],{66922:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>a,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(86070),i=n(25710),l=n(65671);const o={},c="gRPC Runtime",s={id:"reference/runtimes/grpc/index",title:"gRPC Runtime",description:"Overview",source:"@site/docs/reference/runtimes/grpc/index.mdx",sourceDirName:"reference/runtimes/grpc",slug:"/reference/runtimes/grpc/",permalink:"/docs/reference/runtimes/grpc/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/docs/reference/runtimes/grpc/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"GraphQL",permalink:"/docs/reference/runtimes/graphql/"},next:{title:"HTTP/REST",permalink:"/docs/reference/runtimes/http/"}},h={},d=[{value:"Overview",id:"overview",level:2},{value:"Variables",id:"variables",level:2},{value:"<code>proto_file</code>",id:"proto_file",level:3},{value:"<code>endpoint</code>",id:"endpoint",level:3},{value:"Method",id:"method",level:2},{value:"<code>call</code>",id:"call",level:3},{value:"Example",id:"example",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"grpc-runtime",children:"gRPC Runtime"}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"GrpcRuntime"})," allows your Typegraphs to interact with external gRPC services. Similar to the HTTP runtime, this enables integrating gRPC services into your graph through a unified interface."]}),"\n",(0,r.jsx)(t.p,{children:"Common use cases include:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Consuming a gRPC API within a Typegraph"}),"\n",(0,r.jsx)(t.li,{children:"Calling gRPC methods programmatically via a type-safe structure"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["In a ",(0,r.jsx)(t.code,{children:"GrpcRuntime"}),", several key parameters help define how the graph interacts with the service, such as the gRPC ",(0,r.jsx)(t.strong,{children:"endpoint"}),", the ",(0,r.jsx)(t.strong,{children:"protofile"})," that describes the service, and the ",(0,r.jsx)(t.strong,{children:"method"})," to be called."]}),"\n",(0,r.jsx)(t.h2,{id:"variables",children:"Variables"}),"\n",(0,r.jsx)(t.h3,{id:"proto_file",children:(0,r.jsx)(t.code,{children:"proto_file"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"proto_file"})," is the path to the ",(0,r.jsx)(t.code,{children:".proto"})," file that defines the gRPC service. This file contains the service definitions, including message types and method signatures, that the Typegraph will use to communicate with the gRPC server."]}),"\n",(0,r.jsx)(t.h3,{id:"endpoint",children:(0,r.jsx)(t.code,{children:"endpoint"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"endpoint"})," is the address of the gRPC server that the Typegraph will communicate with. It uses the format ",(0,r.jsx)(t.code,{children:"tcp://<host>:<port>"}),", and is specified to point to the correct server and port where the gRPC service is running."]}),"\n",(0,r.jsx)(t.h2,{id:"method",children:"Method"}),"\n",(0,r.jsx)(t.h3,{id:"call",children:(0,r.jsx)(t.code,{children:"call"})}),"\n",(0,r.jsxs)(t.p,{children:["This method creates a typegraph function for gRPC method calls. It accepts the full path to the gRPC method, usually in the form ",(0,r.jsx)(t.code,{children:"/package_name.service_name/method_name"}),". The ",(0,r.jsx)(t.strong,{children:"package_name"})," refers to the package defined in the ",(0,r.jsx)(t.code,{children:".proto"})," file, and it must be included when calling the method. In the example below, ",(0,r.jsx)(t.code,{children:"greet"})," will call the ",(0,r.jsx)(t.code,{children:"SayHello"})," method of the ",(0,r.jsx)(t.code,{children:"Greeter"})," service within the ",(0,r.jsx)(t.code,{children:"helloworld"})," package, as defined in the ",(0,r.jsx)(t.code,{children:"helloworld.proto"})," file."]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(l.A,{typegraph:"grpc",typescript:n(26395),python:n(97837)})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},97837:e=>{e.exports={content:'# highlight-next-line\nfrom typegraph.runtimes.grpc import GrpcRuntime\n\n\n@typegraph(\n)\ndef grpc(g: Graph):\n  endpoint = "tcp://localhost:4770"\n  proto_file = "proto/helloworld.proto"\n\n  # highlight-next-line\n  grpc_runtime = GrpcRuntime(proto_file, endpoint)\n\n  g.expose(\n    Policy.public(),\n    greet=grpc_runtime.call("/helloworld.Greeter/SayHello"),\n  )',path:"../examples/typegraphs/grpc.py"}},26395:e=>{e.exports={content:'export const tg = await typegraph(\n  {\n    name: "grpc",\n  },\n  (g) => {\n    const endpoint = "tcp://localhost:4770";\n    const proto_file = "proto/helloworld.proto";\n\n    // highlight-next-line\n    const grpc_runtime = new GrpcRuntime(proto_file, endpoint);\n\n    g.expose(\n      {\n        greet: grpc_runtime.call("/helloworld.Greeter/SayHello"),\n      },\n      Policy.public(),\n    );\n  },\n);',path:"../examples/typegraphs/grpc.ts"}}}]);