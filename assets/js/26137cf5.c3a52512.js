(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7050],{9677:(e,n,t)=>{"use strict";t.d(n,{Ay:()=>r,RM:()=>o});var i=t(86070),s=t(25710),a=t(65671);t(7871);const o=[];function l(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/docs/reference/runtimes/s3",children:"S3Runtime"})," can be used to interact with object storage APIs that are S3 compatible. Object storages like S3 are commonly used to cover app needs around large blob data like uploading and serving images. Most object storage services provide S3 compatible APIs including the open-source ",(0,i.jsx)(n.a,{href:"https://min.io/",children:"MinIO"})," engine which you can run locally for development."]}),"\n",(0,i.jsx)(n.p,{children:"For the following example, you'll need to setup your S3 compatible store first. The following snippet can get you started using minio on docker compose:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'services:\n  minio:\n    image: bitnami/minio:2022\n    platform: linux/amd64\n    restart: always\n    ports:\n      - "9000:9000"\n      - "9001:9001"\n    environment:\n      MINIO_REGION_NAME: local\n      MINIO_ROOT_USER: minio\n      MINIO_ROOT_PASSWORD: password\n      MINIO_DEFAULT_BUCKETS: "bucket:none"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We then provide the following secrets to our typegraph through ",(0,i.jsx)(n.code,{children:"metatype.yml"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:'typegates:\n  dev:\n    secrets:\n      # ..\n      # replace "files-upload" by the name of your typegraph\n      files-upload:\n        S3_HOST: http://localhost:9000\n        S3_REGION: local\n        S3_ACCESS_KEY: minio\n        S3_SECRET_KEY: password\n        S3_PATH_STYLE: true\n'})}),"\n",(0,i.jsx)(n.p,{children:"Our typegraph will then look something like:"}),"\n",(0,i.jsx)(a.A,{typegraph:"files-upload",typescript:t(96144),python:t(2950),query:t(52852)}),"\n",(0,i.jsxs)(n.p,{children:["Peruse the ",(0,i.jsx)(n.a,{href:"/docs/reference/runtimes/s3",children:"reference"})," on the ",(0,i.jsx)(n.code,{children:"S3Runtime"})," for more information."]})]})}function r(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},52897:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=t(86070),s=t(25710),a=t(9677);const o={sidebar_position:50},l="Upload files to cloud storage",r={id:"guides/files-upload/index",title:"Upload files to cloud storage",description:"We can then use this typegraph from our client code like so:",source:"@site/docs/guides/files-upload/index.mdx",sourceDirName:"guides/files-upload",slug:"/guides/files-upload/",permalink:"/docs/guides/files-upload/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/docs/guides/files-upload/index.mdx",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"docs",previous:{title:"Custom functions",permalink:"/docs/guides/external-functions/"},next:{title:"Write REST endpoints",permalink:"/docs/guides/rest/"}},p={},d=[...a.RM,{value:"Uploading file using GraphQL multipart request",id:"uploading-file-using-graphql-multipart-request",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"upload-files-to-cloud-storage",children:"Upload files to cloud storage"}),"\n",(0,i.jsx)(a.Ay,{}),"\n",(0,i.jsx)(n.p,{children:"We can then use this typegraph from our client code like so:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const image = await Deno.readFile("website/static/images/logo.png");\n\n// Get a presigned url\nconst {\n  data: { signUploadUrl: presigned },\n} = await fetch("http://localhost:7891/files-upload", {\n  method: "POST",\n  body: JSON.stringify({\n    query: `\n        query SignUploadUrl($length: Int) {\n            signUploadUrl(length: $length, path: "my-super-image.png")\n        }\n    `,\n    variables: {\n      length: image.length,\n    },\n  }),\n}).then((r) => r.json());\n\n// Upload the file\nconst upload = await fetch(presigned, {\n  method: "PUT",\n  body: image,\n  headers: {\n    "content-type": "image/png",\n    "content-length": image.length,\n  },\n});\n\nconsole.log(upload.status);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"uploading-file-using-graphql-multipart-request",children:"Uploading file using GraphQL multipart request"}),"\n",(0,i.jsxs)(n.p,{children:["Metatype supports\n",(0,i.jsx)(n.a,{href:"https://github.com/jaydenseric/graphql-multipart-request-spec",children:"GraphQL multipart request"}),"\nfor uploading files.\nYou may use one of the clients in this\n",(0,i.jsx)(n.a,{href:"https://github.com/jaydenseric/graphql-multipart-request-spec#client",children:"list"}),"\nthat support GraphQL multipart request."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const image = await Deno.readFile("website/static/images/logo.png");\n\nconst formData = new FormData();\nformData.append(\n  "operations",\n  JSON.stringify({\n    query: `\n        mutation UploadImage($file: Upload!) {\n            upload(file: $file) {\n                id\n                path\n                size\n                contentType\n            }\n        }\n    `,\n    variables: {\n      file: null,\n    },\n  }),\n);\nformData.append("map", JSON.stringify({ 0: ["variables.file"] }));\nformData.append("0", image, "logo.png");\n\nconst upload = await fetch("http://localhost:7891/files-upload", {\n  method: "POST",\n  body: formData,\n});\nconsole.log(await upload.json());\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65671:(e,n,t)=>{"use strict";t.d(n,{A:()=>a});var i=t(98302),s=(t(30758),t(86070));function a(e){let{python:n,typescript:t,rust:a,...o}=e;const l=[n&&{content:n.content,codeLanguage:"python",codeFileUrl:n.path},t&&{content:t.content,codeLanguage:"typescript",codeFileUrl:t.path},a&&{content:a.content,codeLanguage:"rust",codeFileUrl:a.path}].filter((e=>!!e));return(0,s.jsx)(i.A,{code:0==l.length?void 0:l,...o})}},52852:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"listObjects"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"keys"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"key"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"size"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:62}};n.loc.source={body:"{\n  listObjects {\n    keys {\n      key\n      size\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n},2950:e=>{e.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.providers.aws import S3Runtime\n\n# skip-next-line\nfrom typegraph.graph.params import Cors\n\n\n@typegraph(\n  name="files-upload",\n  # skip-next-line\n  cors=Cors(allow_origin=["https://metatype.dev", "http://localhost:3000"]),\n)\ndef files_upload(g: Graph):\n  s3 = S3Runtime(\n    # we provide the name of the env vars\n    # the typegate will read from\n    "S3_HOST",\n    "S3_REGION",\n    "S3_ACCESS_KEY",\n    "S3_SECRET_KEY",\n    path_style_secret="S3_PATH_STYLE",\n  )\n\n  g.expose(\n    Policy.public(),\n    # we can then generate helpers for interacting with our runtime\n    listObjects=s3.list("examples"),\n    getDownloadUrl=s3.presign_get("examples"),\n    signUploadUrl=s3.presign_put("examples"),\n    upload=s3.upload("examples", t.file(allow=["image/png", "image/jpeg"])),\n    uploadMany=s3.upload_all("examples"),\n  )',path:"../examples/typegraphs/files-upload.py"}},96144:e=>{e.exports={content:'import { Policy, t, typegraph } from "@typegraph/sdk";\nimport { S3Runtime } from "@typegraph/sdk/providers/aws";\n\nawait typegraph(\n  {\n    name: "files-upload",\n  },\n  (g) => {\n    const s3 = new S3Runtime({\n      hostSecret: "S3_HOST",\n      regionSecret: "S3_REGION",\n      accessKeySecret: "S3_ACCESS_KEY",\n      secretKeySecret: "S3_SECRET_KEY",\n      pathStyleSecret: "S3_PATH_STYLE",\n    });\n\n    g.expose(\n      {\n        listObjects: s3.list("examples"),\n        getDownloadUrl: s3.presignGet({ bucket: "examples" }),\n        signUploadUrl: s3.presignPut({ bucket: "examples" }),\n        upload: s3.upload(\n          "examples",\n          t.file({ allow: ["image/png", "image/jpeg"] }),\n        ),\n        uploadMany: s3.uploadAll("examples"),\n      },\n      Policy.public(),\n    );\n  },\n);',path:"../examples/typegraphs/files-upload.ts"}}}]);