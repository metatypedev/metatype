(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7525],{92809:(e,a,t)=>{"use strict";t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var n=t(86070),i=t(25710),o=t(65671);const s={},r="Programmable API gateway",c={id:"programmable-api-gateway/index",title:"Programmable API gateway",description:"A programmable API gateway is an API gateway that provides a customizable framework for developers to create and deploy custom logic and policies for incoming requests and outgoing responses. Unlike traditional API gateways that provide a fixed set of features and policies, programmable API gateways offer a more flexible and extensible approach to managing APIs.",source:"@site/use-cases/programmable-api-gateway/index.mdx",sourceDirName:"programmable-api-gateway",slug:"/programmable-api-gateway/",permalink:"/use-cases/programmable-api-gateway/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/use-cases/programmable-api-gateway/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"useCases",previous:{title:"ORM for the edge",permalink:"/use-cases/orm-for-the-edge/"}},l={},d=[{value:"Case study",id:"case-study",level:2},{value:"Metatype&#39;s solution",id:"metatypes-solution",level:2}];function p(e){const a={h1:"h1",h2:"h2",img:"img",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"programmable-api-gateway",children:"Programmable API gateway"}),"\n",(0,n.jsx)(a.p,{children:"A programmable API gateway is an API gateway that provides a customizable framework for developers to create and deploy custom logic and policies for incoming requests and outgoing responses. Unlike traditional API gateways that provide a fixed set of features and policies, programmable API gateways offer a more flexible and extensible approach to managing APIs."}),"\n",(0,n.jsx)(a.h2,{id:"case-study",children:"Case study"}),"\n",(0,n.jsx)("div",{className:"text-center md:float-right p-8",children:(0,n.jsx)(a.p,{children:(0,n.jsx)(a.img,{src:t(81421).A+""})})}),"\n",(0,n.jsx)(a.p,{children:"Suppose that your company needs to implement various policies and logic to manage and secure its APIs, such as rate limiting, caching, and request/response transformations."}),"\n",(0,n.jsx)(a.p,{children:"To achieve this, the company can adopt a programmable API gateway that allows developers to create and deploy custom function to implement additional logic and policies for incoming requests and outgoing responses."}),"\n",(0,n.jsx)(a.p,{children:"It also provides a platform for the company to manage its API infrastructure more efficiently and flexibly. Developers can leverage existing libraries and frameworks to quickly build and deploy custom logic, reducing the time and effort required to develop and maintain the API gateway."}),"\n",(0,n.jsx)(a.h2,{id:"metatypes-solution",children:"Metatype's solution"}),"\n",(0,n.jsx)(a.p,{children:"Metatype provide a Python SDK for developers to create and deploy custom logic and policies, which can later be deployed to the gateway in a single command line. Importers can also be used to import existing API or logic definitions from other sources, such as OpenAPI, GraphQL, and gRPC."}),"\n",(0,n.jsx)(a.p,{children:"This enables developer to quickly build and deploy any update the API or the business logic without having to worry about the underlying infrastructure."}),"\n",(0,n.jsx)(o.A,{typegraph:"programmable-api-gateway",python:t(44592),typescript:t(68246),query:t(74839)})]})}function m(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},74839:e=>{var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"A"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"static_a"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"foo"},arguments:[],directives:[]}]}}]}},{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"B"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"static_b"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"foo"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:75}};a.loc.source={body:"query A {\n  static_a {\n    foo\n  }\n}\n\nquery B {\n  static_b {\n    foo\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,a){if("FragmentSpread"===e.kind)a.add(e.name.value);else if("VariableDefinition"===e.kind){var n=e.type;"NamedType"===n.kind&&a.add(n.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,a)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,a)})),e.definitions&&e.definitions.forEach((function(e){t(e,a)}))}var n={};function i(e,a){for(var t=0;t<e.definitions.length;t++){var n=e.definitions[t];if(n.name&&n.name.value==a)return n}}function o(e,a){var t={kind:e.kind,definitions:[i(e,a)]};e.hasOwnProperty("loc")&&(t.loc=e.loc);var o=n[a]||new Set,s=new Set,r=new Set;for(o.forEach((function(e){r.add(e)}));r.size>0;){var c=r;r=new Set,c.forEach((function(e){s.has(e)||(s.add(e),(n[e]||new Set).forEach((function(e){r.add(e)})))}))}return s.forEach((function(a){var n=i(e,a);n&&t.definitions.push(n)})),t}a.definitions.forEach((function(e){if(e.name){var a=new Set;t(e,a),n[e.name.value]=a}})),e.exports=a,e.exports.A=o(a,"A"),e.exports.B=o(a,"B")},81421:(e,a,t)=>{"use strict";t.d(a,{A:()=>n});const n=t.p+"assets/images/image.drawio-c3feec9409b941440f13260d6a23c2d4.svg"},44592:e=>{e.exports={content:'@typegraph(\n)\ndef programmable_api_gateway(g: Graph):\n  deno = DenoRuntime()\n\n  public = Policy.public()\n  roulette_access = deno.policy("roulette", "() => Math.random() < 0.5")\n\n  my_api_format = """\n  static_a:\n    access: roulette_access\n    foo: rab\n  static_b:\n    access: public\n    foo: bar\n  """\n\n  for field, static_vals in yaml.safe_load(my_api_format).items():\n    g.expose(\n      public if static_vals.pop("access") == "public" else roulette_access,\n      **{field: deno.static(t.struct({"foo": t.string()}), static_vals)},\n    )',path:"../examples/typegraphs/programmable-api-gateway.py"}},68246:e=>{e.exports={content:'typegraph(\n  {\n    name: "programmable-api-gateway",\n  },\n  (g) => {\n    const deno = new DenoRuntime();\n\n    const pub = Policy.public();\n    const roulette_access = deno.policy(\n      "roulette",\n      "() => Math.random() < 0.5"\n    );\n\n      static_a: { foo: "rab", access: "roulette_access" },\n      static_b: { foo: "bar", access: "public" },\n    };\n\n    for (const [k, static_vals] of Object.entries(myApiFormat)) {\n      const policy = static_vals["access"] == "public" ? pub : roulette_access;\n      g.expose(\n        {\n          [k]: deno.static(t.struct({ foo: t.string() }), {\n            foo: static_vals["foo"],\n          }),\n        },\n        policy\n      );\n    }\n  }\n);',path:"../examples/typegraphs/programmable-api-gateway.ts"}}}]);