(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6291],{17942:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>p,kt:()=>h});var n=a(50959);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},43726:(e,t,a)=>{"use strict";a.d(t,{r:()=>r});var n=a(50959);function r(e){let{name:t,choices:a,choice:r,onChange:i,className:o}=e;return n.createElement("ul",{className:`pl-0 m-0 list-none w-full ${o??""}`},Object.entries(a).map((e=>{let[a,o]=e;return n.createElement("li",{key:a,className:"inline-block rounded-md overflow-clip mr-1"},n.createElement("div",null,n.createElement("label",{className:"cursor-pointer"},n.createElement("input",{type:"radio",name:t,value:a,checked:a===r,onChange:()=>i(a),className:"hidden peer"}),n.createElement("div",{className:"px-3 py-1 bg-slate-100 peer-checked:bg-metared peer-checked:text-white"},o))))})))}},66360:(e,t,a)=>{"use strict";a.d(t,{Z:()=>g});var n=a(50959),r=a(55362),i=a(90430),o=a(85551),l=a(90116),s=a(14623);const c=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function p(e){const{queryEditor:t,variableEditor:a,headerEditor:r}=(0,s._i)({nonNull:!0}),[i,o]=(0,n.useState)(e.defaultTab),l=(0,s.Xd)({onCopyQuery:e.onCopyQuery}),p=(0,s.fE)();return(0,n.useEffect)((()=>{a&&c(a)}),[i,a]),(0,n.useEffect)((()=>{r&&c(r)}),[i,r]),(0,n.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("extraKeys",{"Alt-G":()=>{t.replaceSelection("@")}}),t.setOption("gutters",[]),t.on("change",c),c(t))}),[t]),(0,n.useEffect)((()=>{a&&(a.setOption("lineNumbers",!1),a.setOption("gutters",[]),a.on("change",c))}),[a]),(0,n.useEffect)((()=>{r&&(r.setOption("lineNumbers",!1),r.setOption("gutters",[]),r.on("change",c))}),[r]),n.createElement(s.u.Provider,null,n.createElement("div",{className:"graphiql-editors"},n.createElement("section",{className:"graphiql-query-editor shadow-sm","aria-label":"Query Editor"},n.createElement("div",{className:"graphiql-query-editor-wrapper"},n.createElement(s.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),n.createElement("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands"},n.createElement(s._8,null),n.createElement(s.wC,{onClick:()=>p(),label:"Prettify query (Shift-Ctrl-P)"},n.createElement(s.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})),n.createElement(s.wC,{onClick:()=>l(),label:"Copy query (Shift-Ctrl-C)"},n.createElement(s.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"}))))),e.noTool?null:n.createElement(n.Fragment,null,n.createElement("div",{className:"graphiql-editor-tools p-0 text-sm "},n.createElement("div",{className:"graphiql-editor-tools-tabs"},n.createElement("div",{className:("variables"===i?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("variables"===i?"":"variables")}},"Variables"),n.createElement("div",{className:("headers"===i?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("headers"===i?"":"headers")}},"Headers"))),n.createElement("section",{className:"graphiql-editor-tool "+(i&&i.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===i?"Variables":"Headers"},n.createElement(s.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==i,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),n.createElement(s.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==i,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})))))}class d{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var m=a(43726);function u(){return(0,s.JB)({nonNull:!0}).isFetching?n.createElement(s.$j,null):null}const h={typegraph:"Typegraph",playground:"Playground"};function y(e){let{typegraph:t,query:a,code:i,codeLanguage:c,codeFileUrl:y,headers:g={},variables:f={},tab:b="",noTool:k=!1,defaultMode:v=null}=e;const{siteConfig:{customFields:{tgUrl:E}}}=(0,o.Z)(),x=(0,n.useMemo)((()=>new d),[]),N=(0,n.useMemo)((()=>(0,r.nq)({url:`${E}/${t}`})),[]),[w,T]=(0,n.useState)(v);return n.createElement("div",{className:"@container miniql mb-5"},v?n.createElement(m.r,{name:"mode",choices:h,choice:w,onChange:T,className:"mb-2"}):null,n.createElement(s.j$,{fetcher:N,defaultQuery:a.loc?.source.body.trim(),defaultHeaders:JSON.stringify(g),shouldPersistHeaders:!0,variables:JSON.stringify(f),storage:x},n.createElement("div",{className:(v?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first"},v&&"typegraph"!==w?null:n.createElement("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0"},y?n.createElement("div",{className:"p-2 text-xs font-light"},"See/edit full code on"," ",n.createElement("a",{href:`https://github.com/metatypedev/metatype/blob/main/${y}`},y)):null,i?n.createElement(l.Z,{language:c,wrap:!0,className:"flex-1"},i):null),v&&"playground"!==w?null:n.createElement("div",{className:"flex flex-col graphiql-container"},n.createElement("div",{className:"flex-1 graphiql-session"},n.createElement(p,{defaultTab:b,noTool:k})),n.createElement("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg"},n.createElement(u,null),n.createElement(s.iB,null))))))}function g(e){return n.createElement(i.Z,{fallback:n.createElement("div",null,"Loading...")},(()=>n.createElement(y,e)))}},75396:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(28957),r=(a(50959),a(17942)),i=a(90116);a(66360);const o={sidebar_position:3,comments:!1},l="Typegraph",s={unversionedId:"concepts/typegraph/index",id:"concepts/typegraph/index",title:"Typegraph",description:"Typegraph is a Python package for building virtual graphs of types and managing their metadata. The name also refers to the typegraph specification which is a file format, currently in JSON, describing all elements of a typegraph.",source:"@site/docs/concepts/typegraph/index.mdx",sourceDirName:"concepts/typegraph",slug:"/concepts/typegraph/",permalink:"/docs/concepts/typegraph/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/concepts/typegraph/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,comments:!1},sidebar:"docs",previous:{title:"Comparing Metatype",permalink:"/docs/concepts/comparisons/"},next:{title:"Typegate",permalink:"/docs/concepts/typegate/"}},c={},p=[{value:"Types",id:"types",level:2},{value:"Materializers",id:"materializers",level:2},{value:"Runtimes",id:"runtimes",level:2},{value:"Policies",id:"policies",level:2},{value:"Triggers",id:"triggers",level:2}],d={toc:p},m="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(m,(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typegraph"},"Typegraph"),(0,r.kt)("p",null,"Typegraph is a ",(0,r.kt)("a",{parentName:"p",href:"https://pypi.org/project/typegraph/"},"Python package")," for building virtual graphs of types and managing their metadata. The name also refers to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/specifications"},"typegraph specification")," which is a file format, currently in JSON, describing all elements of a typegraph."),(0,r.kt)("admonition",{title:"Why Python?",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Python was historically chosen during Metatype's prototyping phase and remained since then the default way to describe typegraphs. Its great readability and dynamic typing make it a very accessible language for everyone to pick up quickly."),(0,r.kt)("p",{parentName:"admonition"},"In theory, all frameworks and languages can produce typegraphs respecting the specification to become executable by typegates. This opens the door to a wide range of use cases, including generating typegraphs automatically from existing code base and tools.")),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Types")," are the building block of typegraphs. They define a type system describing all data objects processed in Metatype. They can be easily extended to support new data types according to the needs of the application."),(0,r.kt)(i.Z,{language:"python",mdxType:"CodeBlock"},a(92492).content),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Analogy in SQL"),": types are similar to the Data Definition Language (DDL) with the extended capacity of describing any type of data."),(0,r.kt)("h2",{id:"materializers"},"Materializers"),(0,r.kt)("p",null,"Types can also describe functions and ",(0,r.kt)("strong",{parentName:"p"},"materializers")," define how the input type gets transformed into the output type. The input and output types are similar to a function signature and a materializer to its implementation, except that it might not always know what the function body is. In such case, the materializer knows at least where and how to access it."),(0,r.kt)(i.Z,{language:"python",mdxType:"CodeBlock"},a(72563).content),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Analogy in SQL"),": a materializer is similar to a join, a function, or an alias."),(0,r.kt)("h2",{id:"runtimes"},"Runtimes"),(0,r.kt)("p",null,"Every type and materializer have a runtime associated to it. This runtime describes where the types or materializers are physically located. It can be another API, a database, or any other services the typegate can connect to. The typegates uses that information to optimize the execution of the queries and minimize the amount of data moved."),(0,r.kt)("p",null,"In practice, materializers are often not explicitly used and the usage of runtime sugar syntax is preferred."),(0,r.kt)(i.Z,{language:"python",mdxType:"CodeBlock"},a(76776).content),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Analogy in SQL"),": a runtime is similar to a database instance running some requests."),(0,r.kt)("h2",{id:"policies"},"Policies"),(0,r.kt)("p",null,"Policies are a special type of function ",(0,r.kt)("inlineCode",{parentName:"p"},"t.func(t.struct({...}), t.boolean().optional())")," attachable to any other type. They are evaluated once per request and determine whether one of the polices authorizes the access or not. They receive the request context (see ",(0,r.kt)("a",{parentName:"p",href:"./typegate"},"typegate"),") as argument allowing you to implement authorization, access control, or any other business logic."),(0,r.kt)("p",null,"The policy decision can be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"true"),": the access is authorized"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"false"),": the access is denied"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"),": the access in inherited from the parent types")),(0,r.kt)(i.Z,{language:"python",mdxType:"CodeBlock"},a(97897).content),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Analogy in SQL"),": policies are similar to Row Security Policies (RSP) or Row Level Security (RLS) concepts."),(0,r.kt)("h2",{id:"triggers"},"Triggers"),(0,r.kt)("p",null,"Triggers are events launching the execution of one or multiple functions. They fire when a GraphQL request is received for the specific typegraph."),(0,r.kt)(i.Z,{language:"python",mdxType:"CodeBlock"},a(96747).content),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Analogy in SQL"),": a trigger is similar to receiving a new query."))}u.isMDXComponent=!0},72563:e=>{e.exports={content:"",path:"website/docs/concepts/typegraph/functions.py"}},97897:e=>{e.exports={content:'deno = DenoRuntime()\npublic = deno.policy("public", "() => true")  # noqa\nteam_only = deno.policy(\n  "team", "(ctx) => ctx.user.role === \'admin\'"\n)  # noqa',path:"website/docs/concepts/typegraph/policies.py"}},76776:e=>{e.exports={content:'http = HttpRuntime("https://random.org/api")\n\n# same func as above\nhttp.get(\n  "/flip_coin", t.struct({}), t.enum(["head", "tail"])\n)  # implicitly attaches runtime to all types',path:"website/docs/concepts/typegraph/runtimes.py"}},96747:e=>{e.exports={content:'@typegraph()\ndef triggers(g: Graph):\n  # ...\n  g.expose(\n    public,\n    flip=http.get(\n      "/flip_coin", t.struct({}), t.enum(["head", "tail"])\n    ),\n  )',path:"website/docs/concepts/typegraph/triggers.py"}},92492:e=>{e.exports={content:"",path:"website/docs/concepts/typegraph/types.py"}}}]);