(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4877],{75521:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>o});var s=n(86070),i=n(25710);function a(e){const t={a:"a",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Metatype is an open source platform to author and deploy APIs for the cloud and components eras. It provides a declarative programming model that helps you to efficiently design APIs and focus on the functional requirements."}),"\n",(0,s.jsx)(t.p,{children:'The runtime embraces WebAssembly (WASM) as a first-class citizen to allow you to write your business logic in the language of your choice and run it on-demand. Those "backend components" are reusable across your stacks and deployable without pipelines or containers.'}),"\n",(0,s.jsx)(t.p,{children:"The platform provides a set of capabilities out of the box:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"create/read/update/delete data in your database"}),"\n",(0,s.jsx)(t.li,{children:"storing files in your cloud storage"}),"\n",(0,s.jsx)(t.li,{children:"authenticate users with different providers or using JWTs"}),"\n",(0,s.jsx)(t.li,{children:"connecting to third-party/internal APIs"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"And offers an opportunity to climb the one step higher in the abstraction ladder and drastically simplify the building of great APIs and systems!"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)("div",{className:"mx-auto max-w-[650px]",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(46566).A+""})})}),"\n",(0,s.jsx)(t.p,{children:"Metatype is designed to be as simple as possible and horizontally scalable in existing container orchestration solution like Kubernetes. It consists of multiple parts, including:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/reference/typegraph",children:(0,s.jsx)(t.strong,{children:"Typegraph"})}),": a cross-language SDK to manage typegraphs - virtual graphs of types - and compose them"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/reference/typegate",children:(0,s.jsx)(t.strong,{children:"Typegate"})}),": a serverless GraphQL/REST gateway to execute queries over typegraphs"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/reference/meta-cli",children:(0,s.jsx)(t.strong,{children:"Meta CLI"})}),": a command-line tool to efficiently deploy the typegraphs on the gateway"]}),"\n"]}),"\n",(0,s.jsx)("div",{className:"mx-auto max-w-[400px]",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(34289).A+""})})})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},56546:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var s=n(86070),i=n(25710),a=n(75521),o=n(52737);n(88860);const r={sidebar_position:2},l="Mental model",c={id:"concepts/mental-model/index",title:"Mental model",description:"This page gives a high-level view of Metatype's foundations.",source:"@site/docs/concepts/mental-model/index.mdx",sourceDirName:"concepts/mental-model",slug:"/concepts/mental-model/",permalink:"/docs/concepts/mental-model/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/concepts/mental-model/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Features overview",permalink:"/docs/concepts/features-overview/"},next:{title:"Architecture",permalink:"/docs/concepts/architecture/"}},d={},h=[{value:"Why does Metatype exist?",id:"why-does-metatype-exist",level:2},{value:"How does Metatype work?",id:"how-does-metatype-work",level:2},{value:"What&#39;s exactly Metatype?",id:"whats-exactly-metatype",level:2},{value:"Core abstractions",id:"core-abstractions",level:2},{value:"Types",id:"types",level:3},{value:"Functions",id:"functions",level:3},{value:"Runtimes",id:"runtimes",level:3},{value:"Policies",id:"policies",level:3},{value:"Triggers",id:"triggers",level:3}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"mental-model",children:"Mental model"}),"\n",(0,s.jsx)(t.p,{children:"This page gives a high-level view of Metatype's foundations."}),"\n",(0,s.jsx)(t.admonition,{title:"Looking to build?",type:"tip",children:(0,s.jsxs)(t.p,{children:["For a hands-on introduction, head over to the ",(0,s.jsx)(t.a,{href:"/docs/tutorials/metatype-basics",children:"basics tutorial"})," and start build your first typegraph."]})}),"\n",(0,s.jsx)(t.h2,{id:"why-does-metatype-exist",children:"Why does Metatype exist?"}),"\n",(0,s.jsx)(t.p,{children:"Building great APIs is a thought challenge. Developers usually spend a non-negligible amount of time on low-value added tasks (CRUD generation, data validation, authorization, etc.) and managing deployments. This gives them little time to design great interfaces and experiment with the best technical approaches, eventually increasing the time to delivery and weakening innovation."}),"\n",(0,s.jsx)(t.p,{children:"Metatype's vision is to enable everyone to build modular API with as little effort as possible. By helping developers to re-use existing systems and APIs, it enables teams to focus on what matters: their expert knowledge in business domain, modelling and technologies. Metatype manage the complex aspects for them, making them productive and innovation-friendly for the next iterations."}),"\n",(0,s.jsx)(t.h2,{id:"how-does-metatype-work",children:"How does Metatype work?"}),"\n",(0,s.jsx)(t.p,{children:"When developing a feature, the classical approach is to define what data will be at play, how to transform them, where the execution shall take place and who should be authorized. Instead, Metatype define an abstraction for each of those steps and put the emphasis on composing pre-defined APIs or defining re-usable ones when there is no existing solution."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{children:"Classical model"}),(0,s.jsx)(t.th,{children:"Metatype's model"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"What (data)"}),(0,s.jsx)(t.td,{children:"fixed response defined by the logic"}),(0,s.jsxs)(t.td,{children:["API clients selects what they need from ",(0,s.jsx)(t.a,{href:"/docs/concepts/mental-model#types",children:"types"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"How (transformations)"}),(0,s.jsx)(t.td,{children:"ad-hoc code logic"}),(0,s.jsxs)(t.td,{children:["composed data with interchangeable ",(0,s.jsx)(t.a,{href:"/docs/concepts/mental-model#functions",children:"functions"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Where (execution)"}),(0,s.jsx)(t.td,{children:"1 code base + 1 database"}),(0,s.jsxs)(t.td,{children:["orchestrate the request across multiple ",(0,s.jsx)(t.a,{href:"/docs/concepts/mental-model#runtimes",children:"runtimes"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Who (authentication)"}),(0,s.jsx)(t.td,{children:"hard-coded rules or system"}),(0,s.jsxs)(t.td,{children:["request context based and controlled by ",(0,s.jsx)(t.a,{href:"/docs/concepts/mental-model#policies",children:"policies"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"When (event)"}),(0,s.jsx)(t.td,{children:"request arrival"}),(0,s.jsxs)(t.td,{children:["based on ",(0,s.jsx)(t.a,{href:"/docs/concepts/mental-model#triggers",children:"triggers"})]})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"This computing model brings numerous advantages:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["it offers ",(0,s.jsx)(t.a,{href:"/docs/reference/runtimes",children:"multiple runtimes"})," with pre-defined operations and can replace the needs for an ad-hoc backend"]}),"\n",(0,s.jsx)(t.li,{children:"when the project grows, you easily introduce new APIs or break existing ones in smaller parts"}),"\n",(0,s.jsx)(t.li,{children:"you write complex business logic directly in Typescript, Python or WebAssembly and run them on-demand"}),"\n",(0,s.jsx)(t.li,{children:"third-parties APIs can be easily integrated, providing you visibility and control over them"}),"\n",(0,s.jsx)(t.li,{children:"it is interoperable with existing (legacy) systems, and can be introduced step by step"}),"\n",(0,s.jsx)(t.li,{children:"it can be easily self-hosted in your own infrastructure or customized according to your needs"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"whats-exactly-metatype",children:"What's exactly Metatype?"}),"\n",(0,s.jsx)(a.Ay,{}),"\n",(0,s.jsx)(t.h2,{id:"core-abstractions",children:"Core abstractions"}),"\n",(0,s.jsx)(t.h3,{id:"types",children:"Types"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Types"})," are the building block of typegraphs. They define a type system describing all data objects processed in Metatype. They can be easily extended to support new data types according to the needs of the application."]}),"\n",(0,s.jsx)(o.A,{language:"python",children:n(96169).content}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Analogy in SQL"}),": types are similar to the Data Definition Language (DDL) with the extended capacity of describing any type of data."]}),"\n",(0,s.jsx)(t.h3,{id:"functions",children:"Functions"}),"\n",(0,s.jsxs)(t.p,{children:["Types can also describe functions and ",(0,s.jsx)(t.strong,{children:"functions"})," define how the input type gets transformed into the output type. The input and output types are similar to a function signature, the runtime + configuration associated to it, to its implementation."]}),"\n",(0,s.jsx)(o.A,{language:"python",children:n(15317).content}),"\n",(0,s.jsx)(t.h3,{id:"runtimes",children:"Runtimes"}),"\n",(0,s.jsx)(t.p,{children:"Every type and function have a runtime associated to it. This runtime describes where the types are physically located. It can be another API, a database, or any other services the typegate can connect to. The typegates uses that information to optimize the execution of the queries and minimize the amount of data moved."}),"\n",(0,s.jsx)(t.p,{children:"In practice, function types are often not explicitly used and the usage of runtime sugar syntax is preferred."}),"\n",(0,s.jsx)(o.A,{language:"python",children:n(13995).content}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Analogy in SQL"}),": a runtime is similar to a database instance running some requests."]}),"\n",(0,s.jsx)(t.h3,{id:"policies",children:"Policies"}),"\n",(0,s.jsxs)(t.p,{children:["Policies are a special type of function ",(0,s.jsx)(t.code,{children:"t.func(t.struct({...}), t.boolean().optional())"})," attachable to any other type. They are evaluated once per request and determine whether one of the polices authorizes the access or not. They receive the request context (see ",(0,s.jsx)(t.a,{href:"/docs/reference/typegate",children:"typegate"}),") as argument allowing you to implement authorization, access control, or any other business logic."]}),"\n",(0,s.jsx)(t.p,{children:"The policy decision can be:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"true"}),": the access is authorized"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"false"}),": the access is denied"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"null"}),": the access in inherited from the parent types"]}),"\n"]}),"\n",(0,s.jsx)(o.A,{language:"python",children:n(37307).content}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Analogy in SQL"}),": policies are similar to Row Security Policies (RSP) or Row Level Security (RLS) concepts."]}),"\n",(0,s.jsx)(t.h3,{id:"triggers",children:"Triggers"}),"\n",(0,s.jsx)(t.p,{children:"Triggers are events launching the execution of one or multiple functions. They fire when a GraphQL request is received for the specific typegraph."}),"\n",(0,s.jsx)(o.A,{language:"python",children:n(15243).content}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Analogy in SQL"}),": a trigger is similar to receiving a new query."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},34289:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});const s=n.p+"assets/images/components.drawio-564f2cdd1b75f6132ff8fdfaad29a92c.svg"},46566:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});const s=n.p+"assets/images/evolution.drawio-6260dff95a16730963b51fa7819b9386.svg"},15317:e=>{e.exports={content:"",path:"examples/typegraphs/functions.py"}},37307:e=>{e.exports={content:'deno = DenoRuntime()\npublic = deno.policy("public", "() => true")  # noqa\nteam_only = deno.policy(\n  "team", "(ctx) => ctx.user.role === \'admin\'"\n)  # noqa',path:"examples/typegraphs/policies-example.py"}},13995:e=>{e.exports={content:'http = HttpRuntime("https://random.org/api")\n\n# same func as above\nhttp.get(\n  "/flip_coin", t.struct({}), t.enum(["head", "tail"])\n)  # implicitly attaches runtime to all types',path:"examples/typegraphs/runtimes.py"}},15243:e=>{e.exports={content:'@typegraph()\ndef triggers(g: Graph):\n  # ...\n  g.expose(\n    public,\n    flip=http.get(\n      "/flip_coin", t.struct({}), t.enum(["head", "tail"])\n    ),\n  )',path:"examples/typegraphs/triggers.py"}},96169:e=>{e.exports={content:"",path:"examples/typegraphs/types.py"}}}]);