"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9835],{91771:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var c=i(13274),n=i(99128);const r={sidebar_position:3},s="Architecture",a={id:"concepts/architecture/index",title:"Architecture",description:"Artifact Tracking Protocol",source:"@site/docs/concepts/architecture/index.mdx",sourceDirName:"concepts/architecture",slug:"/concepts/architecture/",permalink:"/docs/concepts/architecture/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/concepts/architecture/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Mental model",permalink:"/docs/concepts/mental-model/"},next:{title:"Query engine",permalink:"/docs/concepts/query-engine/"}},o={},d=[{value:"Artifact Tracking Protocol",id:"artifact-tracking-protocol",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h1,{id:"architecture",children:"Architecture"}),"\n",(0,c.jsx)(t.h2,{id:"artifact-tracking-protocol",children:"Artifact Tracking Protocol"}),"\n",(0,c.jsxs)(t.p,{children:["While developing and building an application using ",(0,c.jsx)(t.code,{children:"Metatype"}),", different types of artifacts can be used in different parts of the application. An Artifact is an external file that your application uses as a dependency to do some task. For instance, while working with ",(0,c.jsx)(t.a,{href:"/docs/reference/runtimes/python",children:"PythonRuntime"}),", we import an external ",(0,c.jsx)(t.code,{children:"python"})," script ",(0,c.jsx)(t.code,{children:"artifacts/hasher.py"})," which has some hashing functionality. The script which we imported will be marked as an ",(0,c.jsx)(t.code,{children:"Artifact"})," and run inside the ",(0,c.jsx)(t.code,{children:"PythonRuntime"}),". There can be numerous artifacts which can be used by different ",(0,c.jsx)(t.a,{href:"/docs/reference/runtimes",children:"Runtimes"})," inside Metatype."]}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"Metatype"})," tracks these artifacts into two modes."]}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"Single Replica"})," mode: which stores the artifacts inside the ",(0,c.jsx)(t.a,{href:"/docs/reference/typegate",children:"Typegate"})," node to which the ",(0,c.jsx)(t.a,{href:"/docs/reference/typegraph",children:"Typegraph"})," was deployed to. The artifacts will be persisited to the local file system of the typegate."]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.code,{children:"Sync"})," mode: which stores the artifacts in a cloud store. ",(0,c.jsx)(t.code,{children:"S3"})," storage and ",(0,c.jsx)(t.code,{children:"Redis"})," are a dependency in this mode. This will be useful when there are multiple typgate instances are running and they need to synchornize and share artifacts."]}),"\n"]}),"\n",(0,c.jsx)("div",{className:"text-center md:float-right p-8",children:(0,c.jsx)(t.p,{children:(0,c.jsx)(t.img,{src:i(88349).A+""})})})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},88349:(e,t,i)=>{i.d(t,{A:()=>c});const c=i.p+"assets/images/artifact_upload_protocol.drawio-82e3ed7ed1886997da9bc0afa8586ed2.svg"}}]);