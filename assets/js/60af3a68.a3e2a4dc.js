(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7403],{17942:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>c,kt:()=>g});var r=n(50959);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},80381:(e,t,n)=>{"use strict";n.d(t,{r:()=>i});var r=n(50959);function i(e){let{name:t,choices:n,choice:i,onChange:a,className:o}=e;return r.createElement("ul",{className:`pl-0 m-0 list-none w-full ${o??""}`},Object.entries(n).map((e=>{let[n,o]=e;return r.createElement("li",{key:n,className:"inline-block rounded-md overflow-clip mr-1"},r.createElement("div",null,r.createElement("label",{className:"cursor-pointer"},r.createElement("input",{type:"radio",name:t,value:n,checked:n===i,onChange:()=>a(n),className:"hidden peer"}),r.createElement("div",{className:"px-3 py-1 bg-slate-100 peer-checked:bg-metared peer-checked:text-white"},o))))})))}},35751:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(50959),i=n(11253),a=n(41474),o=n(13365),l=n(44354),s=n(24602);const p=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function c(e){const{queryEditor:t,variableEditor:n,headerEditor:i}=(0,s._i)({nonNull:!0}),[a,o]=(0,r.useState)(e.defaultTab),l=(0,s.Xd)({onCopyQuery:e.onCopyQuery}),c=(0,s.fE)();return(0,r.useEffect)((()=>{n&&p(n)}),[a,n]),(0,r.useEffect)((()=>{i&&p(i)}),[a,i]),(0,r.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("extraKeys",{"Alt-G":()=>{t.replaceSelection("@")}}),t.setOption("gutters",[]),t.on("change",p),p(t))}),[t]),(0,r.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("gutters",[]),n.on("change",p))}),[n]),(0,r.useEffect)((()=>{i&&(i.setOption("lineNumbers",!1),i.setOption("gutters",[]),i.on("change",p))}),[i]),r.createElement(s.u.Provider,null,r.createElement("div",{className:"graphiql-editors"},r.createElement("section",{className:"graphiql-query-editor shadow-sm","aria-label":"Query Editor"},r.createElement("div",{className:"graphiql-query-editor-wrapper"},r.createElement(s.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),r.createElement("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands"},r.createElement(s._8,null),r.createElement(s.wC,{onClick:()=>c(),label:"Prettify query (Shift-Ctrl-P)"},r.createElement(s.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})),r.createElement(s.wC,{onClick:()=>l(),label:"Copy query (Shift-Ctrl-C)"},r.createElement(s.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"}))))),e.noTool?null:r.createElement(r.Fragment,null,r.createElement("div",{className:"graphiql-editor-tools p-0 text-sm "},r.createElement("div",{className:"graphiql-editor-tools-tabs"},r.createElement("div",{className:("variables"===a?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("variables"===a?"":"variables")}},"Variables"),r.createElement("div",{className:("headers"===a?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("headers"===a?"":"headers")}},"Headers"))),r.createElement("section",{className:"graphiql-editor-tool "+(a&&a.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===a?"Variables":"Headers"},r.createElement(s.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==a,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),r.createElement(s.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==a,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})))))}class m{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var d=n(80381);function u(){return(0,s.JB)({nonNull:!0}).isFetching?r.createElement(s.$j,null):null}const g={typegraph:"Typegraph",playground:"Playground"};function h(e){let{typegraph:t,query:n,code:a,codeLanguage:p,codeFileUrl:h,headers:f={},variables:y={},tab:b="",noTool:v=!1,defaultMode:E=null}=e;const{siteConfig:{customFields:{tgUrl:x}}}=(0,o.Z)(),O=(0,r.useMemo)((()=>new m),[]),N=(0,r.useMemo)((()=>(0,i.nq)({url:`${x}/${t}`})),[]),[w,T]=(0,r.useState)(E);return r.createElement("div",{className:"@container miniql mb-5"},E?r.createElement(d.r,{name:"mode",choices:g,choice:w,onChange:T,className:"mb-2"}):null,r.createElement(s.j$,{fetcher:N,defaultQuery:n.loc?.source.body.trim(),defaultHeaders:JSON.stringify(f),shouldPersistHeaders:!0,variables:JSON.stringify(y),storage:O},r.createElement("div",{className:(E?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first"},E&&"typegraph"!==w?null:r.createElement("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0"},h?r.createElement("div",{className:"p-2 text-xs font-light"},"See/edit full code on"," ",r.createElement("a",{href:`https://github.com/metatypedev/metatype/blob/main/${h}`},h)):null,a?r.createElement(l.Z,{language:p,wrap:!0,className:"flex-1"},a):null),E&&"playground"!==w?null:r.createElement("div",{className:"flex flex-col graphiql-container"},r.createElement("div",{className:"flex-1 graphiql-session"},r.createElement(c,{defaultTab:b,noTool:v})),r.createElement("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg"},r.createElement(u,null),r.createElement(s.iB,null))))))}function f(e){return r.createElement(a.Z,{fallback:r.createElement("div",null,"Loading...")},(()=>r.createElement(h,e)))}},62444:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(87366),i=n(35751),a=n(50959);function o(e){let{python:t,...n}=e;return a.createElement(i.Z,(0,r.Z)({code:t.content,codeLanguage:"python",codeFileUrl:t.path},n))}},66362:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87366),i=(n(50959),n(17942)),a=(n(62444),n(44354));const o={},l="Importing openapi definitions",s={unversionedId:"guides/importing-openapi-definitions/index",id:"guides/importing-openapi-definitions/index",title:"Importing openapi definitions",description:"Typegraph",source:"@site/docs/guides/importing-openapi-definitions/index.mdx",sourceDirName:"guides/importing-openapi-definitions",slug:"/guides/importing-openapi-definitions/",permalink:"/docs/guides/importing-openapi-definitions/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/guides/importing-openapi-definitions/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Importing graphql definitions",permalink:"/docs/guides/importing-graphql-definitions/"},next:{title:"Self-hosting",permalink:"/docs/guides/self-hosting"}},p={},c=[{value:"Typegraph",id:"typegraph",level:2}],m={toc:c},d="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(d,(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"importing-openapi-definitions"},"Importing openapi definitions"),(0,i.kt)("h2",{id:"typegraph"},"Typegraph"),(0,i.kt)(a.Z,{language:"python",mdxType:"CodeBlock"},n(37429).content))}u.isMDXComponent=!0},37429:e=>{e.exports={content:'from typegraph.utils.sanitizers import inject_params\nfrom box import Box\nfrom typegraph import TypeGraph, policies, t\nfrom typegraph.importers.base.importer import Import\nfrom typegraph.importers.openapi import OpenApiImporter\nfrom typegraph.runtimes.http import HTTPRuntime\n\nOpenApiImporter(\n  "devto",\n  url="https://raw.githubusercontent.com/APIs-guru/openapi-directory/main/APIs/dev.to/1.0.0/openapi.yaml",\n).imp(False)\n\n\n# Function generated by OpenApiImporter. Do not change.\ndef import_devto(params=None):\n  target_url = inject_params("https://dev.to/api", params)\n  devto = HTTPRuntime(target_url)\n\n  # ...\n  types["ArticleIndex"] = t.struct(\n    {\n      "canonical_url": t.string(),\n      "cover_image": t.string().optional(),\n      "created_at": t.string(),\n      "crossposted_at": t.string().optional(),\n      "description": t.string(),\n      "edited_at": t.string().optional(),\n      "flare_tag": t.proxy(\n        renames["ArticleFlareTag"]\n      ).optional(),\n      "id": t.integer(),\n      "last_comment_at": t.string(),\n      "organization": t.proxy(\n        renames["SharedOrganization"]\n      ).optional(),\n      "path": t.string(),\n      "positive_reactions_count": t.integer(),\n      "public_reactions_count": t.integer(),\n      "published_at": t.string(),\n      "published_timestamp": t.string(),\n      "readable_publish_date": t.string(),\n      "reading_time_minutes": t.integer(),\n      "slug": t.string(),\n      "social_image": t.string(),\n      "tag_list": t.array(t.string()),\n      "tags": t.string(),\n      "title": t.string(),\n      "type_of": t.string(),\n      "url": t.string(),\n      "user": t.proxy(renames["SharedUser"]),\n    }\n  ).named(renames["ArticleIndex"])\n  # ...\n  functions["getLatestArticles"] = devto.get(\n    "/api/articles/latest",\n    t.struct({"page": t.integer(), "per_page": t.integer()}),\n    t.array(t.proxy(renames["ArticleIndex"])),\n  )\n  # ...\n  return Import(\n    importer="devto",\n    renames=renames,\n    types=Box(types),\n    functions=Box(functions),\n  )\n\n\nwith TypeGraph(name="devto") as g:\n  devto = import_devto()\n\n  public = policies.public()\n  g.expose(\n    getLatestArticles=devto.func("getLatestArticles").add_policy(\n      public\n    )\n  )',path:"website/docs/guides/importing-openapi-definitions/devto.py"}}}]);