"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7330],{90079:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>c,toc:()=>h});var s=t(86070),r=t(25710),i=t(65480),l=t(27676);const d={},o="Parameter Transformations",c={id:"reference/types/parameter-transformations",title:"Parameter Transformations",description:"might consider using parameter transformations if:",source:"@site/docs/reference/types/parameter-transformations.mdx",sourceDirName:"reference/types",slug:"/reference/types/parameter-transformations",permalink:"/docs/reference/types/parameter-transformations",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/types/parameter-transformations.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Injections",permalink:"/docs/reference/types/injections"},next:{title:"Runtimes",permalink:"/docs/reference/runtimes/"}},a={},h=[{value:"<code>func::reduce(tree)</code>",id:"funcreducetree",level:2},{value:"Reduce tree",id:"reduce-tree",level:3},{value:"<code>func::apply(tree)</code>",id:"funcapplytree",level:2},{value:"Apply tree",id:"apply-tree",level:3},{value:"Apply expressions",id:"apply-expressions",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"parameter-transformations",children:"Parameter Transformations"}),"\n",(0,s.jsxs)(n.admonition,{title:"Use cases",type:"info",children:[(0,s.jsx)(n.p,{children:"might consider using parameter transformations if:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"you want a simple interface for your function but you cannot change the input type;"}),"\n",(0,s.jsx)(n.li,{children:"if you want to re-use your function with a different set of parameters."}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["Parameter transformations are a way to refine the input type of your function to adapt to your need. They enable you to use injection to predefined input type without manually rewriting the type to add injections. It is most usefull for input types generated by runtimes, especially the ",(0,s.jsx)(n.code,{children:"PrismaRuntime"})," which generates complex input types."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Related concept:"})," ",(0,s.jsx)(n.a,{href:"./injections",children:"Injection"})]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["In the following sections a ",(0,s.jsx)(n.em,{children:"plain object"})," means:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"in JavaScript/TypeScript"}),": an object (literal)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"in Python"}),": a dictionary"]}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"funcreducetree",children:(0,s.jsx)(n.code,{children:"func::reduce(tree)"})}),"\n",(0,s.jsx)(n.p,{children:"The reduce method allows you to only enable some paths in the graph of the input type of the function."}),"\n",(0,s.jsxs)(n.p,{children:["The only required parameter to ",(0,s.jsx)(n.code,{children:"func::reduce"})," is the reduce tree."]}),"\n",(0,s.jsx)(n.h3,{id:"reduce-tree",children:"Reduce tree"}),"\n",(0,s.jsxs)(n.p,{children:["A reduce tree (reduce sub-tree) is plain object whose property values are either a reduce sub-tree or a ",(0,s.jsx)(n.code,{children:"g.inherit()"})," expression."]}),"\n",(0,s.jsxs)(n.p,{children:["Each plain object represents a ",(0,s.jsx)(n.code,{children:"t.struct()"})," in the input type subgraph."]}),"\n",(0,s.jsx)(n.p,{children:"All the nodes that are missing from the reduce tree will set the argument to its default value. Therefore they must be optional."}),"\n",(0,s.jsx)(n.p,{children:"Consider the following typegraph:"}),"\n",(0,s.jsxs)(i.Ay,{children:[(0,s.jsx)(l.A,{value:"typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const post = t.struct({\n  id: t.uuid(),\n  title: t.string(),\n  content: t.string(),\n});\n\nconst user = t.struct({\n  id: t.uuid(),\n  email: t.email(),\n  posts: t.list(post),\n});\n\nconst filter = t.struct({\n  id: t.uuid().optional(),\n  email: t.email().optional(),\n  posts: t.struct({\n    count: t.struct({\n      gt: t.integer({ min: 1 }).optional(),\n      lt: t.integer({ min: 1 }).optional(),\n    }),\n    tag: t.list(t.string()),\n  }),\n});\n\nconst deno = DenoRuntime();\nconst findUsers = deno.func(filter, t.list(user), { code: "..." });\n\ng.expose({\n  findUserById: findUsers.reduce({\n    id: g.inherit(),\n  }),\n  findUsersByPostCount: findUsers.reduce({\n    posts: {\n      count: g.inherit(),\n    },\n  }),\n  currentUser: findUsers.reduce({\n    id: g.inherit().fromContext("profile.userId"),\n  }),\n});\n'})})}),(0,s.jsx)(l.A,{value:"python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'post = t.struct({\n    "id": t.uuid(),\n    "email": t.email(),\n    "posts": t.list(post),\n})\n\nuser = t.struct({\n    "id": t.uuid(),\n    "email": t.email(),\n    "posts": t.list(post),\n})\n\nfilter = t.struct({\n    "id": t.uuid().optional(),\n    "email": t.email().optional(),\n    "posts": t.struct({\n        "count": t.struct({\n            "gt": t.integer(min=1).optional(),\n            "lt": t.integer(min=1).optional(),\n        }),\n        "tag": t.list(t.string()),\n    }),\n})\n\ndeno = DenoRuntime()\nfindUsers = deno.func(filter, t.list(user), code="...")\n\ng.expose(\n    findUserById=findUsers.reduce({\n        "id": g.inherit(),\n    }),\n    findUsersByPostCount=findUsers.reduce({\n        "posts": {\n            "count": g.inherit(),\n        }\n    }),\n    currentUser=findUsers.reduce({\n        "id": g.inherit().from_context("profile.userId")\n    }),\n)\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"The following queries are valid:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"query FindUsersById($id: String!) {\n  findUserById(id: $id) {\n    id\n    email\n  }\n}\n\nquery FindUsersByPostCount($min: Int!) {\n  findUsersByPostCount(posts: { count: { gt: $min } }) {\n    id\n    email\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"However the following query is invalid:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query Q {\n  findUserById(email: "user@example.com") {\n    id\n    email\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"currentUser"})," function will not accept any parameter."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Notes"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The only fully supported non-leaf node is ",(0,s.jsx)(n.code,{children:"t.struct()"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Support for ",(0,s.jsx)(n.code,{children:"t.either()"})," and ",(0,s.jsx)(n.code,{children:"t.union()"})," is experimental."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"t.list()"})," is not supported."]}),"\n",(0,s.jsx)(n.li,{children:"Each non-leaf node may be optional or not."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"funcapplytree",children:(0,s.jsx)(n.code,{children:"func::apply(tree)"})}),"\n",(0,s.jsx)(n.p,{children:"The apply method allows you to rewrite the input type of the function, enabling flat input type whatever is the level of nesting in the original input type."}),"\n",(0,s.jsxs)(n.p,{children:["The only required parameter to ",(0,s.jsx)(n.code,{children:"func::apply"})," is the apply tree."]}),"\n",(0,s.jsx)(n.h3,{id:"apply-tree",children:"Apply tree"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Lexicon"}),(0,s.jsx)(n.th,{children:"Definition"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Apply node"}),(0,s.jsx)(n.td,{children:"Object node, list node or leaf-node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Apply tree"}),(0,s.jsx)(n.td,{children:"Object node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Object node"}),(0,s.jsxs)(n.td,{children:["A plain object whose property values are nodes. It represents a ",(0,s.jsx)(n.code,{children:"t.struct()"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"List node"}),(0,s.jsxs)(n.td,{children:["An array or list whose items are nodes. It represents a ",(0,s.jsx)(n.code,{children:"t.list()"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Leaf node"}),(0,s.jsxs)(n.td,{children:["An apply expression. See ",(0,s.jsx)(n.a,{href:"#apply-expressions",children:"below"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"From the code blocks in previouse section, let's make the following changes."}),"\n",(0,s.jsxs)(i.Ay,{children:[(0,s.jsx)(l.A,{value:"typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'g.expose(\n    findUsersByPostCount: findUsers.apply({\n        posts: {\n            count: {\n                lt: g.as_arg(),\n                gt: g.as_arg(),\n            }\n        }\n    }),\n    findTechWriters: findUsers.apply({\n        posts: {\n            tags: [g.set("tech")]\n        }\n    }),\n)\n'})})}),(0,s.jsx)(l.A,{value:"python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'g.expose(\n    findUserByPostCount=findUsers.apply({\n        "posts": {\n            "count": {\n                "lt": g.as_arg(),\n                "gt": g.as_arg(),\n            }\n        }\n    }),\n    findTechWriters=findUsers.apply({\n        "posts": {\n            "tags": [g.set("tech")]\n        }\n    }),\n)\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"In this case, the matching queries are the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"query FindUsersByPostCount($lt: Int, $gt: Int) {\n  findUsersByPostCount(lt: $lt, gt: $gt) {\n    id\n    email\n  }\n}\n\nquery FindTechWriters {\n  findTechWriters {\n    id\n    email\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Those queries will be translated to the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query FindUsersByPostCount($lt: Int, $gt: Int) {\n    findUsers({ posts: { count: { lt: $lt, gt: $gt } } }) {\n        id\n        email\n    }\n}\n\nquery FindTechWriters {\n    findUsers({ posts: { tags: ["tech"] } }) {\n        id\n        email\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"apply-expressions",children:"Apply expressions"}),"\n",(0,s.jsx)(n.p,{children:"An apply expression indicates the source of the value for a specific leaf node in the apply tree."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Apply expression"}),(0,s.jsx)(n.th,{children:"Source"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"g.as_arg([name])"})}),(0,s.jsxs)(n.td,{children:["The value will be provided as a parameter, under the name ",(0,s.jsx)(n.code,{children:"name"}),". It is optional for object properties where the default is the property key."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"g.from_parent(type_name)"})}),(0,s.jsxs)(n.td,{children:["The node will have the same value as the field of the parent ",(0,s.jsx)(n.code,{children:"t.struct"})," (of the ",(0,s.jsx)(n.code,{children:"t.func"}),") that has the type name ",(0,s.jsx)(n.code,{children:"type_name"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"g.from_context(path)"})}),(0,s.jsxs)(n.td,{children:["The node will have the value of the context field accessible by the path ",(0,s.jsx)(n.code,{children:"path"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"g.from_secret(key)"})}),(0,s.jsxs)(n.td,{children:["The node will have the value of the secret named ",(0,s.jsx)(n.code,{children:"key"})," on the current typegraph."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"g.set(literal_value)"})}),(0,s.jsxs)(n.td,{children:["The passed ",(0,s.jsx)(n.code,{children:"literal_value"})," will be used."]})]})]})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65480:(e,n,t)=>{t.d(n,{Ay:()=>l,gc:()=>d});t(30758);var s=t(3733),r=t(56315),i=t(86070);function l(e){let{children:n}=e;const[t,l]=(0,s.e)();return(0,i.jsx)(r.mS,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,onChange:l,children:n})}function d(e){let{children:n}=e;const[t]=(0,s.e)();return(0,i.jsx)(r.q9,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,children:n})}}}]);