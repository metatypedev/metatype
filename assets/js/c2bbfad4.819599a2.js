"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8103],{29836:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>x,frontMatter:()=>c,metadata:()=>l,toc:()=>o});var d=s(86070),i=s(25710);const c={},r="Type comparison",l={id:"reference/types/comparison",title:"Type comparison",description:"A type A is called a subtype of a type B if any valid value for A is a valid value for B.",source:"@site/docs/reference/types/comparison.mdx",sourceDirName:"reference/types",slug:"/reference/types/comparison",permalink:"/docs/reference/types/comparison",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/docs/reference/types/comparison.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Types",permalink:"/docs/reference/types/"},next:{title:"Functions",permalink:"/docs/reference/types/functions"}},t={},o=[{value:"Semantics",id:"semantics",level:2},{value:"Scalar types",id:"scalar-types",level:3},{value:"Optionals",id:"optionals",level:3},{value:"Lists",id:"lists",level:3},{value:"Objects: <code>t.struct()</code>",id:"objects-tstruct",level:3},{value:"Unions: <code>t.union()</code> and <code>t.either()</code>",id:"unions-tunion-and-teither",level:3},{value:"Examples",id:"examples",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",section:"section",strong:"strong",sup:"sup",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h1,{id:"type-comparison",children:"Type comparison"}),"\n",(0,d.jsxs)(n.p,{children:["A type ",(0,d.jsx)(n.code,{children:"A"})," is called a ",(0,d.jsx)(n.strong,{children:"subtype of"})," a type ",(0,d.jsx)(n.code,{children:"B"})," if any valid value for ",(0,d.jsx)(n.code,{children:"A"})," is a valid value for ",(0,d.jsx)(n.code,{children:"B"}),".\nThis means that ",(0,d.jsx)(n.code,{children:"B"})," has a broader range of values."]}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.em,{children:'"is subtype of"'})," relation between types is ",(0,d.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Partially_ordered_set",children:"partial order relation"}),"\nequivalent to the ",(0,d.jsx)(n.em,{children:'"is subset of"'}),' relation (set inclusion) if types were defined as a set of values.\nNote that the reflexivity of partial orders translates to "for all type ',(0,d.jsx)(n.code,{children:"A"}),", ",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"A"}),'".']}),"\n",(0,d.jsxs)(n.p,{children:["This type comparison is required for the validation of ",(0,d.jsxs)(n.a,{href:"/docs/reference/types/injections#parent",children:[(0,d.jsx)(n.em,{children:"from parent"})," injections"]}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"semantics",children:"Semantics"}),"\n",(0,d.jsxs)(n.p,{children:["In this section ",(0,d.jsx)(n.code,{children:"A"})," and ",(0,d.jsx)(n.code,{children:"B"})," denote types, ",(0,d.jsx)(n.code,{children:"U"})," and ",(0,d.jsx)(n.code,{children:"V"})," denote lists of types."]}),"\n",(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),", then ",(0,d.jsx)(n.code,{children:"A"})," and ",(0,d.jsx)(n.code,{children:"B"})," are either both scalar types or both non-scalar types."]}),"\n",(0,d.jsx)(n.h3,{id:"scalar-types",children:"Scalar types"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"A"})," is a scalar type and ",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"})," then\n",(0,d.jsx)(n.code,{children:"B"})," is a scalar type or a union type with at least one variant that is a supertype of ",(0,d.jsx)(n.code,{children:"A"}),"."]}),"\n",(0,d.jsxs)(n.p,{children:["Note that this is stricter than it should be because we ",(0,d.jsx)(n.em,{children:"currently"})," only check individually on each union variant."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"})," and ",(0,d.jsx)(n.code,{children:"B"})," is a scalar type then\n",(0,d.jsx)(n.code,{children:"A"})," is a scalar type of a union type in which any variant is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Suppose that ",(0,d.jsx)(n.code,{children:"A"})," and ",(0,d.jsx)(n.code,{children:"B"})," are scalar types."]}),"\n",(0,d.jsxs)(n.p,{children:["Then ",(0,d.jsx)(n.code,{children:"A"})," is subtype of ",(0,d.jsx)(n.code,{children:"B"})," if and only if the following conditions hold:"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"A"})," and ",(0,d.jsx)(n.code,{children:"B"})," are the same type or ",(0,d.jsx)(n.code,{children:"A"})," is a ",(0,d.jsx)(n.code,{children:"t.integer()"})," and ",(0,d.jsx)(n.code,{children:"B"})," is a ",(0,d.jsx)(n.code,{children:"t.float()"}),";"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.a,{href:"/docs/reference/types",children:"Type constraints"})," defined on ",(0,d.jsx)(n.code,{children:"B"})," are all defined on ",(0,d.jsx)(n.code,{children:"A"})," and satisfy:"]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Type Constraint"}),(0,d.jsx)(n.th,{children:"Condition"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"t.integer()"}),", ",(0,d.jsx)(n.code,{children:"t.float()"})]}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"min"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.min >= B.min"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"t.integer()"}),", ",(0,d.jsx)(n.code,{children:"t.float()"})]}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"x_min"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.x_min >= B.x_min"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"t.integer()"}),", ",(0,d.jsx)(n.code,{children:"t.float()"})]}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"max"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.max <= B.max"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"t.integer()"}),", ",(0,d.jsx)(n.code,{children:"t.float()"})]}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"x_max"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.x_max <= B.x_max"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"t.integer()"}),", ",(0,d.jsx)(n.code,{children:"t.float()"})]}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"multiple_of"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"A.multiple_of"})," is a multiple of ",(0,d.jsx)(n.code,{children:"B.multiple_of"})]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"t.string()"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"min"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.min >= B.min"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"t.string()"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"max"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.max <= B.max"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"t.string()"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"pattern"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"A.pattern == B.pattern"}),(0,d.jsx)(n.sup,{children:(0,d.jsx)(n.a,{href:"#user-content-fn-pat",id:"user-content-fnref-pat","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"t.string()"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"format"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.format == B.format"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"t.file()"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"min"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.min >= B.min"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"t.file()"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"max"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.max <= B.max"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"t.file()"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"allow"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"A.allow"})," is a subset of ",(0,d.jsx)(n.code,{children:"B.allow"})]})]})]})]}),"\n",(0,d.jsxs)(n.p,{children:["Note that type constraints defined on ",(0,d.jsx)(n.code,{children:"A"})," are not required to be defined on ",(0,d.jsx)(n.code,{children:"B"}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"B"})," is an enum, then ",(0,d.jsx)(n.code,{children:"A"})," is an enum and all enumeration values defined for ",(0,d.jsx)(n.code,{children:"A"})," are defined for ",(0,d.jsx)(n.code,{children:"B"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"optionals",children:"Optionals"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"t.optional(B)"})," if and only if ",(0,d.jsx)(n.code,{children:"A"})," is subtype of ",(0,d.jsx)(n.code,{children:"B"}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"t.optional(A)"})," is a subtype of ",(0,d.jsx)(n.code,{children:"t.optional(B)"})," if and only if ",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"B"})," is not an optional type, then ",(0,d.jsx)(n.code,{children:"t.optional(A)"})," is not a subtype of ",(0,d.jsx)(n.code,{children:"B"}),"."]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"lists",children:"Lists"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Suppose that ",(0,d.jsx)(n.code,{children:"A"})," and ",(0,d.jsx)(n.code,{children:"B"})," are non-optional types and ",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),".\nIf ",(0,d.jsx)(n.code,{children:"A"})," is a list then ",(0,d.jsx)(n.code,{children:"B"})," is a list and vice-versa."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Let ",(0,d.jsx)(n.code,{children:"X"})," a list type whose item type is ",(0,d.jsx)(n.code,{children:"A"}),", and ",(0,d.jsx)(n.code,{children:"Y"})," a list type whose item type is ",(0,d.jsx)(n.code,{children:"B"}),".\n",(0,d.jsx)(n.code,{children:"X"})," is a subtype of ",(0,d.jsx)(n.code,{children:"Y"})," if and only if"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),","]}),"\n",(0,d.jsxs)(n.li,{children:["Type constraints defined on ",(0,d.jsx)(n.code,{children:"X"})," are all defined on ",(0,d.jsx)(n.code,{children:"Y"})," and satisfy:","\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Type constraint"}),(0,d.jsx)(n.th,{children:"Condition"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"min"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"X.min >= Y.min"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"max"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"X.max <= Y.max"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"unique_items"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"X.unique_items == Y.unique_items"})})]})]})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Note that the type constraints defined on ",(0,d.jsx)(n.code,{children:"X"})," are not required to be defined on ",(0,d.jsx)(n.code,{children:"Y"}),"."]}),"\n",(0,d.jsxs)(n.h3,{id:"objects-tstruct",children:["Objects: ",(0,d.jsx)(n.code,{children:"t.struct()"})]}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Suppose that ",(0,d.jsx)(n.code,{children:"A"})," and ",(0,d.jsx)(n.code,{children:"B"})," are non-optional types and ",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),".\nIf ",(0,d.jsx)(n.code,{children:"A"})," is an object type then ",(0,d.jsx)(n.code,{children:"B"})," is an object type, and vice-versa."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"A"})," and ",(0,d.jsx)(n.code,{children:"B"})," are object types, then\n",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"})," if and only if"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["All field key defined in ",(0,d.jsx)(n.code,{children:"A"})," is defined in ",(0,d.jsx)(n.code,{children:"B"}),","]}),"\n",(0,d.jsxs)(n.li,{children:["For all field defined in ",(0,d.jsx)(n.code,{children:"B"})," with key ",(0,d.jsx)(n.em,{children:"K"}),",\neither the field is optional on ",(0,d.jsx)(n.code,{children:"B"}),"\nor ",(0,d.jsx)(n.code,{children:"A"})," has a field with key ",(0,d.jsx)(n.em,{children:"K"})," whose type is a subtype of the one in ",(0,d.jsx)(n.code,{children:"B"}),";"]}),"\n",(0,d.jsxs)(n.li,{children:["Type constraints defined on ",(0,d.jsx)(n.code,{children:"B"})," are all defined on ",(0,d.jsx)(n.code,{children:"A"})," and satisfy:","\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Type constraint"}),(0,d.jsx)(n.th,{children:"Condition"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"min"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.min >= B.min"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"max"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"A.max <= B.max"})})]})]})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"unions-tunion-and-teither",children:["Unions: ",(0,d.jsx)(n.code,{children:"t.union()"})," and ",(0,d.jsx)(n.code,{children:"t.either()"})]}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"A"})," is a type and ",(0,d.jsx)(n.code,{children:"V"})," a list of types then\n",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"t.union(V)"})," if and only if\nthere is a type ",(0,d.jsx)(n.code,{children:"B"})," in ",(0,d.jsx)(n.code,{children:"V"})," such that ",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"A"})," is a type and ",(0,d.jsx)(n.code,{children:"V"})," a list of types then\n",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"t.either(V)"})," if and only if\nthere is a unique type ",(0,d.jsx)(n.code,{children:"B"})," in ",(0,d.jsx)(n.code,{children:"V"})," such that ",(0,d.jsx)(n.code,{children:"A"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["If ",(0,d.jsx)(n.code,{children:"U"})," is a list of types and ",(0,d.jsx)(n.code,{children:"B"})," a type then"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"t.union(U)"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"})," if and only if\neach type ",(0,d.jsx)(n.code,{children:"A"})," in ",(0,d.jsx)(n.code,{children:"U"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),";"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"t.either(U)"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"})," if and only if\neach type ",(0,d.jsx)(n.code,{children:"A"})," in ",(0,d.jsx)(n.code,{children:"U"})," is a subtype of ",(0,d.jsx)(n.code,{children:"B"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,d.jsxs)(n.p,{children:["You can find examples of type comparison in the\n",(0,d.jsx)(n.a,{href:"https://github.com/metatypedev/metatype/blob/main/tests/schema_validation/type_comparison.py",children:"type comparison test suite"}),"."]}),"\n","\n",(0,d.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,d.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{id:"user-content-fn-pat",children:["\n",(0,d.jsxs)(n.p,{children:["The patterns are required to be exactly the same\nbecause we currently do not have any other comparison semantic for regular expressions. ",(0,d.jsx)(n.a,{href:"#user-content-fnref-pat","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}}}]);