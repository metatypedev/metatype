"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7663],{48057:(e,t,n)=>{n.d(t,{ZP:()=>u});var r=n(11527),s=n(67541),i=n(50959),a=n(84491),o=n(10267),l=n(36018),c=n(56096);const h=a.Ps`
  mutation docs($email: String!) {
    newsletterSignUp(email: $email) {
      id
    }
  }
`;function d(){const[e,t]=(0,i.useState)(""),[n,s]=(0,i.useState)(null),a=function(e){const{siteConfig:{customFields:{tgUrl:t}}}=(0,c.Z)();return(0,i.useMemo)((()=>new o.f({uri:`${t}/${e}`,cache:new l.h})),[t])}("docs");return n||(0,r.jsxs)("form",{onSubmit:async t=>{if(t.preventDefault(),e.length>0){const{data:t}=await a.mutate({mutation:h,variables:{email:e}});s(t?.newsletterSignUp?.id?"Success!":"Already subscribed!")}},className:"inline-block rounded-lg overflow-clip",children:[(0,r.jsx)("input",{type:"email",className:"px-2 py-2 font-sans bg-slate-100 border-none text-base",value:e,onChange:e=>t(e.target.value)}),(0,r.jsx)("input",{type:"submit",className:"py-2 px-2 border-none cursor-pointer text-base bg-slate-500 text-white",value:"Submit"})]})}function p(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"with-metatype-cloud",children:"With Metatype Cloud"}),"\n",(0,r.jsx)(t.p,{children:"This is the easiest way to get started, yet it's not publicly accessible. You can sign up for the private beta below."}),"\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(t.h3,{id:"with-docker",children:"With Docker"}),"\n",(0,r.jsxs)(t.p,{children:["Install ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/get-docker/",children:"Docker"})," and use the following ",(0,r.jsx)(t.code,{children:"compose.yml"})," to launch a typegate node. Redis is the single required dependency, however in practice you will want to add database or other systems that the typegate can connect to."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yml",children:'services:\n  typegate:\n    image: ghcr.io/metatypedev/typegate:latest\n    ports:\n      - "7890:7890"\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    environment:\n      # only for dev, generate secure values for production\n      TG_SECRET: "a4lNi0PbEItlFZbus1oeH/+wyIxi9uH6TpL8AIqIaMBNvp7SESmuUBbfUwC0prxhGhZqHw8vMDYZAGMhSZ4fLw=="\n      TG_ADMIN_PASSWORD: password\n      REDIS_URL: redis://:password@redis:6379/0\n      DEBUG: "true"\n    depends_on:\n      - redis\n\n  redis:\n    image: redis:7\n    restart: always\n    command: --requirepass password\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# launch the containers\ndocker compose up --detach\n\n# watch the typegate logs\ndocker compose logs typegate --follow\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},51152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var r=n(11527),s=n(67541),i=n(48057);const a={sidebar_position:6},o="Typegate",l={id:"reference/typegate/index",title:"Typegate",description:"Typegate version",source:"@site/docs/reference/typegate/index.mdx",sourceDirName:"reference/typegate",slug:"/reference/typegate/",permalink:"/docs/reference/typegate/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/typegate/index.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docs",previous:{title:"Specifications",permalink:"/docs/reference/typegraph/specifications"},next:{title:"Authentication",permalink:"/docs/reference/typegate/authentication/"}},c={},h=[{value:"Internal APIs",id:"internal-apis",level:2},{value:"Request lifecycle",id:"request-lifecycle",level:2},{value:"HTTP/GraphQL interface",id:"httpgraphql-interface",level:2}];function d(e){const t={a:"a",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"typegate",children:"Typegate"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/metatypedev/metatype/pkgs/container/typegate",children:(0,r.jsx)(t.img,{src:"https://ghcr-badge.deta.dev/metatypedev/typegate/latest_tag?trim=major&label=typegate",alt:"Typegate version"})})}),"\n",(0,r.jsx)(i.ZP,{}),"\n",(0,r.jsx)(t.h2,{id:"internal-apis",children:"Internal APIs"}),"\n",(0,r.jsx)(t.p,{children:"Most of the internal APIs are still unstable, and may change without notice. If you still want to experiment with them, you can use the GraphQL introspection to discover them."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"/typegate"}),"\n",(0,r.jsx)(t.li,{children:"/prisma-migration"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The typegate nodes - or typegates - are the central components of the ecosystems. They build and type check typegraphs, and expose them through a HTTP/GraphQL interface. They enforce the type safety of the data flows, connect to all the runtimes and orchestrate the execution of incoming requests."}),"\n",(0,r.jsx)(t.h2,{id:"request-lifecycle",children:"Request lifecycle"}),"\n",(0,r.jsx)(t.p,{children:"When a new request fires a trigger, the typegate orchestrates the following stages:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"extract the secure request context from custom authentication or JSON Web Token (JWT)"}),"\n",(0,r.jsxs)(t.li,{children:["retrieve cached execution plan or compute a new one","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"traverse the typegraph to create a DAG of the required types"}),"\n",(0,r.jsx)(t.li,{children:"optimize the DAG to reduce the number of calls to the runtimes"}),"\n",(0,r.jsx)(t.li,{children:"pre-compute all structural elements and data resolutions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["execute the plan","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"type check the arguments"}),"\n",(0,r.jsx)(t.li,{children:"verify lazily policies on the need"}),"\n",(0,r.jsx)(t.li,{children:"run the DAG execution"}),"\n",(0,r.jsx)(t.li,{children:"enforce the rate-limiting"}),"\n",(0,r.jsx)(t.li,{children:"type check the response"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:"manage metadata of the request"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"httpgraphql-interface",children:"HTTP/GraphQL interface"}),"\n",(0,r.jsxs)(t.p,{children:["For now, the typegate nodes are only accessible through HTTP/1.1 and HTTP/2. More protocols could be supported in the future. Typegates expose a GraphQL interface which is the result of a ",(0,r.jsx)(t.a,{href:"./typegraph",children:"typegraph"})," projected onto corresponding GraphQL types. While this reduces the type safety of the data flowing, it makes more interoperable thanks to the many high-quality and well-known GraphQL tooling already available. The underlying types are also exposed in order for API clients to verify the underlying types."]}),"\n",(0,r.jsx)(t.p,{children:"GraphQL, being a query language, offers a great asset for Metatype's philosophy:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Efficient querying: the client can specify exactly what data it needs, reducing the amount of over- or under-fetching"}),"\n",(0,r.jsx)(t.li,{children:"Flexibility: allows for retrieving multiple resources in a single request, unlike REST, which often requires multiple ones"}),"\n",(0,r.jsx)(t.li,{children:"Typing: GraphQL has a built-in type system that allows for better documentation and stronger validation of the requests"}),"\n",(0,r.jsx)(t.li,{children:"Improved tooling: tools and libraries around GraphQL are rapidly growing and great a development experience"}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);