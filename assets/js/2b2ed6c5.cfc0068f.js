(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3394],{17942:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>c,kt:()=>h});var a=n(50959);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),p=i,h=u["".concat(s,".").concat(p)]||u[p]||m[p]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},43726:(e,t,n)=>{"use strict";n.d(t,{r:()=>i});var a=n(50959);function i(e){let{name:t,choices:n,choice:i,onChange:r,className:o}=e;return a.createElement("ul",{className:`pl-0 m-0 list-none w-full ${o??""}`},Object.entries(n).map((e=>{let[n,o]=e;return a.createElement("li",{key:n,className:"inline-block rounded-md overflow-clip mr-1"},a.createElement("div",null,a.createElement("label",{className:"cursor-pointer"},a.createElement("input",{type:"radio",name:t,value:n,checked:n===i,onChange:()=>r(n),className:"hidden peer"}),a.createElement("div",{className:"px-3 py-1 bg-slate-100 peer-checked:bg-metared peer-checked:text-white"},o))))})))}},66360:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var a=n(50959),i=n(55362),r=n(90430),o=n(85551),l=n(90116),s=n(14623);const d=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function c(e){const{queryEditor:t,variableEditor:n,headerEditor:i}=(0,s._i)({nonNull:!0}),[r,o]=(0,a.useState)(e.defaultTab),l=(0,s.Xd)({onCopyQuery:e.onCopyQuery}),c=(0,s.fE)();return(0,a.useEffect)((()=>{n&&d(n)}),[r,n]),(0,a.useEffect)((()=>{i&&d(i)}),[r,i]),(0,a.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("extraKeys",{"Alt-G":()=>{t.replaceSelection("@")}}),t.setOption("gutters",[]),t.on("change",d),d(t))}),[t]),(0,a.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("gutters",[]),n.on("change",d))}),[n]),(0,a.useEffect)((()=>{i&&(i.setOption("lineNumbers",!1),i.setOption("gutters",[]),i.on("change",d))}),[i]),a.createElement(s.u.Provider,null,a.createElement("div",{className:"graphiql-editors"},a.createElement("section",{className:"graphiql-query-editor shadow-sm","aria-label":"Query Editor"},a.createElement("div",{className:"graphiql-query-editor-wrapper"},a.createElement(s.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),a.createElement("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands"},a.createElement(s._8,null),a.createElement(s.wC,{onClick:()=>c(),label:"Prettify query (Shift-Ctrl-P)"},a.createElement(s.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})),a.createElement(s.wC,{onClick:()=>l(),label:"Copy query (Shift-Ctrl-C)"},a.createElement(s.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"}))))),e.noTool?null:a.createElement(a.Fragment,null,a.createElement("div",{className:"graphiql-editor-tools p-0 text-sm "},a.createElement("div",{className:"graphiql-editor-tools-tabs"},a.createElement("div",{className:("variables"===r?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("variables"===r?"":"variables")}},"Variables"),a.createElement("div",{className:("headers"===r?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("headers"===r?"":"headers")}},"Headers"))),a.createElement("section",{className:"graphiql-editor-tool "+(r&&r.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===r?"Variables":"Headers"},a.createElement(s.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==r,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),a.createElement(s.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==r,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})))))}class u{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var m=n(43726);function p(){return(0,s.JB)({nonNull:!0}).isFetching?a.createElement(s.$j,null):null}const h={typegraph:"Typegraph",playground:"Playground"};function g(e){let{typegraph:t,query:n,code:r,codeLanguage:d,codeFileUrl:g,headers:f={},variables:y={},tab:k="",noTool:v=!1,defaultMode:b=null}=e;const{siteConfig:{customFields:{tgUrl:N}}}=(0,o.Z)(),E=(0,a.useMemo)((()=>new u),[]),w=(0,a.useMemo)((()=>(0,i.nq)({url:`${N}/${t}`})),[]),[x,O]=(0,a.useState)(b);return a.createElement("div",{className:"@container miniql mb-5"},b?a.createElement(m.r,{name:"mode",choices:h,choice:x,onChange:O,className:"mb-2"}):null,a.createElement(s.j$,{fetcher:w,defaultQuery:n.loc?.source.body.trim(),defaultHeaders:JSON.stringify(f),shouldPersistHeaders:!0,variables:JSON.stringify(y),storage:E},a.createElement("div",{className:(b?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first"},b&&"typegraph"!==x?null:a.createElement("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0"},g?a.createElement("div",{className:"p-2 text-xs font-light"},"See/edit full code on"," ",a.createElement("a",{href:`https://github.com/metatypedev/metatype/blob/main/${g}`},g)):null,r?a.createElement(l.Z,{language:d,wrap:!0,className:"flex-1"},r):null),b&&"playground"!==x?null:a.createElement("div",{className:"flex flex-col graphiql-container"},a.createElement("div",{className:"flex-1 graphiql-session"},a.createElement(c,{defaultTab:k,noTool:v})),a.createElement("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg"},a.createElement(p,null),a.createElement(s.iB,null))))))}function f(e){return a.createElement(r.Z,{fallback:a.createElement("div",null,"Loading...")},(()=>a.createElement(g,e)))}},31645:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var a=n(28957),i=n(66360),r=n(50959);function o(e){let{python:t,...n}=e;return r.createElement(i.Z,(0,a.Z)({code:t.content,codeLanguage:"python",codeFileUrl:t.path},n))}},5488:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var a=n(28957),i=(n(50959),n(17942)),r=n(31645),o=n(90116);const l={sidebar_position:4},s="Import your existing APIs",d={unversionedId:"tutorials/import-your-existing-apis/index",id:"tutorials/import-your-existing-apis/index",title:"Import your existing APIs",description:"Let's summarize how far you progress made towards the chat-based app. The APIs should offer the following functionalities:",source:"@site/docs/tutorials/import-your-existing-apis/index.mdx",sourceDirName:"tutorials/import-your-existing-apis",slug:"/tutorials/import-your-existing-apis/",permalink:"/docs/tutorials/import-your-existing-apis/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/tutorials/import-your-existing-apis/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Adding more runtimes",permalink:"/docs/tutorials/adding-more-runtimes/"},next:{title:"Authentication and security",permalink:"/docs/tutorials/authentication-and-security/"}},c={},u=[{value:"Google importers",id:"google-importers",level:2},{value:"Effects",id:"effects",level:2},{value:"Introduction to typegraph_std",id:"introduction-to-typegraph_std",level:2}],m={toc:u},p="wrapper";function h(e){let{components:t,...l}=e;return(0,i.kt)(p,(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"import-your-existing-apis"},"Import your existing APIs"),(0,i.kt)("p",null,"Let's summarize how far you progress made towards the chat-based app. The APIs should offer the following functionalities:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"list messages \u2705"),(0,i.kt)("li",{parentName:"ul"},"create a message \u2705"),(0,i.kt)("li",{parentName:"ul"},"retrieve the user from a message \u2705"),(0,i.kt)("li",{parentName:"ul"},"send a notification to all users when there is a new message \ud83d\udd63"),(0,i.kt)("li",{parentName:"ul"},"authentication and rate-limit the call \ud83d\udd63"),(0,i.kt)("li",{parentName:"ul"},"add access control management \ud83d\udd63"),(0,i.kt)("li",{parentName:"ul"},"some business logic \ud83d\udd63")),(0,i.kt)("p",null,"For the notifications, Google offer a ",(0,i.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/fcm/rest"},"Firebase Cloud Messaging")," (FCM) API which supports push on iOS, Android and web. Sadly as most of Google service, they don't provide an OpenAPI specification or a friendly GraphQL API. Rather they developed their own API definition files called API Discovery Service which maps incoming REST request onto their internal GRPC implementation, but this is a digression."),(0,i.kt)("h2",{id:"google-importers"},"Google importers"),(0,i.kt)("p",null,"The typegraph module comes with some handy importers to avoid having to rewrite manually all types and materializers. Currently, it supports importers for OpenAPI, GraphQL API and Google APIs."),(0,i.kt)("admonition",{title:"Beta/unstable feature",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Importers are quite recent and likely to evolve as feedback is received. Your voice and use cases matter a lot, let Metatype community know what suits you the best in this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/metatypedev/metatype/discussions/104"},"discussion"),".")),(0,i.kt)("p",null,"Importers are function call with a boolean re-writing the source code file where they live. As they can generate quite long type definition, the best practice is to separate them into a dedicated file that can be imported into your main typegraph. Let's create ",(0,i.kt)("inlineCode",{parentName:"p"},"google.py")," and run ",(0,i.kt)("inlineCode",{parentName:"p"},"python google.py")," to generate the types."),(0,i.kt)(o.Z,{language:"python",mdxType:"CodeBlock"},n(1034).content),(0,i.kt)("p",null,"This should generate code similar to this:"),(0,i.kt)(o.Z,{language:"python",mdxType:"CodeBlock"},n(66765).content),(0,i.kt)("p",null,"And can be imported/customized in your main typegraph file:"),(0,i.kt)(r.Z,{typegraph:"fcm",python:n(47886),query:n(93627),mdxType:"TGExample"}),(0,i.kt)("h2",{id:"effects"},"Effects"),(0,i.kt)("p",null,"Effects are a property of materializers and help categorization what happens to data when it gets transformed. Although they are similar to REST verbs and SQL statements, there is no direct one-to-one mapping."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Effects"),(0,i.kt)("th",{parentName:"tr",align:null},"REST verbs"),(0,i.kt)("th",{parentName:"tr",align:null},"SQL statements"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"none")),(0,i.kt)("td",{parentName:"tr",align:null},"GET"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"SELECT"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"create")),(0,i.kt)("td",{parentName:"tr",align:null},"POST"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"INSERT"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"update")),(0,i.kt)("td",{parentName:"tr",align:null},"PUT/PATCH"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"UPDATE"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"upsert")),(0,i.kt)("td",{parentName:"tr",align:null},"PUT"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"INSERT ON CONFLICT"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delete")),(0,i.kt)("td",{parentName:"tr",align:null},"DELETE"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"DELETE"))))),(0,i.kt)("p",null,"They provide hints to the typegates for the query orchestration by splitting the queries and mutations. For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," effect is exposed as a mutation. They also allow setting different policies based on them, that's for the next page."),(0,i.kt)("h2",{id:"introduction-to-typegraph_std"},"Introduction to typegraph_std"),(0,i.kt)("p",null,"Alternatively, you can use the typegraph_std for the most common APIs.\nIt comes as a separate package so instead of maintening your own importers, you can use typegraph_std."),(0,i.kt)("p",null,"The package currently includes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Google APIs (fcm, firebase, youtube, etc.)"),(0,i.kt)("li",{parentName:"ul"},"Stripe"),(0,i.kt)("li",{parentName:"ul"},"Github")),(0,i.kt)(o.Z,{language:"python",mdxType:"CodeBlock"},n(38700).content),(0,i.kt)("p",null,"As you can see, it works pretty much the same way as importers."))}h.isMDXComponent=!0},93627:e=>{var t={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"A"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"send_notification"},arguments:[{kind:"Argument",name:{kind:"Name",value:"parent"},value:{kind:"StringValue",value:"projects/<project-id>",block:!1}},{kind:"Argument",name:{kind:"Name",value:"auth"},value:{kind:"StringValue",value:"<bearer_token>",block:!1}},{kind:"Argument",name:{kind:"Name",value:"validateOnly"},value:{kind:"BooleanValue",value:!0}},{kind:"Argument",name:{kind:"Name",value:"message"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"notification"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"title"},value:{kind:"StringValue",value:"FCM Message",block:!1}},{kind:"ObjectField",name:{kind:"Name",value:"body"},value:{kind:"StringValue",value:"This is an FCM Message",block:!1}}]}},{kind:"ObjectField",name:{kind:"Name",value:"token"},value:{kind:"StringValue",value:"<token>",block:!1}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"error"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"code"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"message"},arguments:[],directives:[]}]}}]}}]}},{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"B"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"user"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"StringValue",value:"1",block:!1}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:405}};t.loc.source={body:'mutation A {\n  send_notification(\n    parent: "projects/<project-id>"\n    auth: "<bearer_token>"\n    # test with a fake message\n    validateOnly: true\n    message: {\n      notification: { title: "FCM Message", body: "This is an FCM Message" }\n      # recipient\n      token: "<token>"\n    }\n  ) {\n    name\n    error {\n      code\n      message\n    }\n  }\n}\n\nquery B {\n  user(id: "1") {\n    id\n    name\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function n(e,t){if("FragmentSpread"===e.kind)t.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&t.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){n(e,t)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){n(e,t)})),e.definitions&&e.definitions.forEach((function(e){n(e,t)}))}var a={};function i(e,t){for(var n=0;n<e.definitions.length;n++){var a=e.definitions[n];if(a.name&&a.name.value==t)return a}}function r(e,t){var n={kind:e.kind,definitions:[i(e,t)]};e.hasOwnProperty("loc")&&(n.loc=e.loc);var r=a[t]||new Set,o=new Set,l=new Set;for(r.forEach((function(e){l.add(e)}));l.size>0;){var s=l;l=new Set,s.forEach((function(e){o.has(e)||(o.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return o.forEach((function(t){var a=i(e,t);a&&n.definitions.push(a)})),n}t.definitions.forEach((function(e){if(e.name){var t=new Set;n(e,t),a[e.name.value]=t}})),e.exports=t,e.exports.A=r(t,"A"),e.exports.B=r(t,"B")},47886:e=>{e.exports={content:"",path:"website/docs/tutorials/import-your-existing-apis/fcm.py"}},66765:e=>{e.exports={content:"",path:"website/docs/tutorials/import-your-existing-apis/google.py"}},1034:e=>{e.exports={content:"",path:"website/docs/tutorials/import-your-existing-apis/importer.py"}},38700:e=>{e.exports={content:"",path:"website/docs/tutorials/import-your-existing-apis/typegraph_std.py"}}}]);