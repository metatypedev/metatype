"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1723],{33454:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var s=t(86070),i=t(25710),r=t(65480),a=t(27676);const o={},l="Substantial",c={id:"reference/runtimes/substantial/index",title:"Substantial",description:"Substantial runtime",source:"@site/docs/reference/runtimes/substantial/index.mdx",sourceDirName:"reference/runtimes/substantial",slug:"/reference/runtimes/substantial/",permalink:"/docs/reference/runtimes/substantial/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/docs/reference/runtimes/substantial/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"S3",permalink:"/docs/reference/runtimes/s3/"},next:{title:"Temporal",permalink:"/docs/reference/runtimes/temporal/"}},d={},u=[{value:"Substantial runtime",id:"substantial-runtime",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Workflows",id:"workflows",level:3},{value:"Backend",id:"backend",level:3},{value:"Run",id:"run",level:3},{value:"Child workflows",id:"child-workflows",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"substantial",children:"Substantial"}),"\n",(0,s.jsx)(n.h2,{id:"substantial-runtime",children:"Substantial runtime"}),"\n",(0,s.jsx)(n.p,{children:"The Substantial runtime enables the execution of durable workflows in one or accross multiple typegates."}),"\n",(0,s.jsx)(n.p,{children:"Why use it?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'Long-running "processes"'}),": Durable tasks that need to run over extended periods (days, weeks or months), handling ",(0,s.jsx)(n.strong,{children:"retries"})," and ",(0,s.jsx)(n.strong,{children:"restarts"})," seamlessly."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fault-tolerant execution"}),": Ensure reliable execution of tasks, even upon failures, by maintaining a durable state of the latest run."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Task orchestration"}),": Coordinate complex sequences of workflows (analogous to microservices interactions)."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For example, the workflow bellow will continue running until a ",(0,s.jsx)(n.code,{children:"confirmation"})," event is sent to the ",(0,s.jsx)(n.strong,{children:"associated run"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'export async function sendEmail(ctx: Context) {\n  // 1. A workflow can receive parameters whose type is defined on the typegraph\n  const { to } = ctx.kwargs;\n\n  // 2. When a function call produces effects, we can make it durable\n  const info = await ctx.save(() => sendSubscriptionEmail(to));\n  const timeSent = await ctx.save(() => new Date().toJSON());\n\n  const confirmation = ctx.receive<boolean>("confirmation");\n  if (!confirmation) {\n    throw new Error(`${to} has denied the subscription sent at ${timeSent}`);\n  }\n\n  return `${to} confirmed (${info})`;\n}\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, if we were to shut down the Typegate node executing it and then restart it, the state ",(0,s.jsx)(n.strong,{children:"will be preserved"}),". This means that if the subscription email was already sent, upon relaunch, it will not be sent again, same thing for the value of ",(0,s.jsx)(n.code,{children:"timeSent"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"workflows",children:"Workflows"}),"\n",(0,s.jsxs)(n.p,{children:["A special type of function with ",(0,s.jsx)(n.strong,{children:"durable state"})," and an execution mechanism directly tied to time. A workflow can also trigger other workflows (child workflows)."]}),"\n",(0,s.jsx)(n.h3,{id:"backend",children:"Backend"}),"\n",(0,s.jsxs)(n.p,{children:["This abstraction implements a set of atomic operations that allows Typegate to persist and recover the workflow state. Currently, we have the ",(0,s.jsx)(n.strong,{children:"Redis"})," backend available, along with others like ",(0,s.jsx)(n.strong,{children:"fs"})," and ",(0,s.jsx)(n.strong,{children:"memory"}),", which are primarily intended for development or testing purposes."]}),"\n",(0,s.jsx)(n.h3,{id:"run",children:"Run"}),"\n",(0,s.jsxs)(n.p,{children:["When a workflow is started, a run is created and Substantial will provide you a ",(0,s.jsx)(n.code,{children:"run_id"})," to uniquely identify it."]}),"\n",(0,s.jsxs)(n.p,{children:["You can send an event or abort an ongoing run from its ",(0,s.jsx)(n.code,{children:"run_id"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"child-workflows",children:"Child workflows"}),"\n",(0,s.jsx)(n.p,{children:"Child workflows are like any other workflows, they are just run by another workflow (parent)."}),"\n",(0,s.jsx)(n.p,{children:"If a workflow parent is explicitly stopped or aborted, all of its descendants will also be aborted."}),"\n",(0,s.jsx)(n.p,{children:"For example, suppose you want to write a workflow that sends a subscription request to a list of emails and then receive a notification for each confirmation or denial, but only during your work hours."}),"\n",(0,s.jsx)(n.p,{children:"You can easily translate that logic as if you were writing generic sequential code using Substantial workflows."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { nextTimeWhenAdminIsAvailable, sendSubscriptionEmail, notifyAdmin } from "./utils.ts";\n\nexport async function sendEmail(ctx: Context) {\n  // 1. A workflow can receive parameters whose type is defined on the typegraph\n  const { to } = ctx.kwargs;\n\n  // 2. When a function call produces effects, we can make it durable\n  const info = await ctx.save(() => sendSubscriptionEmail(to));\n  const timeSent = await ctx.save(() => new Date());\n\n  const confirmation = ctx.receive<boolean>("confirmation");\n  if (!confirmation) {\n    throw new Error(`${to} has denied the subscription sent at ${timeSent}`);\n  }\n\n  // 3. In this scenario, we use a durable sleep to wait until the admin\n  // is available\n  const duration = await ctx.save(() => nextTimeWhenAdminIsAvailable(new Date()));\n  ctx.sleep(duration);\n\n  const _ = await ctx.save(() => notifyAdmin(info), {\n    retry: {\n      minBackoffMs: 1000,\n      maxBackoffMs: 5000,\n      maxRetries: 4,\n    }\n  });\n\n  return `${to} confirmed`;\n}\n\nexport async function sendMultipleEmails(ctx: Context) {\n  const { emails } = ctx.kwargs;\n\n  // 1. Persist the state of the child workflows\n  const handlersDef = await ctx.save(async () => {\n    const handlersDef = [];\n    for (const email of emails) {\n      const handleDef = await ctx.startChildWorkflow(sendEmail, {\n        to: email,\n      });\n      handlersDef.push(handleDef);\n    }\n\n    return handlersDef;\n  });\n\n  // 2. Create handles for your child workflows\n  const handles = handlersDef.map((def) => ctx.createWorkflowHandle(def));\n\n  // 3. In this example, we wait on all child workflows to complete\n  await ctx.ensure(async () => {\n    for (const handle of handles) {\n      if (!(await handle.hasStopped())) {\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const ret = await ctx.save(async () => {\n    const ret = [];\n    for (const handle of handles) {\n      const childResult = await handle.result<string>();\n      ret.push(childResult);\n    }\n\n    return ret;\n  });\n\n  return ret;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In your typegraph, you will have:"}),"\n",(0,s.jsxs)(r.Ay,{children:[(0,s.jsx)(a.A,{value:"python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from typegraph import typegraph, t, Graph\nfrom typegraph.policy import Policy\nfrom typegraph.runtimes.substantial import SubstantialRuntime, WorkflowFile\nfrom typegraph.runtimes.substantial import Backend\n\n\n@typegraph()\ndef substantial_example(g: Graph):\n    pub = Policy.public()\n\n    backend = Backend.redis("REDIS_SECRET")\n    file = (\n        WorkflowFile.deno(file="my_workflow.ts", deps=["shared/types.ts"])\n        .import_(["sendEmail", "sendMultipleEmails"])\n        .build()\n    )\n\n    sub = SubstantialRuntime(backend, [file])\n\n    g.expose(\n        pub,\n        stop=sub.stop(),\n        send_multiple_emails=sub.start(t.struct({ "emails": t.list(t.email()) })).reduce(\n            { "name": "sendMultipleEmails"}\n        ),\n        send_single_email=sub.start(t.struct({"to": t.email()})).reduce(\n            {"name": "sendEmail"}\n        ),\n        results_raw=sub.query_results_raw(),\n        workers=sub.query_resources(),\n        **sub.internals(), # Required for child workflows\n    )\n\n'})})}),(0,s.jsx)(a.A,{value:"typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Policy, t, typegraph } from "@typegraph/sdk/index.ts";\nimport {\n  SubstantialRuntime,\n  Backend,\n  WorkflowFile,\n} from "@typegraph/sdk/runtimes/substantial.ts";\n\ntypegraph(\n  {\n    name: "substantial-example",\n  },\n  (g) => {\n    const pub = Policy.public();\n    const backend = Backend.redis("REDIS_SECRET");\n    const file = WorkflowFile.deno("my_workflow.ts", [])\n      .import(["sendEmail", "sendMultipleEmails"])\n      .build();\n\n    const sub = new SubstantialRuntime(backend, [file]);\n\n    g.expose(\n      {\n        stop: sub.stop(),\n        send_multiple_emails: sub\n          .start(t.struct({ emails: t.list(t.email()) }))\n          .reduce({ name: "sendMultipleEmails" }),\n        send_single_email: sub\n          .start(t.struct({ to: t.email() }))\n          .reduce({ name: "sendEmail" }),\n        results_raw: sub.queryResultsRaw(),\n        workers: sub.queryResources(),\n        ...sub.internals(), // Required for child workflows\n      },\n      pub\n    );\n  }\n);\n'})})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},65480:(e,n,t)=>{t.d(n,{Ay:()=>a,gc:()=>o});t(30758);var s=t(3733),i=t(56315),r=t(86070);function a(e){let{children:n}=e;const[t,a]=(0,s.e)();return(0,r.jsx)(i.mS,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,onChange:a,children:n})}function o(e){let{children:n}=e;const[t]=(0,s.e)();return(0,r.jsx)(i.q9,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,children:n})}}}]);