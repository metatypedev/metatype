"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3359],{27010:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var s=n(86070),i=n(25710);const r={},a="Requests",c={id:"reference/typegate/requests/index",title:"Requests",description:"Idempotency",source:"@site/docs/reference/typegate/requests/index.mdx",sourceDirName:"reference/typegate/requests",slug:"/reference/typegate/requests/",permalink:"/docs/reference/typegate/requests/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/docs/reference/typegate/requests/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Rate limiting",permalink:"/docs/reference/typegate/rate-limiting/"},next:{title:"Synchronization",permalink:"/docs/reference/typegate/synchronization/"}},o={},l=[{value:"Idempotency",id:"idempotency",level:2}];function d(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"requests",children:"Requests"}),"\n",(0,s.jsx)(t.h2,{id:"idempotency",children:"Idempotency"}),"\n",(0,s.jsx)(t.p,{children:"An idempotent request is a request that always returns the same result when retried with the same input.\nThis is useful to prevent duplicate operations, such as charging a customer twice if a network timeout or retry occurs."}),"\n",(0,s.jsxs)(t.p,{children:["You can enforce idempotency on any request to a typegraph, you just have to set the ",(0,s.jsx)(t.code,{children:"Idempotency-Key"})," header with a unique value (such as a UUID)."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-curl",children:'curl https://localhost:7890/awesome_typegraph \\\n  -X POST \\\n  -H "Authorization: Bearer ...." \\\n  -H "Content-Type: application/json" \\\n  -H "Idempotency-Key: 123abc" \\\n  -d \'{\n    "query": "mutation CreatePost($title: String!) { createPost(title: $title) { id title } }",\n    "variables": { "title": "My First Post" }\n  }\'\n'})}),"\n",(0,s.jsx)(t.admonition,{title:"Notes",type:"info",children:(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Keys expire happens after 24 hours."}),"\n",(0,s.jsxs)(t.li,{children:["A key must match the original request exactly during its lifetime.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Reusing the same key for different requests will result in error status 422."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"An empty string explicitly disables idempotency, it is a no-op."}),"\n",(0,s.jsx)(t.li,{children:"The maximum key length is 255 characters."}),"\n"]})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);