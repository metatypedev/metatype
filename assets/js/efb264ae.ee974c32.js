(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4834],{3418:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=t(86070),i=t(25710),s=t(93214);const a={},c="Injections",o={id:"reference/types/injections",title:"Injections",description:"Injection is a mechanism to get the value of a parameter from other sources than the graphql query.",source:"@site/docs/reference/types/injections.mdx",sourceDirName:"reference/types",slug:"/reference/types/injections",permalink:"/docs/reference/types/injections",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/types/injections.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Functions",permalink:"/docs/reference/types/functions"},next:{title:"Parameter Transformations",permalink:"/docs/reference/types/parameter-transformations"}},l={},d=[{value:"Static",id:"static",level:2},{value:"Parent",id:"parent",level:2},{value:"Context",id:"context",level:2},{value:"Secret",id:"secret",level:2},{value:"Dynamic",id:"dynamic",level:2},{value:"Example",id:"example",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"injections",children:"Injections"}),"\n",(0,r.jsxs)(n.p,{children:["Injection is a mechanism to get the value of a parameter from other sources than the graphql query.\nWhen a parameter is injected, no value is expected in the query, otherwise, the query will fail.\nThey are specified at the type level for input types that are direct children of a ",(0,r.jsx)(n.code,{children:"t.struct"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"static",children:"Static"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nStatic injection sets a static value to the parameter."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Method:"})," ",(0,r.jsx)(n.code,{children:".set(value)"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameter:"})," The value to be set, it must be compatible with the target type."]}),"\n",(0,r.jsx)(n.h2,{id:"parent",children:"Parent"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nParent injection gets the value output of a sibling field in the parent struct.\nIt adds a dependency to the sibling field, so make sure to prevent circular dependencies."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Method:"})," ",(0,r.jsx)(n.code,{children:".from_parent(type_name)"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameter:"})," The type name of the sibling field in the parent struct."]}),"\n",(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nContext injection gets the value from the request context that contains ",(0,r.jsx)(n.a,{href:"/docs/reference/typegate/authentication",children:"authentication data"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Method:"})," ",(0,r.jsx)(n.code,{children:".from_context(prop_name)"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameter:"})," The name or jsonpath of the property in the context."]}),"\n",(0,r.jsx)(n.h2,{id:"secret",children:"Secret"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nSecret injection gets the value from the ",(0,r.jsx)(n.a,{href:"/docs/reference/meta-cli/configuration-file#named-secrets",children:"secrets"}),"\ndefined when deploying the typegraph."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Method:"})," ",(0,r.jsx)(n.code,{children:".from_secret(secret_name)"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameter:"})," The name of the secret."]}),"\n",(0,r.jsx)(n.h2,{id:"dynamic",children:"Dynamic"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nDynamic injection gets the value from a predefined generator evaluated at runtime."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Method:"})," ",(0,r.jsx)(n.code,{children:".inject(generator_name)"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameter:"})," The name of the generator."]}),"\n",(0,r.jsx)(n.p,{children:"Available generators:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"now"}),": produces the current datetime as a valid ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",children:"ISO"}),"\nstring format.\nThis value depends on the configuration of the typegate host machine."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(s.A,{typegraph:"injection-example",python:t(70832),typescript:t(1430),disablePlayground:!0,query:{content:""}})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},70832:e=>{e.exports={content:'from typegraph import Policy, typegraph, t, Graph\nfrom typegraph.graph.params import Cors\nfrom typegraph.runtimes.deno import DenoRuntime\n\n\n@typegraph(\n)\ndef injection_example(g: Graph):\n  deno = DenoRuntime()\n  pub = Policy.public()\n\n  g.expose(\n    get_injected=deno.func(\n      t.struct(\n        {\n          "static_value": t.integer().set(12),\n          "context_value": t.uuid().from_context(\n            "profile.userId"\n          ),\n          "secret_value": t.string().from_secret(\n            "secret_name"\n          ),\n          "dynamic_value": t.datetime().inject("now"),\n        }\n      ).rename("Input"),\n      t.struct(\n        {\n          "static_value": t.integer().rename("Static"),\n          "context_value": t.uuid(),\n          "secret_value": t.string(),\n          "nested": deno.identity(\n            t.struct(\n              {\n                "parent_value": t.integer().from_parent(\n                  "Static"\n                )\n              }\n            ),\n          ),\n          "dynamic_value": t.datetime(),\n        }\n      ).rename("Output"),\n      code="""\n      ({ static_value, context_value, secret_value, dynamic_value }) => ({ static_value, context_value, secret_value, dynamic_value })\n      """,\n    ).with_policy(pub)\n  )',path:"examples/typegraphs/injections.py"}},1430:e=>{e.exports={content:'import { Policy, t, typegraph } from "@typegraph/sdk";\nimport { DenoRuntime } from "@typegraph/sdk/runtimes/deno.js";\n\ntypegraph(\n  {\n    name: "injection-example",\n  },\n  (g) => {\n    const deno = new DenoRuntime();\n    const pub = Policy.public();\n\n    g.expose({\n      get_injected: deno\n        .func(\n          t\n            .struct({\n              static_value: t.integer().set(12),\n              context_value: t.uuid().fromContext("profile.userId"),\n              secret_value: t.string().fromSecret("secret_name"),\n              dynamic_value: t.datetime().inject("now"),\n            })\n            .rename("Input"),\n          t\n            .struct({\n              static_value: t.integer().rename("Static"),\n              context_value: t.uuid(),\n              secret_value: t.string(),\n              nested: deno.identity(\n                t.struct({\n                  parent_value: t.integer().fromParent("Static"),\n                })\n              ),\n              dynamic_value: t.datetime(),\n            })\n            .rename("Output"),\n          {\n            code: ({\n              static_value,\n              context_value,\n              secret_value,\n              dynamic_value,\n            }) => ({\n              static_value,\n              context_value,\n              secret_value,\n              dynamic_value,\n            }),\n          }\n        )\n        .withPolicy(pub),\n    });\n  }\n);',path:"examples/typegraphs/injections.ts"}}}]);