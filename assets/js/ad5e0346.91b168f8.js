(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2877],{38353:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var i=n(11527),s=n(88672),a=n(31175),r=n(47550);const o={sidebar_position:2},l="Metatype basics",d={id:"tutorials/metatype-basics/index",title:"Metatype basics",description:"This page will give you an introduction to the 80% of the Metatype concepts you will need a daily basis.",source:"@site/docs/tutorials/metatype-basics/index.mdx",sourceDirName:"tutorials/metatype-basics",slug:"/tutorials/metatype-basics/",permalink:"/docs/tutorials/metatype-basics/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/tutorials/metatype-basics/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Quick start",permalink:"/docs/tutorials/quick-start/"},next:{title:"Build a feature roadmap API",permalink:"/docs/tutorials/building-feature-roadmap-api/"}},c={},h=[{value:"Zooming on the types",id:"zooming-on-the-types",level:2},{value:"The typegraph package",id:"the-typegraph-package",level:2},{value:"The meta CLI",id:"the-meta-cli",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"metatype-basics",children:"Metatype basics"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"This page will give you an introduction to the 80% of the Metatype concepts you will need a daily basis."})}),"\n",(0,i.jsx)(t.admonition,{title:"You will learn",type:"note",children:(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"how to start your first typegraph"}),"\n",(0,i.jsx)(t.li,{children:"how to model data with types"}),"\n",(0,i.jsx)(t.li,{children:"how to manipulate data with runtimes"}),"\n",(0,i.jsx)(t.li,{children:"how to secure data with policies"}),"\n",(0,i.jsx)(t.li,{children:"how to deploy on a typegate node"}),"\n"]})}),"\n",(0,i.jsx)(t.p,{children:"Before you jump into coding, a brief introduction. The typegraphs - virtual graphs of types - are the secret sauce of the ecosystem. They establish the foundation for all the abstraction that will be introduced later. Similar to programming languages, they let the developer describe with a type system:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"what"})," data types exists"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"how"})," these data get transformed"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"where"})," these data and transformations run"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"who"})," can access them"]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{title:"Looking first for some explanation?",type:"tip",children:(0,i.jsxs)(t.p,{children:["Head over to the ",(0,i.jsx)(t.a,{href:"/docs/concepts/mental-model",children:"mental model overview"})," to understand the components."]})}),"\n",(0,i.jsx)(t.h2,{id:"zooming-on-the-types",children:"Zooming on the types"}),"\n",(0,i.jsx)(t.p,{children:'There is no "object" or "primitive" type, only 4 main categories of types:'}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["value types: ",(0,i.jsx)(t.code,{children:"t.integer()"}),", ",(0,i.jsx)(t.code,{children:"t.string()"}),", ",(0,i.jsx)(t.code,{children:"t.uuid()"}),", etc."]}),"\n",(0,i.jsxs)(t.li,{children:["quantifier types: ",(0,i.jsx)(t.code,{children:"t.optional(\xb7)"}),", ",(0,i.jsx)(t.code,{children:"t.list(\xb7)"}),", etc."]}),"\n",(0,i.jsxs)(t.li,{children:["consolidator types: ",(0,i.jsx)(t.code,{children:"t.struct(\xb7, \xb7)"}),", ",(0,i.jsx)(t.code,{children:"t.union(\xb7, \xb7)"}),", etc."]}),"\n",(0,i.jsxs)(t.li,{children:["function types: ",(0,i.jsx)(t.code,{children:"t.func(\xb7 \u2192 \xb7)"}),", ",(0,i.jsx)(t.code,{children:"t.policy(\xb7 \u2192 \xb7)"}),", etc."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"You can combine them with each other to describe almost any data type you may need. The typegate enforces the data validation when data flows through it. Some syntactic sugar is available to make the type definition shorter:"}),"\n",(0,i.jsx)(a.Z,{language:"python",children:n(67749).content}),"\n",(0,i.jsx)(t.h2,{id:"the-typegraph-package",children:"The typegraph package"}),"\n",(0,i.jsx)(t.p,{children:"The typegraph package is a Python package that allows to describe a full typegraph. It's a thin wrapper around the type system, and provides a few helpers to make the typegraph definition easier. It builds on the type system to provide some more building blocks:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"what"})," data types exists \u2192 value, quantifier, consolidator ",(0,i.jsx)(t.strong,{children:"types"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"how"})," these data get transformed \u2192 function types and ",(0,i.jsx)(t.strong,{children:"materializers"})," that specify the transformation"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"where"})," these data and transformations run \u2192 ",(0,i.jsx)(t.strong,{children:"runtimes"})," that describe materializers operate"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"who"})," can access them \u2192 a special case of function types named ",(0,i.jsx)(t.strong,{children:"policies"})," that control accesses"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This tutorial will cover these abstractions concept by concept and show how to use them by example."}),"\n",(0,i.jsx)(t.admonition,{title:"Code sample are interactive",type:"info",children:(0,i.jsx)(t.p,{children:'You can interact with most of the typegraph in the documentation. Press command/ctrl + enter to submit the selected query or use the "play" button. Some parts might be voluntarily hidden and full source can be found by clicking on the link.'})}),"\n",(0,i.jsx)(t.p,{children:"A complete typegraph definition may look like the following:"}),"\n",(0,i.jsx)(r.Z,{typegraph:"first-typegraph",python:n(52583),typescript:n(59939),query:n(59375)}),"\n",(0,i.jsxs)(t.p,{children:["To start with the chat app design, copy the typegraph into the file named ",(0,i.jsx)(t.code,{children:"example.py"})," next to your ",(0,i.jsx)(t.code,{children:"compose.yml"})," file."]}),"\n",(0,i.jsx)(t.h2,{id:"the-meta-cli",children:"The meta CLI"}),"\n",(0,i.jsxs)(t.p,{children:["The meta CLI use a YAML configuration file to source some information and avoid typing the same arguments over and over again. Copy the following into named ",(0,i.jsx)(t.code,{children:"metatype.yml"})," also next to previous files:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'typegates:\n  dev:\n    url: "http://localhost:7890"\n    # default values\n    username: admin\n    password: password\ntypegraphs:\n  python:\n    include: "**/*.py"\n'})}),"\n",(0,i.jsx)(t.p,{children:"At this point, you should have everything ready for your first typegraph. Run the following command in your terminal:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"$ ls -1a\n./\n../\n.venv/\napi/\ncompose.yml\nmetatype.yml\npyproject.toml\n\n$ ls -1a api\n./\n../\nexample.py\n\n$ meta dev\nLoaded 1 typegraph from ./api/example.py:\n  \u2192 Pushing typegraph first-typegraph...\n  \u2713 Success!\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can now open ",(0,i.jsx)(t.a,{href:"http://localhost:7890/first-typegraph",children:"http://localhost:7890/first-typegraph"})," in your browser. The CLI will automatically watch for changes in the typegraph and reload the typegraph. You should see a GraphQL playground with a query editor and some auto-generated documentation clicking the top-left menu item. ",(0,i.jsx)(t.strong,{children:"Congrats"}),", you can now to play with your first typegraph!"]}),"\n",(0,i.jsx)("div",{className:"text-center",children:(0,i.jsx)("img",{src:n(521).Z,width:"600",alt:"typegate playground"})})]})}function m(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},73269:(e,t,n)=>{"use strict";n.d(t,{r:()=>s});n(50959);var i=n(11527);function s(e){let{name:t,choices:n,choice:s,onChange:a,className:r}=e;return(0,i.jsx)("ul",{className:`pl-0 m-0 list-none w-full ${r??""}`,children:Object.entries(n).map((e=>{let[n,r]=e;return(0,i.jsx)("li",{className:"inline-block rounded-md overflow-clip mr-1",children:(0,i.jsx)("div",{children:(0,i.jsxs)("label",{className:"cursor-pointer",children:[(0,i.jsx)("input",{type:"radio",name:t,value:n,checked:n===s,onChange:()=>a(n),className:"hidden peer"}),(0,i.jsx)("div",{className:"px-3 py-1 bg-slate-100 peer-checked:bg-metared peer-checked:text-white",children:r})]})})},n)}))})}},31572:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var i=n(50959),s=n(73327),a=n(54143),r=n(22),o=n(31175),l=n(82142),d=n(23843),c=n(11527);const h=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function p(e){const{queryEditor:t,variableEditor:n,headerEditor:s}=(0,d._i)({nonNull:!0}),[a,r]=(0,i.useState)(e.defaultTab),o=(0,d.Xd)({onCopyQuery:e.onCopyQuery}),l=(0,d.fE)();return(0,i.useEffect)((()=>{n&&h(n)}),[a,n]),(0,i.useEffect)((()=>{s&&h(s)}),[a,s]),(0,i.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("extraKeys",{"Alt-G":()=>{t.replaceSelection("@")}}),t.setOption("gutters",[]),t.on("change",h),h(t))}),[t]),(0,i.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("gutters",[]),n.on("change",h))}),[n]),(0,i.useEffect)((()=>{s&&(s.setOption("lineNumbers",!1),s.setOption("gutters",[]),s.on("change",h))}),[s]),(0,c.jsx)(d.u.Provider,{children:(0,c.jsxs)("div",{className:"graphiql-editors",children:[(0,c.jsx)("section",{className:"graphiql-query-editor shadow-sm","aria-label":"Query Editor",children:(0,c.jsxs)("div",{className:"graphiql-query-editor-wrapper",children:[(0,c.jsx)(d.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),(0,c.jsxs)("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands",children:[(0,c.jsx)(d._8,{}),(0,c.jsx)(d.wC,{onClick:()=>l(),label:"Prettify query (Shift-Ctrl-P)",children:(0,c.jsx)(d.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})}),(0,c.jsx)(d.wC,{onClick:()=>o(),label:"Copy query (Shift-Ctrl-C)",children:(0,c.jsx)(d.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"})})]})]})}),e.noTool?null:(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{className:"graphiql-editor-tools p-0 text-sm ",children:(0,c.jsxs)("div",{className:"graphiql-editor-tools-tabs",children:[(0,c.jsx)("div",{className:("variables"===a?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{r("variables"===a?"":"variables")},children:"Variables"}),(0,c.jsx)("div",{className:("headers"===a?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{r("headers"===a?"":"headers")},children:"Headers"})]})}),(0,c.jsxs)("section",{className:"graphiql-editor-tool "+(a&&a.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===a?"Variables":"Headers",children:[(0,c.jsx)(d.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==a,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),(0,c.jsx)(d.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==a,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})]})]})]})})}class m{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var u=n(73269);function g(){return(0,d.JB)({nonNull:!0}).isFetching?(0,c.jsx)(d.$j,{}):null}const y={typegraph:"Typegraph",playground:"Playground"};function x(e){let{typegraph:t,query:n,code:a,headers:h={},variables:x={},tab:f="",noTool:j=!1,defaultMode:v=null}=e;const{siteConfig:{customFields:{tgUrl:b}}}=(0,r.Z)(),w=(0,i.useMemo)((()=>new m),[]),k=(0,i.useMemo)((()=>(0,s.nq)({url:`${b}/${t}`})),[]),[N,T]=(0,i.useState)(v);return(0,c.jsxs)("div",{className:"@container miniql mb-5",children:[v?(0,c.jsx)(u.r,{name:"mode",choices:y,choice:N,onChange:T,className:"mb-2"}):null,(0,c.jsx)(d.j$,{fetcher:k,defaultQuery:n.loc?.source.body.trim(),defaultHeaders:JSON.stringify(h),shouldPersistHeaders:!0,variables:JSON.stringify(x),storage:w,children:(0,c.jsxs)("div",{className:(v?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first",children:[v&&"typegraph"!==N?null:a?.map((e=>(0,c.jsxs)("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0",children:[e?.codeFileUrl?(0,c.jsxs)("div",{className:"p-2 text-xs font-light",children:["See/edit full code on"," ",(0,c.jsx)(l.Z,{href:`https://github.com/metatypedev/metatype/blob/main/${e?.codeFileUrl}`,children:e?.codeFileUrl})]}):null,e?(0,c.jsx)(o.Z,{language:e?.codeLanguage,wrap:!0,className:"flex-1",children:e.content}):null]}))),v&&"playground"!==N?null:(0,c.jsxs)("div",{className:"flex flex-col graphiql-container",children:[(0,c.jsx)("div",{className:"flex-1 graphiql-session",children:(0,c.jsx)(p,{defaultTab:f,noTool:j})}),(0,c.jsxs)("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg",children:[(0,c.jsx)(g,{}),(0,c.jsx)(d.iB,{})]})]})]})})]})}function f(e){return(0,c.jsx)(a.Z,{fallback:(0,c.jsx)("div",{children:"Loading..."}),children:()=>(0,c.jsx)(x,{...e})})}},47550:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var i=n(31572),s=(n(50959),n(11527));function a(e){let{python:t,typescript:n,...a}=e;const r=[t&&{content:t.content,codeLanguage:"python",codeFileUrl:t.path},n&&{content:n.content,codeLanguage:"typescript",codeFileUrl:n.path}].filter((e=>!!e));return(0,s.jsx)(i.Z,{code:0==r.length?void 0:r,...a})}},59375:e=>{var t={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"get_message"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]}]}},{kind:"Field",alias:{kind:"Name",value:"second_one"},name:{kind:"Name",value:"get_message"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"user_id"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:106}};t.loc.source={body:"query {\n  get_message {\n    id\n    title\n    # user_id\n  }\n\n  second_one: get_message {\n    user_id\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function n(e,t){if("FragmentSpread"===e.kind)t.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&t.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){n(e,t)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){n(e,t)})),e.definitions&&e.definitions.forEach((function(e){n(e,t)}))}var i={};t.definitions.forEach((function(e){if(e.name){var t=new Set;n(e,t),i[e.name.value]=t}})),e.exports=t},521:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const i=n.p+"assets/images/playground-e2945136e370af514015f00940316a79.png"},52583:e=>{e.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.graph.params import Cors\nfrom typegraph.runtimes import RandomRuntime\n\n\n@typegraph(\n    allow_origin=["https://metatype.dev", "http://localhost:3000"]\n  ),\n)\ndef first_typegraph(g: Graph):\n  # declare runtimes and policies\n  random = RandomRuntime(reset=None)\n  public = Policy.public()\n\n  # declare types\n  message = t.struct(\n    {\n      "id": t.integer(),\n      "title": t.string(),\n      "user_id": t.integer(),\n    }\n  )\n\n  # expose them with policies\n  g.expose(\n    public,\n    # input \u2192 output via materializer\n    get_message=random.gen(message),\n  )',path:"examples/typegraphs/first-typegraph.py"}},59939:e=>{e.exports={content:'import { Policy, t, typegraph } from "@typegraph/sdk/index.js";\nimport { RandomRuntime } from "@typegraph/sdk/runtimes/random.js";\n\ntypegraph({\n  name: "first-typegraph",\n}, (g) => {\n  // declare runtimes and policies\n  const random = new RandomRuntime({});\n  const pub = Policy.public();\n\n  // declare types\n  const message = t.struct(\n    {\n      "id": t.integer(),\n      "title": t.string(),\n      "user_id": t.integer(),\n    },\n  );\n\n  // expose them with policies\n  g.expose({\n    // input \u2192 output via materializer\n    get_message: random.gen(message),\n  }, pub);\n});',path:"examples/typegraphs/first-typegraph.ts"}},67749:e=>{e.exports={content:'t.struct(\n  {\n    "name": t.string(max=200),\n    "age": t.optional(\n      t.integer()\n    ),  # or t.integer().optional()\n    "messages": t.list(\n      t.struct({"text": t.string(), "sentAt": t.datetime()})\n    ),\n  }\n)\n\n# the typegate will accept data as follow\n{\n  "name": "Alan",\n  "age": 28,\n  "messages": [\n    {"text": "Hello!", "sentAt": "2022-12-28T01:11:10Z"}\n  ],\n}\n\n# and reject invalid data\n{"name": "Turing", "messages": [{"sentAt": 1}]}',path:"examples/typegraphs/typecheck.py"}}}]);