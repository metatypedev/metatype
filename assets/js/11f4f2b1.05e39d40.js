"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3695],{52640:e=>{e.exports=JSON.parse('{"pluginId":"use-cases","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"useCases":[{"type":"link","label":"Instant APIs on your database","href":"/use-cases/automatic-crud-validation/","docId":"automatic-crud-validation/index","unlisted":false},{"type":"link","label":"Backend for frontend","href":"/use-cases/backend-for-frontend/","docId":"backend-for-frontend/index","unlisted":false},{"type":"link","label":"Cloud function runner","href":"/use-cases/faas-runner/","docId":"faas-runner/index","unlisted":false},{"type":"link","label":"Composable GraphQL server","href":"/use-cases/graphql-server/","docId":"graphql-server/index","unlisted":false},{"type":"link","label":"IAM gateway","href":"/use-cases/iam-provider/","docId":"iam-provider/index","unlisted":false},{"type":"link","label":"Microservices orchestration","href":"/use-cases/microservice-orchestration/","docId":"microservice-orchestration/index","unlisted":false},{"type":"link","label":"ORM for the edge","href":"/use-cases/orm-for-the-edge/","docId":"orm-for-the-edge/index","unlisted":false},{"type":"link","label":"Programmable API gateway","href":"/use-cases/programmable-api-gateway/","docId":"programmable-api-gateway/index","unlisted":false}]},"docs":{"automatic-crud-validation/index":{"id":"automatic-crud-validation/index","title":"Instant APIs on your database","description":"CRUD stands for Create, Read, Update, and Delete, which are the four basic functions of persistent storage in a software application. Those operations are commonly used in combination with data validation to ensure that the stored data is correct and consistent.","sidebar":"useCases"},"backend-for-frontend/index":{"id":"backend-for-frontend/index","title":"Backend for frontend","description":"Backend for frontend (BFF) is an architectural pattern in which each frontend client has a dedicated backend system. It enables client-specific customization of backend APIs with data transformations and optimizes requests by pre-fetching and caching data.","sidebar":"useCases"},"faas-runner/index":{"id":"faas-runner/index","title":"Cloud function runner","description":"A Function-as-a-Service (FaaS) runner is a platform that allows developers to deploy and run small, single-purpose functions in the cloud. FaaS runners typically provide a serverless architecture, which means that developers do not have to worry about infrastructure management or the scaling, as the platform automatically handles these tasks.","sidebar":"useCases"},"graphql-server/index":{"id":"graphql-server/index","title":"Composable GraphQL server","description":"GraphQL is a query language for APIs that was developed by Facebook in 2012 and open-sourced in 2015. It provides a more efficient, powerful, and flexible alternative to REST APIs by allowing clients to request only the data they need and enabling servers to expose a schema that defines the available data and operations.","sidebar":"useCases"},"iam-provider/index":{"id":"iam-provider/index","title":"IAM gateway","description":"An Identity and Access Management (IAM) gateway is a core component of the cloud computing ecosystems. It provide an efficient and secure way to manage authentification for user identities and their authorized privileges within a system.","sidebar":"useCases"},"microservice-orchestration/index":{"id":"microservice-orchestration/index","title":"Microservices orchestration","description":"Microservices and miniservices are architectural styles for developing applications by breaking them down into small, independent services that can be deployed and scaled independently. Each micro or mini service typically focuses on a specific business function or task, and communicates with other services through well-defined APIs.","sidebar":"useCases"},"orm-for-the-edge/index":{"id":"orm-for-the-edge/index","title":"ORM for the edge","description":"Edge computing platforms like Deno Deploy and Cloudflare Workers can provide a convenient and scalable way for developers to deploy their applications and APIs near the end-users, improving performance, reducing latency, and enhancing the user experience. Due to the resource constraints and compatibility issues (legacy libraries or specific drivers) of those environments, running a traditional Object-Relational Mapping (ORM) library might not be as easy as in normal deployments.","sidebar":"useCases"},"programmable-api-gateway/index":{"id":"programmable-api-gateway/index","title":"Programmable API gateway","description":"A programmable API gateway is an API gateway that provides a customizable framework for developers to create and deploy custom logic and policies for incoming requests and outgoing responses. Unlike traditional API gateways that provide a fixed set of features and policies, programmable API gateways offer a more flexible and extensible approach to managing APIs.","sidebar":"useCases"}}}')}}]);