(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4591],{4391:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>l,toc:()=>m});var i=t(86070),r=t(25710),o=t(65671),a=t(65480),s=t(27676);const d={},c="Random",l={id:"reference/runtimes/random/index",title:"Random",description:"Random runtime",source:"@site/docs/reference/runtimes/random/index.mdx",sourceDirName:"reference/runtimes/random",slug:"/reference/runtimes/random/",permalink:"/docs/reference/runtimes/random/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/docs/reference/runtimes/random/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Python",permalink:"/docs/reference/runtimes/python/"},next:{title:"S3",permalink:"/docs/reference/runtimes/s3/"}},u={},m=[{value:"Random runtime",id:"random-runtime",level:2},{value:"Generators",id:"generators",level:2}];function p(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"random",children:"Random"}),"\n",(0,i.jsx)(n.h2,{id:"random-runtime",children:"Random runtime"}),"\n",(0,i.jsxs)(n.p,{children:["The Random runtime allows you to produce ",(0,i.jsx)(n.em,{children:"structured"})," datas randomly."]}),"\n",(0,i.jsx)(n.p,{children:"One use case is to use this runtime as way of testing, for example you can rapidly draft a small backend that produces structured data for your frontend application."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"seed"})," parameter ensures repeatability if set."]}),"\n",(0,i.jsx)(o.A,{python:t(40433),typescript:t(59175),typegraph:"roadmap-random",query:t(4193)}),"\n",(0,i.jsx)(n.p,{children:"Another use case is to inject random values to a function input"}),"\n",(0,i.jsx)(o.A,{typegraph:"random-field",python:t(5539),typescript:t(30461),query:t(75562)}),"\n",(0,i.jsx)(n.h2,{id:"generators",children:"Generators"}),"\n",(0,i.jsxs)(n.p,{children:["Here is a list of some standard generators that you can attach to your type, if ",(0,i.jsx)(n.em,{children:"unspecifed"}),", it will default on generating any values that the associated type can hold."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Generator config"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"t.string()"})}),(0,i.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,i.jsx)(n.code,{children:"name"}),", ",(0,i.jsx)(n.code,{children:"address"}),", ",(0,i.jsx)(n.code,{children:"postcode"}),", ",(0,i.jsx)(n.code,{children:"country"}),", ",(0,i.jsx)(n.code,{children:"email"}),", ",(0,i.jsx)(n.code,{children:"uuid"}),", ",(0,i.jsx)(n.code,{children:"uri"}),", ",(0,i.jsx)(n.code,{children:"hostname"}),", ",(0,i.jsx)(n.code,{children:"date"}),", ",(0,i.jsx)(n.code,{children:"time"}),", ",(0,i.jsx)(n.code,{children:"phone"}),", ",(0,i.jsx)(n.code,{children:"ean"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"t.integer()"}),", ",(0,i.jsx)(n.code,{children:"t.float()"})]}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"age"})})]})]})]}),"\n",(0,i.jsxs)(a.Ay,{children:[(0,i.jsx)(s.A,{value:"python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'user = t.struct(\n    {\n        "id": t.uuid(),  # random uuid\n        "name": t.string(config={"gen": "name"}), # random name\n        "age": t.integer(config={"gen": "age", "type": "adult"}), # type: "child", "adult"\n        "email": t.email(),\n        "address": t.struct(\n            {\n                "street": t.string(config={"gen": "address"}),\n                "city": t.string(config={"gen": "city"}),\n                "postcode": t.string(config={"gen": "postcode"}),\n                "country": t.string(config={"gen": "country", "full": True}),\n            }\n        ),\n    }\n)\n'})})}),(0,i.jsx)(s.A,{value:"typescript",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const user = t.struct(\n    {\n        id: t.uuid(),  // random uuid\n        name: t.string({}, { config: { gen: "name" } }), // random name\n        age: t.integer({}, { config: { gen: "age", type: "adult" } }), // type: "child", "adult"\n        email: t.email(),\n        address: t.struct(\n            {\n                street: t.string({}, { config: { gen: "address" } }),\n                city: t.string({}, { config: { gen: "city" } }),\n                postcode: t.string({}, { config: { gen: "postcode"} }),\n                country: t.string({}, { config: { gen: "country", full: true } }),\n            }\n        ),\n    }\n)\n'})})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},65480:(e,n,t)=>{"use strict";t.d(n,{Ay:()=>a,gc:()=>s});t(30758);var i=t(3733),r=t(56315),o=t(86070);function a(e){let{children:n}=e;const[t,a]=(0,i.e)();return(0,o.jsx)(r.mS,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,onChange:a,children:n})}function s(e){let{children:n}=e;const[t]=(0,i.e)();return(0,o.jsx)(r.q9,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,children:n})}},75562:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"bonus1"},name:{kind:"Name",value:"get_bonus"},arguments:[{kind:"Argument",name:{kind:"Name",value:"performance"},value:{kind:"IntValue",value:"200"}}],directives:[]},{kind:"Field",alias:{kind:"Name",value:"bonus2"},name:{kind:"Name",value:"get_bonus"},arguments:[{kind:"Argument",name:{kind:"Name",value:"performance"},value:{kind:"IntValue",value:"27"}}],directives:[]}]}}],loc:{start:0,end:85}};n.loc.source={body:"query {\n  bonus1: get_bonus(performance: 200)\n  bonus2: get_bonus(performance: 27)\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n},4193:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"get_idea"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"authorEmail"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:61}};n.loc.source={body:"query {\n  get_idea {\n    id\n    # name\n    authorEmail\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n},5539:e=>{e.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.runtimes.deno import DenoRuntime\n\n\n\n@typegraph(\n)\ndef random_field(g: Graph):\n  deno = DenoRuntime()\n  pub = Policy.public()\n\n  bonus_items = t.list(t.enum(["+1 gold", "+1 metal"]))\n  daily_bonus = t.struct(\n    {\n      "performance": t.integer(),\n      "bonus": bonus_items.from_random(),  # this field is now generated randomly\n    }\n  )\n\n  # set a custom seed\n  g.configure_random_injection(seed=1234)\n\n  g.expose(\n    pub,\n    get_bonus=deno.func(\n      daily_bonus,\n      t.string(),\n      code="""({ performance, bonus }) => `Daily bonus: ${\n        (performance > 100 ? bonus : [\'none\']).join(\', \')\n      }`;\n      """,\n    ),\n  )',path:"../examples/typegraphs/random-field.py"}},30461:e=>{e.exports={content:'import { Policy, t, typegraph } from "@typegraph/sdk/index.ts";\nimport { DenoRuntime } from "@typegraph/sdk/runtimes/deno.ts";\n\ntypegraph(\n  {\n    name: "random-field",\n  },\n  (g) => {\n    const deno = new DenoRuntime();\n    const pub = Policy.public();\n\n    const bonusItems = t.list(t.enum_(["+1 gold", "+1 metal"]));\n    const dailyBonus = t.struct({\n      performance: t.integer(),\n      bonus: bonusItems.fromRandom(), // this field is now generated randomly\n    });\n\n    // set a custom seed\n    g.configureRandomInjection({ seed: 1234 });\n\n    g.expose(\n      {\n        get_bonus: deno.func(dailyBonus, t.string(), {\n          code: ({ performance, bonus }) =>\n            `Daily bonus: ${(performance > 100 ? bonus : ["none"]).join(", ")}`,\n        }),\n      },\n      pub\n    );\n  }\n);',path:"../examples/typegraphs/random-field.ts"}},40433:e=>{e.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.runtimes.random import RandomRuntime\n\n\n\n@typegraph(\n)\ndef roadmap(g: Graph):\n  idea = t.struct(\n    {\n      "id": t.uuid(\n        as_id=True\n      ),  # uuid is just a shorthand alias for `t.string({format: "uuid"})`\n      "name": t.string(),\n      "authorEmail": t.email(),  # another string shorthand\n    }\n  )\n  random = RandomRuntime(reset=None, seed=1)\n  pub = Policy.public()\n  g.expose(pub, get_idea=random.gen(idea))',path:"../examples/typegraphs/roadmap-random.py"}},59175:e=>{e.exports={content:'import { Policy, t, typegraph } from "@typegraph/sdk/index.ts";\nimport { RandomRuntime } from "@typegraph/sdk/runtimes/random.ts";\n\n\ntypegraph(\n  {\n    name: "roadmap-random",\n  },\n  (g) => {\n\n    const idea = t.struct({\n      id: t.uuid({ asId: true }), // uuid is just a shorthand alias for `t.string({}, {{format: "uuid"}: undefined})`\n      name: t.string(),\n      authorEmail: t.email(), // another string shorthand\n    });\n\n    const random = new RandomRuntime({ seed: 1 });\n    const pub = Policy.public();\n    g.expose({ get_idea: random.gen(idea) }, pub);\n  }\n);',path:"../examples/typegraphs/roadmap-random.ts"}}}]);