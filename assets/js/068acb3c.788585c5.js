(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[526],{3691:(e,n,t)=>{"use strict";t.d(n,{ZP:()=>r});var a=t(11527),i=t(88672);function s(e){const n={a:"a",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Metatype is an open platform for developers to ",(0,a.jsx)(n.strong,{children:"declaratively build APIs"}),". It offers a new approach to creating backends, where the developers focus on data modelling and delegate the implementation to the platform."]}),"\n",(0,a.jsx)(n.p,{children:"The intent is to address the following challenges:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"developers are often a bottleneck, and may spend less than 50% of their time on tasks that matter"}),"\n",(0,a.jsx)(n.li,{children:"most of the developments needs are similar, yet most of the systems are not interoperable"}),"\n",(0,a.jsx)(n.li,{children:"infrastructure management takes time and slows down the deployment velocity"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The platform is composed of the following components:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/docs/reference/typegraph",children:(0,a.jsx)(n.strong,{children:"Typegraph"})}),": a multi-language SDK to manage typegraphs - virtual graphs of types - and compose them"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/docs/reference/typegate",children:(0,a.jsx)(n.strong,{children:"Typegate"})}),": a serverless REST/GraphQL gateway to execute queries over typegraphs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/docs/reference/meta-cli",children:(0,a.jsx)(n.strong,{children:"Meta CLI"})}),": a command-line tool to offer a great developer experience and fast deployment"]}),"\n"]})]})}function r(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}},62977:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=t(11527),i=t(88672),s=t(60758),r=t(3691),l=t(47550);const o={},d="Programmable glue for developers",c={permalink:"/blog/2023/06/18/programmable-glue",editUrl:"https://github.com/metatypedev/metatype/tree/main/website/blog/2023-06-18-programmable-glue/index.mdx",source:"@site/blog/2023-06-18-programmable-glue/index.mdx",title:"Programmable glue for developers",description:"We are introducing Metatype, a new project that allows developers to build modular and strongly typed APIs using typegraph as a programmable glue.",date:"2023-06-18T00:00:00.000Z",formattedDate:"June 18, 2023",tags:[],readingTime:1.295,hasTruncateMarker:!1,authors:[],frontMatter:{},unlisted:!1,prevItem:{title:"Adding a typegraph SDK for Node",permalink:"/blog/2023/10/23/index"}},h={authorsImageUrls:[]},u=[{value:"What is Metatype?",id:"what-is-metatype",level:2},{value:"What are virtual graphs?",id:"what-are-virtual-graphs",level:2},{value:"Where does this belong in the tech landscape?",id:"where-does-this-belong-in-the-tech-landscape",level:2},{value:"Give it a try!",id:"give-it-a-try",level:2}];function p(e){const n={a:"a",admonition:"admonition",h2:"h2",p:"p",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"We are introducing Metatype, a new project that allows developers to build modular and strongly typed APIs using typegraph as a programmable glue."}),"\n",(0,a.jsx)(n.h2,{id:"what-is-metatype",children:"What is Metatype?"}),"\n",(0,a.jsx)(r.ZP,{}),"\n",(0,a.jsx)(n.h2,{id:"what-are-virtual-graphs",children:"What are virtual graphs?"}),"\n",(0,a.jsx)(n.p,{children:"Typegraphs are a declarative way to expose all APIs, storage and business logic of your stack as a single graph. They take inspiration from domain-driven design principles and in the idea that the relation between of the data is as important as data itself, even though they might be in different locations or shapes."}),"\n",(0,a.jsx)(l.Z,{python:t(94611),typescript:t(35648),typegraph:"homepage",variables:{email:"fill-me",message:"Great tool!"},defaultMode:"typegraph",query:t(29615)}),"\n",(0,a.jsx)(n.p,{children:"These elements can then be combined and composed together similarly on how you would compose web components to create an interface in modern frontend practices. This allows developers to build modular and strongly typed APIs using typegraph as a programmable glue."}),"\n",(0,a.jsx)(n.h2,{id:"where-does-this-belong-in-the-tech-landscape",children:"Where does this belong in the tech landscape?"}),"\n",(0,a.jsx)(n.p,{children:"Before Metatype, there was a gap in the technological landscape for a solution that specifically addressed the transactional, short-lived use cases. While there were existing tools for analytical or long-running use cases, such as Trino and Temporal, there was no generic engine for handling transactional, short-lived tasks."}),"\n",(0,a.jsx)(s.a,{}),"\n",(0,a.jsx)(n.h2,{id:"give-it-a-try",children:"Give it a try!"}),"\n",(0,a.jsxs)(n.p,{children:["Let us know what you think! Metatype is open source and we welcome any feedback or contributions. The community primarily lives on ",(0,a.jsx)(n.a,{href:"https://github.com/metatypedev/metatype",children:"GitHub"}),"."]}),"\n",(0,a.jsx)(n.admonition,{title:"Next steps",type:"info",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/docs/tutorials/metatype-basics",children:"Build your first typegraph"})," or read more about the ",(0,a.jsx)(n.a,{href:"/docs/concepts/mental-model",children:"concepts behind Metatype"}),"."]})})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},73269:(e,n,t)=>{"use strict";t.d(n,{r:()=>i});t(50959);var a=t(11527);function i(e){let{name:n,choices:t,choice:i,onChange:s,className:r}=e;return(0,a.jsx)("ul",{className:`pl-0 m-0 list-none w-full ${r??""}`,children:Object.entries(t).map((e=>{let[t,r]=e;return(0,a.jsx)("li",{className:"inline-block rounded-md overflow-clip mr-1",children:(0,a.jsx)("div",{children:(0,a.jsxs)("label",{className:"cursor-pointer",children:[(0,a.jsx)("input",{type:"radio",name:n,value:t,checked:t===i,onChange:()=>s(t),className:"hidden peer"}),(0,a.jsx)("div",{className:"px-3 py-1 bg-slate-100 peer-checked:bg-metared peer-checked:text-white",children:r})]})})},t)}))})}},60758:(e,n,t)=>{"use strict";t.d(n,{a:()=>i});t(50959);var a=t(11527);function i(){return(0,a.jsx)("div",{className:"flex justify-center mt-8 overflow-auto",children:(0,a.jsx)("table",{className:"table-fixed text-center",id:"landscape",children:(0,a.jsxs)("tbody",{children:[(0,a.jsxs)("tr",{className:"border-none",children:[(0,a.jsx)("td",{className:"border-none"}),(0,a.jsxs)("td",{children:[(0,a.jsx)("small",{children:"\u2190 individual level"}),(0,a.jsx)("br",{}),"transactional"]}),(0,a.jsxs)("td",{children:[(0,a.jsx)("small",{children:"large data \u2192"}),(0,a.jsx)("br",{}),"analytical"]})]}),(0,a.jsxs)("tr",{children:[(0,a.jsxs)("td",{children:[(0,a.jsx)("small",{children:"instantaneous \u2191"}),(0,a.jsx)("br",{}),"short-lived"]}),(0,a.jsxs)("td",{className:"bg-slate-100",children:[(0,a.jsx)("strong",{children:"Metatype"}),(0,a.jsx)("br",{}),(0,a.jsx)("small",{children:"query engine for data entities in evolving systems"})]}),(0,a.jsxs)("td",{children:["Trino",(0,a.jsx)("br",{}),(0,a.jsx)("small",{children:"query engine for large data from multiples sources"})]})]}),(0,a.jsxs)("tr",{children:[(0,a.jsxs)("td",{children:["long-running",(0,a.jsx)("br",{}),(0,a.jsx)("small",{children:"asynchronous \u2193"})]}),(0,a.jsxs)("td",{children:["Temporal",(0,a.jsx)("br",{}),(0,a.jsx)("small",{children:"workflow orchestration engine for data operations"})]}),(0,a.jsxs)("td",{children:["Spark",(0,a.jsx)("br",{}),(0,a.jsx)("small",{children:"batch/streaming engine for large data processing"})]})]})]})})})}},31572:(e,n,t)=>{"use strict";t.d(n,{Z:()=>b});var a=t(50959),i=t(73327),s=t(54143),r=t(22),l=t(31175),o=t(82142),d=t(23843),c=t(11527);const h=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function u(e){const{queryEditor:n,variableEditor:t,headerEditor:i}=(0,d._i)({nonNull:!0}),[s,r]=(0,a.useState)(e.defaultTab),l=(0,d.Xd)({onCopyQuery:e.onCopyQuery}),o=(0,d.fE)();return(0,a.useEffect)((()=>{t&&h(t)}),[s,t]),(0,a.useEffect)((()=>{i&&h(i)}),[s,i]),(0,a.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("extraKeys",{"Alt-G":()=>{n.replaceSelection("@")}}),n.setOption("gutters",[]),n.on("change",h),h(n))}),[n]),(0,a.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("gutters",[]),t.on("change",h))}),[t]),(0,a.useEffect)((()=>{i&&(i.setOption("lineNumbers",!1),i.setOption("gutters",[]),i.on("change",h))}),[i]),(0,c.jsx)(d.u.Provider,{children:(0,c.jsxs)("div",{className:"graphiql-editors",children:[(0,c.jsx)("section",{className:"graphiql-query-editor shadow-sm","aria-label":"Query Editor",children:(0,c.jsxs)("div",{className:"graphiql-query-editor-wrapper",children:[(0,c.jsx)(d.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),(0,c.jsxs)("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands",children:[(0,c.jsx)(d._8,{}),(0,c.jsx)(d.wC,{onClick:()=>o(),label:"Prettify query (Shift-Ctrl-P)",children:(0,c.jsx)(d.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})}),(0,c.jsx)(d.wC,{onClick:()=>l(),label:"Copy query (Shift-Ctrl-C)",children:(0,c.jsx)(d.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"})})]})]})}),e.noTool?null:(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{className:"graphiql-editor-tools p-0 text-sm ",children:(0,c.jsxs)("div",{className:"graphiql-editor-tools-tabs",children:[(0,c.jsx)("div",{className:("variables"===s?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{r("variables"===s?"":"variables")},children:"Variables"}),(0,c.jsx)("div",{className:("headers"===s?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{r("headers"===s?"":"headers")},children:"Headers"})]})}),(0,c.jsxs)("section",{className:"graphiql-editor-tool "+(s&&s.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===s?"Variables":"Headers",children:[(0,c.jsx)(d.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==s,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),(0,c.jsx)(d.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==s,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})]})]})]})})}class p{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,n){this.map.has(e)||(this.length+=1),this.map.set(e,n)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var m=t(73269);function g(){return(0,d.JB)({nonNull:!0}).isFetching?(0,c.jsx)(d.$j,{}):null}const f={typegraph:"Typegraph",playground:"Playground"};function y(e){let{typegraph:n,query:t,code:s,headers:h={},variables:y={},tab:b="",noTool:x=!1,defaultMode:v=null}=e;const{siteConfig:{customFields:{tgUrl:j}}}=(0,r.Z)(),k=(0,a.useMemo)((()=>new p),[]),w=(0,a.useMemo)((()=>(0,i.nq)({url:`${j}/${n}`})),[]),[N,S]=(0,a.useState)(v);return(0,c.jsxs)("div",{className:"@container miniql mb-5",children:[v?(0,c.jsx)(m.r,{name:"mode",choices:f,choice:N,onChange:S,className:"mb-2"}):null,(0,c.jsx)(d.j$,{fetcher:w,defaultQuery:t.loc?.source.body.trim(),defaultHeaders:JSON.stringify(h),shouldPersistHeaders:!0,variables:JSON.stringify(y),storage:k,children:(0,c.jsxs)("div",{className:(v?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first",children:[v&&"typegraph"!==N?null:s?.map((e=>(0,c.jsxs)("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0",children:[e?.codeFileUrl?(0,c.jsxs)("div",{className:"p-2 text-xs font-light",children:["See/edit full code on"," ",(0,c.jsx)(o.Z,{href:`https://github.com/metatypedev/metatype/blob/main/${e?.codeFileUrl}`,children:e?.codeFileUrl})]}):null,e?(0,c.jsx)(l.Z,{language:e?.codeLanguage,wrap:!0,className:"flex-1",children:e.content}):null]}))),v&&"playground"!==N?null:(0,c.jsxs)("div",{className:"flex flex-col graphiql-container",children:[(0,c.jsx)("div",{className:"flex-1 graphiql-session",children:(0,c.jsx)(u,{defaultTab:b,noTool:x})}),(0,c.jsxs)("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg",children:[(0,c.jsx)(g,{}),(0,c.jsx)(d.iB,{})]})]})]})})]})}function b(e){return(0,c.jsx)(s.Z,{fallback:(0,c.jsx)("div",{children:"Loading..."}),children:()=>(0,c.jsx)(y,{...e})})}},47550:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var a=t(31572),i=(t(50959),t(11527));function s(e){let{python:n,typescript:t,...s}=e;const r=[n&&{content:n.content,codeLanguage:"python",codeFileUrl:n.path},t&&{content:t.content,codeLanguage:"typescript",codeFileUrl:t.path}].filter((e=>!!e));return(0,i.jsx)(a.Z,{code:0==r.length?void 0:r,...s})}},29615:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"A"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"stargazers"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"login"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"user"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}}]}},{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"B"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"send_feedback"},arguments:[{kind:"Argument",name:{kind:"Name",value:"data"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"email"},value:{kind:"StringValue",value:"",block:!1}},{kind:"ObjectField",name:{kind:"Name",value:"message"},value:{kind:"StringValue",value:"I love X!",block:!1}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"message"},arguments:[],directives:[]}]}}]}},{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"C"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"list_feedback"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"email"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"message"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:309}};n.loc.source={body:'query A {\n  stargazers {\n    login\n    # composition\n    user {\n      name\n    }\n  }\n}\n\nmutation B {\n  send_feedback(\n    data: {\n      email: "" # fill me\n      message: "I love X!"\n    }\n  ) {\n    id\n    message\n  }\n}\n\nquery C {\n  list_feedback {\n    email # cannot be accessed, delete me\n    message\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&n.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var a={};function i(e,n){for(var t=0;t<e.definitions.length;t++){var a=e.definitions[t];if(a.name&&a.name.value==n)return a}}function s(e,n){var t={kind:e.kind,definitions:[i(e,n)]};e.hasOwnProperty("loc")&&(t.loc=e.loc);var s=a[n]||new Set,r=new Set,l=new Set;for(s.forEach((function(e){l.add(e)}));l.size>0;){var o=l;l=new Set,o.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){l.add(e)})))}))}return r.forEach((function(n){var a=i(e,n);a&&t.definitions.push(a)})),t}n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),a[e.name.value]=n}})),e.exports=n,e.exports.A=s(n,"A"),e.exports.B=s(n,"B"),e.exports.C=s(n,"C")},94611:e=>{e.exports={content:'@typegraph(\n)\ndef homepage(g: Graph):\n  # every field may be controlled by a policy\n  public = Policy.public()\n  meta_only = Policy.context("email", re.compile(".+@metatype.dev"))\n  public_write_only = Policy.on(create=public, read=meta_only)\n\n  # define runtimes where your queries are executed\n  github = HttpRuntime("https://api.github.com")\n  db = PrismaRuntime("demo", "POSTGRES_CONN")\n\n  # a feedback object stored in Postgres\n  feedback = t.struct(\n    {\n      "id": t.uuid(as_id=True, config=["auto"]),\n      "email": t.email().with_policy(public_write_only),\n      "message": t.string(min=1, max=2000),\n    },\n    name="feedback",\n  )\n\n  # a stargazer object from Github\n  stargazer = t.struct(\n    {\n      "login": t.string(name="login"),\n      # link with the feedback across runtimes\n      "user": github.get(\n        "/users/{user}",\n        t.struct({"user": t.string().from_parent("login")}),\n        t.struct({"name": t.string().optional()}),\n      ),\n    }\n  )\n\n  g.auth(Auth.oauth2_github("openid email"))\n\n  # expose part of the graph for queries\n  g.expose(\n    public,\n    stargazers=github.get(\n      "/repos/metatypedev/metatype/stargazers?per_page=2",\n      t.struct({}),\n      t.list(stargazer),\n    ),\n    # automatically generate crud operations\n    send_feedback=db.create(feedback),\n    list_feedback=db.find_many(feedback),\n  )',path:"examples/typegraphs/index.py"}},35648:e=>{e.exports={content:'typegraph({\n  name: "homepage",\n}, (g) => {\n  // every field may be controlled by a policy\n  const pub = Policy.public();\n  const metaOnly = Policy.context("email", /.+@metatype.dev/);\n  const publicWriteOnly = Policy.on({ create: pub, read: metaOnly });\n\n  // define runtimes where your queries are executed\n  const github = new HttpRuntime("https://api.github.com");\n  const db = new PrismaRuntime("demo", "POSTGRES_CONN");\n\n  // a feedback object stored in Postgres\n  const feedback = t.struct(\n    {\n      "id": t.uuid({ asId: true, config: { "auto": true } }),\n      "email": t.email().withPolicy(publicWriteOnly),\n      "message": t.string({ min: 1, max: 2000 }, {}),\n    },\n    { name: "feedback" },\n  );\n\n  // a stargazer object from Github\n  const stargazer = t.struct(\n    {\n      "login": t.string({}, { name: "login" }),\n      // link with the feedback across runtimes\n      "user": github.get(\n        t.struct({ "user": t.string().fromParent("login") }),\n        t.struct({ "name": t.string().optional() }),\n        { path: "/users/{user}" },\n      ),\n    },\n  );\n\n  g.auth(Auth.oauth2Github("openid email"));\n\n  // expose part of the graph for queries\n  g.expose({\n    stargazers: github.get(\n      t.struct({}),\n      t.list(stargazer),\n      { path: "/repos/metatypedev/metatype/stargazers?per_page=2" },\n    ),\n    // automatically generate crud operations\n    send_feedback: db.create(feedback),\n    list_feedback: db.findMany(feedback),\n  }, pub);\n});',path:"examples/typegraphs/index.ts"}}}]);