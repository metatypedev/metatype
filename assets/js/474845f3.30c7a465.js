(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5364],{47567:(n,e,t)=>{"use strict";t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var i=t(86070),r=t(25710),o=(t(69564),t(50695));const a={},s="Deno/typescript",c={id:"reference/runtimes/deno/index",title:"Deno/typescript",description:"Deno runtime",source:"@site/docs/reference/runtimes/deno/index.mdx",sourceDirName:"reference/runtimes/deno",slug:"/reference/runtimes/deno/",permalink:"/docs/reference/runtimes/deno/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/runtimes/deno/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Runtimes",permalink:"/docs/reference/runtimes/"},next:{title:"GraphQL",permalink:"/docs/reference/runtimes/graphql/"}},d={},p=[{value:"Deno runtime",id:"deno-runtime",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"denotypescript",children:"Deno/typescript"}),"\n","\n","\n",(0,i.jsx)(e.h2,{id:"deno-runtime",children:"Deno runtime"}),"\n",(0,i.jsx)(e.p,{children:"The DenoRuntime allows you to run lightweight and short-lived typescript function in a sandboxed environment. Permissions can be customized per typegraph and by default only include some HTTPs domains. It's a great way to implement custom logic and functions. All typegraphs can lazily spawn a web worker and get an incredible cold-start and continuous performance thanks to the V8 engine powering Deno."}),"\n",(0,i.jsx)(o.A,{typegraph:"deno",typescript:t(54140),python:t(14922),query:t(18447)}),"\n",(0,i.jsx)(e.p,{children:"Instead of providing the typescript code inline, we can also point to a file on disk:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# my_typegraph.py\n\nfrom typegraph import typegraph, Policy, t, Graph\nfrom typegraph.runtimes.deno import DenoRuntime\n\n@typegraph()\ndef deno(g: Graph):\n    public = Policy.public()\n    deno = DenoRuntime()\n\n    g.expose(\n        public,\n        add=deno.import_(\n            t.struct({"a": t.number(), "b": t.number()}),\n            t.number(),\n            module="main.ts", # path to ts file\n            name="doAddition", # function export from ts file to use\n        ),\n    )\n'})}),"\n",(0,i.jsx)(e.p,{children:"Where main.ts looks like:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"// main.ts\n\ninterface AddInput {\n  a: number;\n  b: number;\n}\nexport function doAddition({ a, b }: AddInput) {\n  return a + b;\n}\n"})})]})}function l(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},18447:n=>{var e={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"compute_fib"},arguments:[{kind:"Argument",name:{kind:"Name",value:"n"},value:{kind:"IntValue",value:"3"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"res"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"ms"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:51}};e.loc.source={body:"query {\n  compute_fib(n: 3) {\n    res\n    ms\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function t(n,e){if("FragmentSpread"===n.kind)e.add(n.name.value);else if("VariableDefinition"===n.kind){var i=n.type;"NamedType"===i.kind&&e.add(i.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){t(n,e)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){t(n,e)})),n.definitions&&n.definitions.forEach((function(n){t(n,e)}))}var i={};e.definitions.forEach((function(n){if(n.name){var e=new Set;t(n,e),i[n.name.value]=e}})),n.exports=e},14922:n=>{n.exports={content:'@typegraph(\n)\ndef deno(g: Graph):\n  deno = DenoRuntime()\n  public = Policy.public()\n\n  fib = deno.func(\n    t.struct({"n": t.float()}),\n    t.struct({"res": t.integer(), "ms": t.float()}),\n    code="""\n      ({ n }) => {\n        let a = 0, b = 1, c;\n        const start = performance.now();\n        for (\n          let i = 0;\n          i < Math.min(n, 10);\n          c = a + b, a = b, b = c, i += 1\n        );\n        return {\n          res: b,\n          ms: performance.now() - start,\n        };\n      }\n      """,\n  )\n\n  g.expose(\n    public,\n    compute_fib=fib,\n  )',path:"examples/typegraphs/deno.py"}},54140:n=>{n.exports={content:'await typegraph(\n  {\n    name: "deno",\n  },\n  (g) => {\n    const deno = new DenoRuntime();\n    const pub = Policy.public();\n\n    const fib = deno.func(\n      t.struct({ n: t.float() }),\n      t.struct({ res: t.integer(), ms: t.float() }),\n      {\n        code: `\n            ({ n }) => {\n                let a = 0, b = 1, c;\n                const start = performance.now();\n                for (\n                    let i = 0;\n                    i < Math.min(n, 10);\n                    c = a + b, a = b, b = c, i += 1\n                );\n                return {\n                    res: b,\n                    ms: performance.now() - start,\n                };\n            }\n        `,\n      }\n    );\n\n    g.expose(\n      {\n        compute_fib: fib,\n      },\n      pub\n    );\n  }\n);',path:"examples/typegraphs/deno.ts"}}}]);