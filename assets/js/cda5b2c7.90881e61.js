(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9742],{75431:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var i=t(86070),s=t(25710),r=t(65671);const a={},o="Microservices orchestration",c={id:"microservice-orchestration/index",title:"Microservices orchestration",description:"Microservices and miniservices are architectural styles for developing applications by breaking them down into small, independent services that can be deployed and scaled independently. Each micro or mini service typically focuses on a specific business function or task, and communicates with other services through well-defined APIs.",source:"@site/use-cases/microservice-orchestration/index.mdx",sourceDirName:"microservice-orchestration",slug:"/microservice-orchestration/",permalink:"/use-cases/microservice-orchestration/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/use-cases/microservice-orchestration/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"useCases",previous:{title:"IAM gateway",permalink:"/use-cases/iam-provider/"},next:{title:"ORM for the edge",permalink:"/use-cases/orm-for-the-edge/"}},d={},p=[{value:"Case study",id:"case-study",level:2},{value:"Metatype&#39;s solution",id:"metatypes-solution",level:2}];function h(e){const n={h1:"h1",h2:"h2",img:"img",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"microservices-orchestration",children:"Microservices orchestration"}),"\n",(0,i.jsx)(n.p,{children:"Microservices and miniservices are architectural styles for developing applications by breaking them down into small, independent services that can be deployed and scaled independently. Each micro or mini service typically focuses on a specific business function or task, and communicates with other services through well-defined APIs."}),"\n",(0,i.jsx)(n.h2,{id:"case-study",children:"Case study"}),"\n",(0,i.jsx)("div",{className:"text-center md:float-right p-8",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(48543).A+""})})}),"\n",(0,i.jsx)(n.p,{children:"Let's say your company develop a healthcare platform and that one of the microservices is responsible for handling patient records (owned by team A), and another microservice is responsible for handling appointment scheduling (owned by team B)."}),"\n",(0,i.jsx)(n.p,{children:"When a patient schedules an appointment, the appointment scheduling microservice needs access to the patient's records to ensure that the appointment is scheduled with the right provider and that the provider has the necessary information to provide effective care. However, since patient records contain sensitive information, it is important to ensure that only authorized users have access to them."}),"\n",(0,i.jsx)(n.p,{children:"To achieve this, the healthcare platform must use authentication and authorization on each API, which allows sharing only required information."}),"\n",(0,i.jsx)(n.h2,{id:"metatypes-solution",children:"Metatype's solution"}),"\n",(0,i.jsx)(n.p,{children:"Metatype can act as a central entry point for all incoming requests and responses between the microservices themselves and external clients. It is responsible for routing requests to the appropriate microservices and handling responses from those microservices, while verifying the authentication and authorization for each request."}),"\n",(0,i.jsx)(n.p,{children:"Additionally, Metatype gateway can provide other important features such as rate limiting, caching, and request/response transformations. It can even provide an API from another typegraph and delegate the query processing to it."}),"\n",(0,i.jsx)(r.A,{typegraph:"team-a",python:t(40702),typescript:t(93752),query:t(4269)})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65671:(e,n,t)=>{"use strict";t.d(n,{A:()=>r});var i=t(98302),s=(t(30758),t(86070));function r(e){let{python:n,typescript:t,...r}=e;const a=[n&&{content:n.content,codeLanguage:"python",codeFileUrl:n.path},t&&{content:t.content,codeLanguage:"typescript",codeFileUrl:t.path}].filter((e=>!!e));return(0,s.jsx)(i.A,{code:0==a.length?void 0:a,...r})}},4269:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"version_team_b"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"version_team_a"},arguments:[],directives:[]}]}}],loc:{start:0,end:45}};n.loc.source={body:"query {\n  version_team_b\n\n  version_team_a\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n},48543:(e,n,t)=>{"use strict";t.d(n,{A:()=>i});const i=t.p+"assets/images/image.drawio-bfa7a9325fe21576a24a097c2c28615c.svg"},40702:e=>{e.exports={content:'@typegraph(\n)\ndef team_a(g: Graph):\n  public = Policy.public()\n\n  deno = DenoRuntime()\n  records = GraphQLRuntime(environ.get("TG_URL", "http://localhost:7890") + "/team-b")\n\n  g.expose(\n    public,\n    version_team_b=records.query(t.struct({}), t.integer(), path=["version"]),\n    version_team_a=deno.static(t.integer(), 3),\n  )\n\n\n@typegraph(\n)\ndef team_b(g: Graph):\n  public = Policy.public()\n  deno = DenoRuntime()\n  g.expose(\n    public,\n    version=deno.static(t.integer(), 12),\n    record=deno.static(t.struct({"weight": t.integer()}), {"weight": 100}),\n  )',path:"../examples/typegraphs/microservice-orchestration.py"}},93752:e=>{e.exports={content:'await typegraph(\n  {\n    name: "team-a",\n  },\n  (g) => {\n    const pub = Policy.public();\n\n    const deno = new DenoRuntime();\n    const records = new GraphQLRuntime(\n      getEnvOrDefault("TG_URL", "http://localhost:7890" + "/team-b"),\n    );\n\n    g.expose(\n      {\n        version_team_b: records.query(t.struct({}), t.integer(), ["version"]),\n        version_team_a: deno.static(t.integer(), 3),\n      },\n      pub,\n    );\n  },\n);\n\nawait typegraph(\n  {\n    name: "team-b",\n  },\n  (g) => {\n    const pub = Policy.public();\n\n    const deno = new DenoRuntime();\n\n    g.expose(\n      {\n        version: deno.static(t.integer(), 12),\n        record: deno.static(t.struct({ weight: t.integer() }), { weight: 100 }),\n      },\n      pub,\n    );\n  },\n);',path:"../examples/typegraphs/microservice-orchestration.ts"}}}]);