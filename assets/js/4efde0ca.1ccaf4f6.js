"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2107],{72129:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var s=r(13274),i=r(99128);const o={},n="Importers",a={id:"reference/types/importers/index",title:"Importers",description:"Importers are quite recent and likely to evolve as feedback is received. Your voice and use cases matter a lot, let Metatype community know what suits you the best in this discussion.",source:"@site/docs/reference/types/importers/index.mdx",sourceDirName:"reference/types/importers",slug:"/reference/types/importers/",permalink:"/docs/reference/types/importers/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/types/importers/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Functions",permalink:"/docs/reference/types/functions"},next:{title:"Injections",permalink:"/docs/reference/types/injections"}},c={},p=[{value:"Google importers",id:"google-importers",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"importers",children:"Importers"}),"\n",(0,s.jsx)(t.admonition,{title:"Beta/unstable feature",type:"caution",children:(0,s.jsxs)(t.p,{children:["Importers are quite recent and likely to evolve as feedback is received. Your voice and use cases matter a lot, let Metatype community know what suits you the best in this ",(0,s.jsx)(t.a,{href:"https://github.com/metatypedev/metatype/discussions/104",children:"discussion"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"google-importers",children:"Google importers"}),"\n",(0,s.jsx)(t.p,{children:"The typegraph module comes with some handy importers to avoid having to rewrite manually all types and materializers. Currently, it supports importers for OpenAPI, GraphQL API and Google APIs."}),"\n",(0,s.jsxs)(t.p,{children:["Importers are function call with a boolean re-writing the source code file where they live. As they can generate quite long type definition, the best practice is to separate them into a dedicated file that can be imported into your main typegraph. Let's create ",(0,s.jsx)(t.code,{children:"google.py"})," and run ",(0,s.jsx)(t.code,{children:"python google.py"})," to generate the types."]}),"\n",(0,s.jsx)(t.p,{children:"This should generate code similar to this:"}),"\n",(0,s.jsx)(t.p,{children:"And can be imported/customized in your main typegraph file:"})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);