(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4902],{99848:(n,e,t)=>{"use strict";t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>p,metadata:()=>a,toc:()=>h});var o=t(86070),s=t(25710),r=(t(7871),t(65671));const p={},i="Python",a={id:"reference/runtimes/python/index",title:"Python",description:"Python Runtime",source:"@site/docs/reference/runtimes/python/index.mdx",sourceDirName:"reference/runtimes/python",slug:"/reference/runtimes/python/",permalink:"/docs/reference/runtimes/python/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/docs/reference/runtimes/python/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Prisma",permalink:"/docs/reference/runtimes/prisma/"},next:{title:"Random",permalink:"/docs/reference/runtimes/random/"}},l={},h=[{value:"Python Runtime",id:"python-runtime",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"python",children:"Python"}),"\n","\n",(0,o.jsx)(e.h2,{id:"python-runtime",children:"Python Runtime"}),"\n",(0,o.jsx)(e.p,{children:"The PythonRuntime allows you to run short-lived code on a Python virtual machine."}),"\n",(0,o.jsx)(r.A,{typegraph:"deno",typescript:t(47813),python:t(83323),disablePlayground:!0}),"\n",(0,o.jsx)(e.p,{children:"Where hello.py looks like:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# hello.py\n\ndef say_hello(x: any):\n    return f"Hello {x["name"]}"\n'})})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},83323:n=>{n.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.runtimes.python import PythonRuntime, PythonModule\n\n\n@typegraph()\ndef python(g: Graph):\n  public = Policy.public()\n  python = PythonRuntime()\n\n  g.expose(\n    public,\n    add=python.from_lambda(\n      t.struct({"a": t.integer(), "b": t.integer()}),\n      t.integer(),\n      # we can provide the code inline using lambdas\n      function=lambda x: x["a"] + x["b"],\n    ),\n    sayHello=python.import_(\n      t.struct({"name": t.string()}),\n      t.string(),\n      # point to a local python file\n      module="./scripts/hello.py",\n      name="say_hello",  # name of the function to use\n      # deps=["deps.py"], path to dependencies\n    ),\n  )\n\n  # We can also use the following method for reusability\n  module = PythonModule(path="./scripts/hello.py", deps=["./scripts/deps.py"])\n\n  g.expose(\n    public,\n    sayHelloAlt=python.import_(\n      t.struct({"name": t.string()}),\n      t.string(),\n      module=module.import_("say_hello"),  # name of the function to use\n    ),\n  )',path:"../examples/typegraphs/python.py"}},47813:n=>{n.exports={content:'await typegraph(\n  {\n    name: "python",\n  },\n  (g) => {\n    const python = new PythonRuntime();\n    const pub = Policy.public();\n\n    g.expose(\n      {\n        add: python.fromLambda(\n          t.struct({ a: t.integer(), b: t.integer() }),\n          t.integer(),\n          // we can provide the code inline using lambdas\n          { code: "lambda x: (x[\'a\'] + x[\'b\'])" },\n        ),\n        sayHello: python.import(\n          t.struct({ name: t.string() }),\n          t.string(),\n          // point to a local python file\n          {\n            module: "./scripts/hello.py",\n            name: "say_hello", // name of the function to use\n            // deps: ["deps.py"], path to dependencies\n          },\n        ),\n      },\n      pub,\n    );\n\n    // We can also use the following method for reusability\n    const mod = new PythonModule({\n      path: "./scripts/hello.py",\n      deps: ["./scripts/deps.py"],\n    });\n\n    g.expose(\n      {\n        sayHelloAlt: python.import(t.struct({ name: t.string() }), t.string(), {\n          module: mod.import("say_hello"), // name of the function to use\n        }),\n      },\n      pub,\n    );\n  },\n);',path:"../examples/typegraphs/python.ts"}}}]);