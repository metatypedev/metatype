"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3610],{13543:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var i=n(86070),s=n(25710);const o={},a="Python on WebAssembly: How?",r={permalink:"/blog/2024/08/26/python-on-webassembly",editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/blog/2024-08-26-python-on-webassembly/index.mdx",source:"@site/blog/2024-08-26-python-on-webassembly/index.mdx",title:"Python on WebAssembly: How?",description:"Metatype's different language runtimes are nice, but integrating one is an entire story. Let's discover how we managed to implement one for Python.",date:"2024-08-26T00:00:00.000Z",tags:[],readingTime:11.125,hasTruncateMarker:!1,authors:[],frontMatter:{},unlisted:!1,prevItem:{title:"Distributed execution flow paradigms",permalink:"/blog/2024/08/27/distributed-execution-flow-paradigms"},nextItem:{title:"Programmatic deployment (v0.4.x)",permalink:"/blog/2024/05/09/programmatic-deployment"}},l={authorsImageUrls:[]},h=[{value:"Why?",id:"why",level:2},{value:"What are the requirements?",id:"what-are-the-requirements",level:2},{value:"An aside on WASI",id:"an-aside-on-wasi",level:2},{value:"File system access",id:"file-system-access",level:3},{value:"WASI 0.2",id:"wasi-02",level:3},{value:"Cloudy skies?",id:"cloudy-skies",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Metatype's different language runtimes are nice, but integrating one is an entire story. Let's discover how we managed to implement one for Python."}),"\n",(0,i.jsx)(t.h2,{id:"why",children:"Why?"}),"\n",(0,i.jsx)(t.p,{children:'You have probably heard of "Function as a Service" or FaaS.\nIn simple terms, FaaS are platforms that allow users to run code in response to events without the hassle of managing the underlying infrastructure.\nUsers submit their programs and the platform takes care of the rest including, usually, scaling, availability, and configuration.\nAWS Lambda is one such example and FaaS as a whole are a popular implementation of the serverless model.'}),"\n",(0,i.jsxs)(t.p,{children:["Metatype has this model at heart with applications composed of small functions that respond to events like http requests and authorization checks.\nThis is achieved through runtimes like the ",(0,i.jsx)(t.a,{href:"/docs/reference/runtimes/deno",children:(0,i.jsx)(t.code,{children:"DenoRuntime"})})," which implements a way to execute functions authored in Typescript using Web Workers as implemented by ",(0,i.jsx)(t.a,{href:"https://docs.deno.com/runtime/manual/runtime/workers/",children:"Deno"})," (not based on Deno Deploy)."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["Metatype supports running multiple apps or typegraphs on a single deployed cluster but we're still in the kitchen on a hosted cloud solution.\nSubscribe to the ",(0,i.jsx)(t.a,{href:"https://metatype.dev/blog/rss.xml",children:"blog"})," or the ",(0,i.jsx)(t.a,{href:"https://github.com/metatypedev/metatype",children:"Github"})," repository for updates."]})}),"\n",(0,i.jsxs)(t.p,{children:["Implementing the ",(0,i.jsx)(t.code,{children:"DenoRuntime"})," was a very straightforward affair as the Typegate (the engine at the heart of Metatype) is primarily written in Typescript and runs on a slightly modified version of the Deno runtime.\nWhat's more, JavaScript has single threaded and asynchronous semantics and the v8 engine that it commonly runs on is of very high-quality by all regards.\nThese qualities lend themselves very well to the requirements of running a serverless platform like security (good sandboxing) and performance (low start-up latencies).\nThis fact is reflected in the dominance of JavaScript in the serverless market though it doesn't hurt that it's also the most popular language in use today."]}),"\n",(0,i.jsx)(t.p,{children:"Another very popular language is Python; and its standard library can be quite resourceful for this type of use case.\nHowever, as we shall see, integrating the Python runtime isn't as simple as integrating Deno."}),"\n",(0,i.jsx)(t.h2,{id:"what-are-the-requirements",children:"What are the requirements?"}),"\n",(0,i.jsx)(t.p,{children:"There are a number of Python runtimes available but a set of extra factors limit what we can achieve."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Security"}),": functions should have limited access to the execution environment. Python doesn't have built-in features for sandboxing out of the box unlike Deno."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Speed"}),": functions should run fast and with low latency. We're interested in metrics like cold-start latency and overhead of any cross process/system communication."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"User-friendliness"}),": functionalities provided in any of the languages supported by Metatype should, within reason, mirror each other and maintain a degree of uniformity. We support inline code snippets and external file references for ",(0,i.jsx)(t.code,{children:"DenoRuntime"})," and this should be the case for Python as well."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Interoperability"}),": functions running in Python will need to have access to other parts of the app running on the Typegate like being able to invoke other functions."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The Typegate is a TypeScript program with a bit of Rust sprinkled in.\nIt runs as a traditional POSIX process.\nThink Linux containers.\nThis fact renders multi-processing, one of the readily apparent approaches, undesirable as it would require investing is robust worker process management and distribution schemes.\nIt'd be great if we could keep everything inside the Typegate process."}),"\n",(0,i.jsxs)(t.p,{children:["One solution that presents itself here is the ",(0,i.jsx)(t.a,{href:"https://pyo3.rs/",children:"PyO3"})," project which provide Rust bindings to different Python runtimes like CPython and PyPy.\nIt'd not only allow us to run Python code in-process but it also provide an easy way to expose the functions written in Rust to Python and vice-versa.\nA good solution for the bidirectional communication needed for our interoperability requirements."]}),"\n",(0,i.jsx)(t.p,{children:"Unfortunately, PyO3 doesn't have any provisions for sandboxing which is critical for our use case.\nThis is where WebAssembly enters into the picture.\nWebAssembly or Wasm for short is a executable bytecode format that originates from the web world and is designed for applications that run inside web-browsers.\nThis use case shares most of our requirements and the Wasm world promises excellent sandboxing properties that should be perfect for our use case.\nWe just have to find a way to run Python inside of it."}),"\n",(0,i.jsx)(t.h2,{id:"an-aside-on-wasi",children:"An aside on WASI"}),"\n",(0,i.jsx)(t.p,{children:"WebAssembly System Interface (WASI) is an additional spec for the bytecode format that formalizes how Wasm programs access their host environment.\nA lot like POSIX, this generally means OS capabilities such as file system access and networking but also, in it's latest iteration extends to any custom host defined functionality."}),"\n",(0,i.jsxs)(t.p,{children:["Wasm + WASI fits very well to our use case. As opposed to mutli-processing, we can instantiate, manage, and expose resources programmatically with ease.\nAnd as luck would have it, some ",(0,i.jsx)(t.a,{href:"https://github.com/vmware-labs/webassembly-language-runtimes",children:"community work"})," has already been done at the time that led to wasm builds of CPython being available."]}),"\n",(0,i.jsxs)(t.p,{children:['Unfortunately, the WASI spec itself is a work in progress.\nWhen we started out, only the limited "',(0,i.jsx)(t.a,{href:"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md",children:"preview1"}),'" implementation was supported by most runtimes.\n',(0,i.jsx)(t.code,{children:"preview1"})," only focused on a standard set of host functionalities much like a ",(0,i.jsx)(t.code,{children:"libc"})," implementation.\nWell enough but any custom functionality meant having to rely on simple C ABI alike functions for ",(0,i.jsx)(t.em,{children:"intra"}),"-process communication.\nIn order to make this work easier, we elected to bring PyO3 back into the picture so that all the IPC stuff is written in Rust, the language with the most support in the Wasm ecosystem today."]}),"\n",(0,i.jsxs)(t.p,{children:["All in all, this would mean the python interpreter wrapped in a PyO3 based native API.\nAn assembly that accepts user code as strings and then invokes them in response to events.\nAll of this would be running inside a Wasm runtime, ",(0,i.jsx)(t.a,{href:"https://wasmedge.org/",children:"WasmEdge"})," in this case, which ticks of all of the sandboxing and security requirements.\nThis approach is well described as the ",(0,i.jsx)(t.a,{href:"https://wasmcloud.com/blog/webassembly-patterns-command-reactor-library#the-reactor-pattern",children:"Reactor pattern"}),", a common pattern used in Wasm land."]}),"\n",(0,i.jsx)("img",{src:"/images/wasi_vfs_python_and_rust.svg",alt:"FIRST SOLUTION"}),"\n",(0,i.jsx)(t.h3,{id:"file-system-access",children:"File system access"}),"\n",(0,i.jsxs)(t.p,{children:["Since the PyO3 project doesn't support ",(0,i.jsx)(t.a,{href:"https://github.com/PyO3/pyo3/issues/416",children:"statically linking"})," the Python runtime, we'll need to find a way dynamically link ",(0,i.jsx)(t.code,{children:"libpython"}),".\nThankfully, Wasm does support ",(0,i.jsx)(t.a,{href:"https://github.com/WebAssembly/design/blob/main/DynamicLinking.md",children:"dynamic linking"})," and wasm builds of ",(0,i.jsx)(t.a,{href:"https://github.com/vmware-labs/webassembly-language-runtimes/tree/main/python",children:(0,i.jsx)(t.code,{children:"libpython"})})," are available curtsy of the WebAssembly Language Runtimes project.\nBringing all of this together isn't as simple though as PyO3's tries to load ",(0,i.jsx)(t.code,{children:"libpython"})," from certain ",(0,i.jsx)(t.em,{children:"paths"}),", a concept that isn't exactly clearly defined in Wasm's post POSIX webtopia."]}),"\n",(0,i.jsxs)(t.p,{children:["Our first solution was to use ",(0,i.jsx)(t.a,{href:"https://github.com/kateinoigakukun/wasi-vfs",children:"wasi-vfs"}),", a tool which allows you to embed a virtual file system, accessible through preview1 APIs, directly into your wasm binaries.\nThis way, we could prepare a single wasm artifact that contains both the ",(0,i.jsx)(t.code,{children:"libpython"})," build and the custom glue code."]}),"\n",(0,i.jsxs)(t.p,{children:["This approach turned out to be quite hacky though and after encountering several issues, we ultimately decided to go with ",(0,i.jsx)(t.strong,{children:"preopens"}),".\nPreopens are another virtual file-system solution where you map an actual file-system directory to a virtual directory visible to a running Wasm instance.\nThis means we'll need to prepare the ",(0,i.jsx)(t.code,{children:"libpython"})," Wasm file on disk before running the instance but it was an acceptable solution.\nWe also use preopens to provide some of the user submitted code to our custom python runtime."]}),"\n",(0,i.jsx)(t.p,{children:"The following rust snippet demonstrates the preopens looked like in use:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'fn init_Python_vm() -> Result<Rt> {\n  let preopens = vec![\n    // User script will be uploaded at ./src/Python which is virtually seen as /app\n    // Each script has access only to /app\n    "/app:./src/Python:readonly".to_owned()\n  ];\n\n  // This follow the same idea as above, but for clarity\'s sake we decided to separate it\n  let pylib = PathBuf::from("./vendor/libpython/usr/local/lib");\n\n  // This is our wasm module reponsible for running Python scripts at runtime\n  // It assumes /app and libpython to be available in its world\n  let wasi_mod = PathBuf::from("./build/Python-wasi-reactor.wasm");\n\n  // Now we can instantiate the WASI module with all the configurations above\n  let rt = instantiate_custom_python_runtime(preopens, pylib, wasi_mod)?;\n  rt.run_func(None, "init_Python", params!())?;\n\n  // ..\n\n  Ok(rt)\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"wasi-02",children:"WASI 0.2"}),"\n",(0,i.jsxs)(t.p,{children:["The solution described above worked well to an extent but the limitations of preview1 and all the wrangling with PyO3 resulted in complexity that we were always ready to get rid of.\nThis was exactly what we did after the Bytecode Alliance finalized ",(0,i.jsx)(t.a,{href:"https://bytecodealliance.org/articles/WASI-0.2",children:"WASI 0.2"})," back in January 2024 and with it, a slew of new opportunuties."]}),"\n",(0,i.jsxs)(t.p,{children:["WASI 0.2 introduces a whole new concept of components, wasm modules that come with pre-specifed interfaces using the ",(0,i.jsx)(t.a,{href:"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md",children:"Wit"})," format and based on a whole new ",(0,i.jsx)(t.a,{href:"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md",children:"ABI"})," to boot.\nThese new capabilities suggest that it should possible to replace our PyO3 based glue code with the WASI based layer.\nLet's see how."]}),"\n",(0,i.jsxs)(t.p,{children:["We first used the new found WASI powers to implement support for Wasm based functions through the ",(0,i.jsx)(t.a,{href:"/docs/reference/runtimes/wasm",children:(0,i.jsx)(t.code,{children:"WasmRuntime"})}),".\nThis lead us to implement the ",(0,i.jsx)(t.a,{href:"https://github.com/metatypedev/metatype/blob/2e692b9ae9e48b6e1a863130fc1bfbdd004cb631/src/wit/wit-wire.wit",children:(0,i.jsx)(t.code,{children:"wit_wire"})})," protocol, a simple JSON based WIT interface that'd be used by any wasm component that intenteds to run on the ",(0,i.jsx)(t.code,{children:"WasmRuntime"}),".\nSimple enough that it's reproduced down below in it's entirety."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-wit",children:"package metatype:wit-wire;\n\n// what the host provides\ninterface typegate-wire {\n  hostcall: func(op-name: string, json: string) -> result<string, string>;\n}\n\n// what's expected from the guest\ninterface mat-wire {\n\n  // init function called when we first make the component\n  init: func(args: init-args) -> result<init-response, init-error>;\n  // general purpose event handler\n  handle: func(req: handle-req) -> result<json-str, handle-err>;\n\n  type json-str = string;\n\n  record init-args {\n    // the list of operations the application is expecting\n    // from this component\n    expected-ops: list<mat-info>\n    metatype-version: string,\n  }\n\n  record mat-info {\n    op-name: string,\n    mat-title: string,\n    mat-data-json: string,\n  }\n\n  record init-response {\n    ok: bool\n  }\n\n  variant init-error {\n    version-mismatch(string),\n    unexpected-mat(mat-info),\n    other(string)\n  }\n\n  record handle-req {\n    op-name: string,\n    in-json: json-str,\n  }\n\n  variant handle-err {\n    no-handler,\n    in-json-err(string),\n    handler-err(string),\n  }\n}\n\n// a world defines what interfaces get imported\n// and exported\nworld wit-wire {\n  import typegate-wire;\n\n  export mat-wire;\n}\n\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Squint your eyes tight enough and the ",(0,i.jsx)(t.code,{children:"wit_wire"})," protocol as implemented wasn't far off from what the PyO3 based glue code was doing in the previous implementation.\nSpecifically, register a list of operations that the Typegate is expecting from the module and execute them for incoming event.\nWe just need to add support for the operation metadata to contain extra items.\nIn the case of the ",(0,i.jsx)(t.a,{href:"/docs/reference/runtimes/python",children:(0,i.jsx)(t.code,{children:"PythonRuntime"})}),", this would be the Python code itself."]}),"\n",(0,i.jsxs)(t.p,{children:["Now that we have the ",(0,i.jsx)(t.code,{children:"wit_wire"})," implementation taking care of bidirectional communication, we have little reason to keep the PyO3 based glue code around.\nThis glue was doing a bit more than acting as a boundary though.\nIt was also responsible for setting up the operating environment for the Python code.\nFor example, we'd need some kind of initialization to execute the user's Python snippets which are in free standing ",(0,i.jsx)(t.code,{children:"lambda"})," form.\nHow does one create components out of Python anyways?"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://github.com/bytecodealliance/componentize-py",children:"componentize-py"})," is a tool authored by the Bytecode Alliance that allows you to produce WASI components that are authored in Python.\nIt has code generation suite that emits guest bindings in Python for any WIT specification you feed it.\nIt then takes your Python code written against these bindings and embeds them in a Wasm build of the Python interpreter to produce a component that supports the specified Wit."]}),"\n",(0,i.jsxs)(t.p,{children:["Unsurprisingly, componentize-py relies on PyO3 and preopens itself in addition to ",(0,i.jsx)(t.a,{href:"https://github.com/dicej/component-init",children:"component-init"}),", a solution to pre-intialize components up to a certain point for improved startup latencies.\nThis pre-intialization means we won't need to provide the actual preopens for the resulting component, baking the ",(0,i.jsx)(t.code,{children:"libpython"})," object code directly into it as PyO3 will have dynamically loaded the object code by that point.\nUltimately, this allows us to write all of our glue code in Python itself."]}),"\n",(0,i.jsxs)(t.p,{children:["We still need a bit of Rust to support the ",(0,i.jsx)(t.code,{children:"wit_wire"})," interface on the Typegate but this implementation is general across both the ",(0,i.jsx)(t.code,{children:"PythonRuntime"})," and ",(0,i.jsx)(t.code,{children:"WasmRuntime"}),".\nWe'd also moved to the ",(0,i.jsx)(t.a,{href:"https://wasmtime.dev/",children:"Wasmtime"}),", also by Bytecode Alliance, for our wasm workloads at this point and their Rust bindings are a pleasure to use.\nIt's all smooth sailing from here."]}),"\n",(0,i.jsx)(t.h2,{id:"cloudy-skies",children:"Cloudy skies?"}),"\n",(0,i.jsxs)(t.p,{children:["A final stumbling block for this approach was the many seconds Wasmtime spends cooking all your CPU cores when it compiles the fat wasm module that contains the Python interpreter, Pyo3 bindings and more.\nThis happens because Wasmtime does't (",(0,i.jsx)(t.a,{href:"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasmtime-baseline-compilation.md",children:"yet"}),") implement any schemes for tiered compilation, all code being greeted by their optimizing compiler, Cranelift.\nAnd optimizations take time.\nSure, you only pay this cost the first time you load the Python runtime module as Wasmtime has great support for caching including on-disk caching.\nBut, 10+ second cold-starts, as measured on one developer's machine, are unacceptable in a system that primarily serves HTTP requests.\nWhat to do?"]}),"\n",(0,i.jsxs)(t.p,{children:["Wasmtime has just the feature for this problem, ",(0,i.jsx)(t.a,{href:"https://docs.wasmtime.dev/cli-options.html#compile",children:"pre-compilation"}),".\nAhead-of-time compilation of wasm bytecode into a native instruction set.\nSuch files are commonly given the ",(0,i.jsx)(t.code,{children:".cwasm"})," extesion, ",(0,i.jsx)(t.em,{children:"c"})," for compiled, and they are not a standalone executable but inteded to be run within Wasmtime's sandbox.\nThis eliminates the compliation cost but the semantics of the source wasm bytecode and the runtime safe-guards means that this should be just as safe as JITting it (just-in-time compilation).\nWe then statically embed this pre-compiled wasm artifact, after compressing it, in the Typegate binary removing the need for sidecar files while ensuring minimal cold-starts for our python workloads.\nTo be concrete, this means ",(0,i.jsx)(t.em,{children:"roughly"})," around 200 ms of overhead for a cold function and 5 ms for a warm one.\nGood enough."]}),"\n",(0,i.jsxs)(t.p,{children:["This post describes the technical journey we took to arrive to the current implementation of the ",(0,i.jsx)(t.code,{children:"PythonRuntime"}),". Hopefully, all details were clear enough and please direct any feedback, questions, and thoughts to the comments down below and our Github issues/discussion board."]})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);