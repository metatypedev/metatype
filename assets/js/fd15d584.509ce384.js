"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4762],{55303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>g,frontMatter:()=>c,metadata:()=>d,toc:()=>u});var s=n(86070),a=n(25710),r=n(27676),o=n(65480),i=n(25459),p=n(9234);const c={},l="Test typegraphs",d={id:"guides/test-your-typegraph/index",title:"Test typegraphs",description:"Typegraph is the SDK for Metatype, used to author and define applications..",source:"@site/docs/guides/test-your-typegraph/index.mdx",sourceDirName:"guides/test-your-typegraph",slug:"/guides/test-your-typegraph/",permalink:"/docs/guides/test-your-typegraph/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/docs/guides/test-your-typegraph/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Programmatic deployment",permalink:"/docs/guides/programmatic-deployment/"},next:{title:"Types",permalink:"/docs/reference/types/"}},h={},u=[];function y(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"test-typegraphs",children:"Test typegraphs"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/docs/reference/typegraph",children:"Typegraph"})," is the SDK for ",(0,s.jsx)(t.em,{children:"Metatype"}),", used to author and define applications..\nTypegraphs can be easily tested using common test suites in your preferred programming language."]}),"\n",(0,s.jsxs)(t.p,{children:["The following next lines describe how you can test your typegraph.\nFor ",(0,s.jsx)(t.em,{children:"Typescript"})," SDK, we will be using ",(0,s.jsx)(t.a,{href:"https://vitest.dev/",children:"vitest"})," and ",(0,s.jsx)(t.a,{href:"https://docs.pytest.org/en/stable/",children:"pytest"})," for the ",(0,s.jsx)(t.em,{children:"Python"})," SDK in this example."]}),"\n",(0,s.jsxs)(o.Ay,{children:[(0,s.jsxs)(r.A,{value:"typescript",children:[(0,s.jsxs)(t.p,{children:["To test typegraphs in the ",(0,s.jsx)(t.em,{children:"typescript"})," SDK, you first need to add ",(0,s.jsx)(t.em,{children:"vitest"})," as a dev dependency to your metatype project."]}),(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["You can follow ",(0,s.jsx)(t.a,{href:"/docs/tutorials/quick-start",children:"this"})," link on how to bootstrap a metatype application."]})}),(0,s.jsxs)(t.p,{children:["To install ",(0,s.jsx)(t.em,{children:"vitest"}),", you can execute the command below in your terminal based on the runtime you are using for the project."]}),(0,s.jsxs)(p.A,{children:[(0,s.jsx)(r.A,{value:"pnpm",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"pnpm add -D vitest\n"})})}),(0,s.jsx)(r.A,{value:"npm",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm install -D vitest\n"})})}),(0,s.jsx)(r.A,{value:"yarn",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"yarn add -D vitest\n"})})}),(0,s.jsx)(r.A,{value:"deno",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'import { ... } from "npm:vitest";\n'})})}),(0,s.jsx)(r.A,{value:"bun",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"bun add -D vitest\n"})})}),(0,s.jsx)(r.A,{value:"jsr",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# vitest currently not in jsr registry\n"})})})]}),(0,s.jsxs)(t.p,{children:["After you have installed ",(0,s.jsx)(t.em,{children:"vitest"}),", your project is set up for some tests. Create a test ",(0,s.jsx)(t.code,{children:"tg.test.ts"})," in ",(0,s.jsx)(t.code,{children:"/tests"})," directory from the root project dir. ",(0,s.jsx)(t.em,{children:"vitest"})," discovers tests by file names, so ensure that your test names follow the following format below."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"**/*.test.ts\n**/*.spec.ts\n"})}),(0,s.jsxs)(t.p,{children:["For this example, the template typegraph generated from the ",(0,s.jsx)(t.code,{children:"meta new"})," command is used, which is the one down below."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'...\n\nexport const tg = typegraph("example", (g) => {\n  const pub = Policy.public();\n  const deno = new DenoRuntime();\n  const python = new PythonRuntime();\n\n  g.expose({\n    add: python\n      .fromLambda(\n        t.struct({ first: t.float(), second: t.float() }),\n        t.float(),\n        { code: "lambda x: x[\'first\'] + x[\'second\']" },\n      )\n      .withPolicy(pub),\n    multiply: deno\n      .func(t.struct({ first: t.float(), second: t.float() }), t.float(), {\n        code: "({first, second}) => first * second",\n      })\n      .withPolicy(pub),\n  });\n});\n'})}),(0,s.jsx)(t.p,{children:"For the typegraph test file, you can write these simple test cases to check the validity of your typegraphs."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { assert, assertType, expect, test } from "vitest";\nimport { BasicAuth, tgDeploy, DeployResult } from "@typegraph/sdk/tg_deploy";\n\ntest("checks if typegraph output is computed", async () => {\n  const tg_output = await tg;\n\n  assertType<TypegraphOutput>(tg_output);\n});\n\ntest("test if typegraph name is correct", async () => {\n  const tg_output = await tg;\n\n  assert(tg_output.name === "example", "typegraph name is correct");\n});\n\ntest("test if serialize function exists", async () => {\n  const tg_output = await tg;\n\n  assertType<Function>(typeof tg_output.serialize);\n});\n'})}),(0,s.jsx)(t.p,{children:"The above were simple tests you can execute against the output of the typegraph function. You can also do a serialization test to check if the typegraph is serialized successfully."}),(0,s.jsx)(t.p,{children:"To run the tests in watch mode, you can use the following command."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"vitest watch\n"})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'...\n\nlet reusableTgOutput;\n\ntest("test if typegraph serialization works", async () => {\n    const tg_output = await tg;\n    const params = {\n        typegraphPath: "api/example.mjs",\n        prefix: "",\n        artifactResolution: true,\n        codegen: false,\n        prismaMigration: {\n        migrationsDir: "prisma-migrations",\n        migrationActions: Object.entries({}),\n        defaultMigrationAction: {\n            apply: true,\n            create: false,\n            reset: false,\n        },\n        },\n        pretty: false,\n    };\n\n    const serialized = tg_output.serialize(params);\n\n    // cache the serialize result as the serialize function can only be called one time\n    reusableTgOutput = {\n        ...tg_output,\n        serialize: (params) => serialized,\n    };\n\n    assert(serialized !== null, "Serialization Successful");\n    assertType<TgFinalizationResult>(serialized);\n});\n'})}),(0,s.jsx)(t.p,{children:"Furthermore, you can test typegraph deployment and running a query against a typegate instance. You first test for typegraph deploy, then querying into a typegate instance. The following tests depict on how you can do that."}),(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"Make sure you have a typegate node running for the next tests to work."})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'...\n\nconst gate = "http://localhost:7891";\nconst typegraph_name = "example";\n\ntest("test typegraph deploy to typegate", async () => {\n\n    const auth = new BasicAuth("admin", "password");\n\n    const deploy_result = await tgDeploy(reusableTgOutput, {\n        typegate: {\n            url: gate,\n            auth: auth\n        },\n        typegraphPath: "api/example.mjs",\n        prefix: "",\n        secrets: {},\n        migrationsDir: "prisma-migrations",\n        migrationActions: {},\n        defaultMigrationAction: {\n            apply: false,\n            create: false,\n            reset: false\n        }\n    });\n\n    assertType<DeployResult>(deploy_result);\n\n    assert(deploy_result.serialized !== null);\n\n    expect(deploy_result.response).toMatchObject({\n        name: "example",\n        messages: [],\n        migrations: [],\n    });\n});\n\ntest("test defined endpoints from the typegraph", async () => {\n    const query = `\n        {\n            add(first: 17, second: 20)\n        }\n    `;\n\n    const url = `${gate}/${typegraph_name}`;\n    const response = await fetch(url, {\n        method: "POST",\n        headers: {\n            "Content-Type": "application/json",\n        },\n        body: JSON.stringify({query})\n    });\n\n    assert(response.ok);\n    expect(response.status).toBe(200);\n\n    const responseBody = await response.json();\n    const expectedResult = {data: {add: 37}};\n\n    assert.exists(responseBody);\n    expect(responseBody).toMatchObject(expectedResult)\n\n});\n\ntest("test typegraph undeployment", async () => {\n    const undeploy_result = await tgRemove(\n        "example",\n        {\n            typegate: {\n                auth: new BasicAuth("admin", "password"),\n                url: gate\n            }\n        }\n    );\n\n    expect(undeploy_result.typegate).toMatchObject(\n        { data: { removeTypegraphs: true } }\n    );\n});\n\n'})}),(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"It's recommended to setup an after and before test hooks to clean up any database changes. So make sure to include those keep the state before and after tests the same."})}),(0,s.jsx)(t.p,{children:"You don't have to stop here, you can test various outputs you get from running the typegraph function and querying directly into the deployed typegraphs. You can add more test cases to make your app robust."})]}),(0,s.jsxs)(r.A,{value:"python",children:[(0,s.jsxs)(t.p,{children:["First, you need to add ",(0,s.jsx)(t.em,{children:"pytest"})," as a dev dependency in your project/application."]}),(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["You can follow ",(0,s.jsx)(t.a,{href:"/docs/tutorials/quick-start",children:"this"})," link on how to bootstrap a metatype application."]})}),(0,s.jsxs)(i.A,{children:[(0,s.jsx)(r.A,{value:"pip",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"pip3 install pytest\n"})})}),(0,s.jsx)(r.A,{value:"poetry",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"poetry add --group dev pytest\n"})})})]}),(0,s.jsx)(t.p,{children:"After successful installation, you need to activate a python venv. In poetry, you can easily activate the virtual environment using the command below."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"poetry shell\n"})}),(0,s.jsxs)(t.p,{children:["Now, You can start writing tests for your typegraph. For convention, write the tests inside the ",(0,s.jsx)(t.code,{children:"tests"})," directory under the project's root dir."]}),(0,s.jsxs)(t.p,{children:["Assuming you have this simple typegraph definition, which is a template typegraph you can generate by using the ",(0,s.jsx)(t.code,{children:"meta new"})," commmand from the ",(0,s.jsx)(t.em,{children:"Meta CLI"}),"."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'...\n\n@typegraph()\ndef example(g: Graph):\n    public = Policy.public()\n    python = PythonRuntime()\n\n    hello = python.from_lambda(\n        t.struct({"world": t.string()}),\n        t.string(),\n        lambda x: f"Hello {x[\'world\']}!",\n    )\n\n    g.expose(public, hello=hello)\n\n'})}),(0,s.jsxs)(t.p,{children:["You can write the following test to check if your typegraph is correctly authored. Under ",(0,s.jsx)(t.code,{children:"/tests"})," dir, create an empty test and add the test code below. Make sure you name your test file appending ",(0,s.jsx)(t.code,{children:"_test"})," or prepending ",(0,s.jsx)(t.code,{children:"test_"})," so pytest can discover them."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from typegraph.wit import SerializeParams, PrismaMigrationConfig, MigrationAction\nfrom typegraph.graph.shared_types import FinalizationResult, BasicAuth, TypegraphOutput\nfrom typegraph.graph.tg_deploy import (\n    TypegraphDeployParams,\n    tg_deploy,\n    TypegateConnectionOptions,\n    DeployResult,\n)\nimport requests\n\n\n# running the typegraph gives a TypegraphOutput object\ntg_output = tg\n\nreusable_tg: TypegraphOutput = None\n\n\n# test if the tg output is correct,\ndef test_tg_name():\n    assert tg_output.name == "example"\n\n\ndef test_serialize_tg():\n    assert callable(tg_output.serialize)\n\n'})}),(0,s.jsx)(t.p,{children:"The above were simple tests you can execute against the output of the typegraph function. You can also do a serialization test to check if the typegraph is serialized successfully."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'...\n\n# check if the typegraph gets serialized\ndef test_serialize():\n    serialize_params = SerializeParams(\n        typegraph_path="demo.py",\n        prefix=None,\n        artifact_resolution=False,\n        codegen=True,\n        prisma_migration=PrismaMigrationConfig(\n            migrations_dir="prisma-migrations",\n            migration_actions=[],\n            default_migration_action=MigrationAction(\n                apply=False, create=False, reset=False\n            ),\n        ),\n        pretty=False,\n    )\n\n    serialize_func = tg_output.serialize\n    serialized_output = serialize_func(serialize_params)\n    global reusable_tg\n    reusable_tg = {\n        "name": tg_output.name,\n        "serialize": lambda params: serialized_output,\n    }\n\n    # cache the serialize result as the serialize function can only be called once\n    reusable_tg = TypegraphOutput(\n        name=tg_output.name, serialize=lambda params: serialized_output\n    )\n    assert isinstance(serialized_output, FinalizationResult)\n\n    assert serialized_output.tgJson is not None\n\n    assert isinstance(serialized_output.tgJson, str)\n\n'})}),(0,s.jsx)(t.p,{children:"Furthermore, you can test typegraph deployment and running a query against a typegate instance. You first test for typegraph deploy, then querying into a typegate instance. The following tests depict on how you can do that."}),(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"Make sure you have a typegate node running for the next tests to work."})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'...\n\ngate = "http://localhost:7891"\n\ndef test_deploy():\n    auth = BasicAuth("admin", "password")\n\n    deploy_result = tg_deploy(\n        reusable_tg,\n        TypegraphDeployParams(\n            typegate=TypegateConnectionOptions(url=gate, auth=auth),\n            typegraph_path="demo.py",\n            prefix="",\n            secrets=None,\n            migrations_dir="prisma-migrations",\n            migration_actions=None,\n            default_migration_action=MigrationAction(\n                apply=False, create=False, reset=False\n            ),\n        ),\n    )\n\n    assert isinstance(deploy_result, DeployResult)\n\n    assert deploy_result.serialized is not None\n\n    assert deploy_result.response == {\n        "name": "example",\n        "messages": [],\n        "migrations": [],\n    }\n\n\ndef test_endpoints():\n    query = """\n        {\n            hello(world: "Estub")\n        }\n    """\n\n    response = requests.post(url=f"{gate}/example", json={"query": query})\n\n    assert response.status_code == 200\n\n    result = {"data": {"hello": "Hellow Estub!"}}\n\n    assert response.json() == result\n\n\ndef test_undeploy():\n    # provide typegraph name and TypegateConnectionOptions\n    tg_name = "example"\n    typegate_conn = TypegateConnectionOptions(\n        auth=BasicAuth("admin", "password"), url=gate\n    )\n\n    result = tg_remove(\n        typegraph_name=tg_name, params=TypegraphRemoveParams(typegate=typegate_conn)\n    )\n\n    expected_result = RemoveResult(typegate={\'data\': {\'removeTypegraphs\': True}})\n\n    assert result == expected_result\n\n'})}),(0,s.jsxs)(t.p,{children:["Running the typegraph function, results in a ",(0,s.jsx)(t.a,{href:"https://github.com/metatypedev/metatype/blob/8cc1c129b0f858047eda8557c1bc120873d37aca/typegraph/python/typegraph/graph/shared_types.py#L18",children:"TypegraphOutput"})," object which you can play around to add more checks to your tests."]}),(0,s.jsxs)(t.p,{children:["After you have written your tests, you can run them all by executing the ",(0,s.jsx)(t.code,{children:"pytest"})," command from your terminal."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"pytest\n"})}),(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"It's recommended to setup an after and before test hooks to clean up any database changes. So make sure to include those keep the state before and after tests the same."})}),(0,s.jsx)(t.p,{children:"You don't have to stop here, you can test various outputs you get from running the typegraph function and querying directly into the deployed typegraphs. You can add more test cases to make your app robust."}),(0,s.jsxs)(t.p,{children:["While ",(0,s.jsx)(t.code,{children:"pytest"})," is used in this example, typegraphs can be easily tested with most other test suite solutions by following the above approach."]})]})]})]})}function g(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(y,{...e})}):y(e)}},25459:(e,t,n)=>{n.d(t,{A:()=>o});n(30758);var s=n(54133),a=n(56315),r=n(86070);function o(e){let{children:t}=e;const[n,o]=(0,s.d)();return(0,r.jsx)(a.mS,{choices:{poetry:"poetry",pip:"pip"},choice:n,onChange:o,children:t})}},65480:(e,t,n)=>{n.d(t,{Ay:()=>o,gc:()=>i});n(30758);var s=n(3733),a=n(56315),r=n(86070);function o(e){let{children:t}=e;const[n,o]=(0,s.e)();return(0,r.jsx)(a.mS,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:n,onChange:o,children:t})}function i(e){let{children:t}=e;const[n]=(0,s.e)();return(0,r.jsx)(a.q9,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:n,children:t})}},9234:(e,t,n)=>{n.d(t,{A:()=>o});n(30758);var s=n(54133),a=n(56315),r=n(86070);function o(e){let{children:t}=e;const[n,o]=(0,s.a)();return(0,r.jsx)(a.mS,{choices:{pnpm:"pnpm",npm:"npm",jsr:"jsr",deno:"deno",yarn:"yarn",bun:"bun"},choice:n,onChange:o,children:t})}},54133:(e,t,n)=>{n.d(t,{a:()=>g,d:()=>m});var s=n(62104),a=n(12452),r=n(58346),o=n(40006),i=n(30758);const p="tsPackageManager",c="pythonPackageManager",l=(0,r.N)(),d=(0,s.eU)((e=>e(l).searchParams?.get(p)),((e,t,n)=>{const s=e(l).searchParams??new URLSearchParams;s.set(p,n),t(l,(e=>({...e,searchParams:s})))})),h=(0,s.eU)((e=>e(l).searchParams?.get(c)),((e,t,n)=>{const s=e(l).searchParams??new URLSearchParams;s.set(c,n),t(l,(e=>({...e,searchParams:s})))})),u=(0,o.tG)(p,"npm",(0,o.KU)((()=>sessionStorage))),y=(0,o.tG)(c,"poetry",(0,o.KU)((()=>sessionStorage)));function g(){const[e,t]=(0,a.fp)(d),[n,s]=(0,a.fp)(u);(0,i.useEffect)((()=>{e&&e!==n&&s(e)}),[e,s]);const r=(0,i.useCallback)((e=>{t(e),s(e)}),[t,s]);return[e??n,r]}function m(){const[e,t]=(0,a.fp)(h),[n,s]=(0,a.fp)(y);(0,i.useEffect)((()=>{e&&e!==n&&s(e)}),[e,s]);const r=(0,i.useCallback)((e=>{t(e),s(e)}),[t,s]);return[e??n,r]}}}]);