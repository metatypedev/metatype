(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4404],{39700:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(86070),a=t(25710),o=t(50695);const r={sidebar_position:50},s="Custom functions",c={id:"guides/external-functions/index",title:"Custom functions",description:"Custom functions can be used to run custom code at different points of a typegraph. These constructs fall under functions which are, concretly, operations associated to a specific runtime. For some common tasks, like simple operations on database tables for example, runtime implementations provide function generators to minimize boilerplate. For cases not expressible by generators, runtimes like the DenoRuntime allow us to write more powerful custom functions.",source:"@site/docs/guides/external-functions/index.mdx",sourceDirName:"guides/external-functions",slug:"/guides/external-functions/",permalink:"/docs/guides/external-functions/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/guides/external-functions/index.mdx",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"docs",previous:{title:"Metatype Basics",permalink:"/docs/tutorials/metatype-basics/"},next:{title:"Upload files to cloud storage",permalink:"/docs/guides/files-upload/"}},d={},l=[{value:"Accessing function context",id:"accessing-function-context",level:2},{value:"Accessing the typegraph",id:"accessing-the-typegraph",level:2},{value:"Generating types",id:"generating-types",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"custom-functions",children:"Custom functions"}),"\n",(0,i.jsxs)(n.p,{children:["Custom functions can be used to run custom code at different points of a typegraph. These constructs fall under ",(0,i.jsx)(n.a,{href:"/docs/concepts/mental-model#functions",children:"functions"})," which are, concretly, operations associated to a specific runtime. For some common tasks, like simple operations on database tables for example, runtime implementations provide function ",(0,i.jsx)(n.a,{href:"/docs/reference/runtimes/prisma#generators",children:"generators"})," to minimize boilerplate. For cases not expressible by generators, runtimes like the ",(0,i.jsx)(n.code,{children:"DenoRuntime"})," allow us to write more powerful custom functions."]}),"\n",(0,i.jsx)(n.p,{children:"Custom functions are commonly used for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Specialized business logic to respond directly to incoming requests"}),"\n",(0,i.jsx)(n.li,{children:"Authentication policy logic"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The following example uses the ",(0,i.jsx)(n.code,{children:"DenoRuntime"})," to respond to requests and define a policy."]}),"\n",(0,i.jsx)(o.A,{typegraph:"math",typescript:t(37770),python:t(42252),query:t(47008)}),"\n",(0,i.jsxs)(n.p,{children:["Note that for the ",(0,i.jsx)(n.code,{children:"fib"})," root function, we're using a typescript module in an external file. Here's what ",(0,i.jsx)(n.code,{children:"scripts/fib.ts"})," looks like:"]}),"\n",(0,i.jsx)(o.A,{typescript:t(71920),disablePlayground:!0}),"\n",(0,i.jsx)(n.p,{children:"The following runtimes can be used to run custom functions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/reference/runtimes/deno/",children:(0,i.jsx)(n.code,{children:"DenoRuntime"})})," through typescript code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/reference/runtimes/python/",children:(0,i.jsx)(n.code,{children:"PythonRuntime"})})," through python code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/reference/runtimes/wasm/",children:(0,i.jsx)(n.code,{children:"WasmRuntime"})})," through wasm modules."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/reference/runtimes/prisma/",children:(0,i.jsx)(n.code,{children:"PrismaRuntime"})})," throw raw SQL queries."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"accessing-function-context",children:"Accessing function context"}),"\n",(0,i.jsx)(n.admonition,{title:"Beta",type:"warning",children:(0,i.jsxs)(n.p,{children:["The following feature is currently only implemented for the ",(0,i.jsx)(n.code,{children:"DenoRuntime"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"On some runtimes, custom functions are passed to the context object along with the function inputs. This object provides access to all kinds of information about the context in which the function is running. The following example illustrates availaible fields:"}),"\n",(0,i.jsx)(o.A,{typegraph:"func-ctx",typescript:t(43974),python:t(13376),query:t(99359)}),"\n",(0,i.jsxs)(n.p,{children:["Note, the typescript version of the sample uses a closure instead of a string snippet to define the function. This is a simple syntax sugar availaible when using ",(0,i.jsx)(n.code,{children:"DenoRuntime"})," through the typescript sdk or the ",(0,i.jsx)(n.code,{children:"PythonRuntime"})," the python one. Consult the reference for each runtime to look at what's availaible."]}),"\n",(0,i.jsx)(n.h2,{id:"accessing-the-typegraph",children:"Accessing the typegraph"}),"\n",(0,i.jsx)(n.admonition,{title:"Beta",type:"warning",children:(0,i.jsxs)(n.p,{children:["The following feature is currently only implemented for the ",(0,i.jsx)(n.code,{children:"DenoRuntime"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["To do anything meaningful with custom functions, you'll want to access the rest of functionality implemented on your typegraph. The primary way of doing this is by sending GraphqQl queries from within your function. On the ",(0,i.jsx)(n.code,{children:"DenoRuntime"}),", to make this easier, there's a ",(0,i.jsx)(n.code,{children:"gql"})," object passed to all functions. The following exapmle illustrates how it functions:"]}),"\n",(0,i.jsx)(o.A,{typegraph:"func-gql",typescript:t(83683),python:t(43685),query:t(33204)}),"\n",(0,i.jsxs)(n.p,{children:["And ",(0,i.jsx)(n.code,{children:"scripts/createVote.ts"})," looks like:"]}),"\n",(0,i.jsx)(o.A,{typescript:t(36185),disablePlayground:!0}),"\n",(0,i.jsx)(n.h2,{id:"generating-types",children:"Generating types"}),"\n",(0,i.jsx)(n.admonition,{title:"Beta",type:"warning",children:(0,i.jsx)(n.p,{children:"The following feature is not yet stable."})}),"\n",(0,i.jsxs)(n.p,{children:["Custom functions can be made smoother to develop or more robust to changes by using the ",(0,i.jsx)(n.a,{href:"/docs/reference/metagen",children:"metagen"})," to generate code for them. By using the generated types along with static analysis tools in your workflow, this allows you to avoid many cases of drift between your custom functions and your typegraph. Not to mention improving the development experience of writing custom functions. The code generated for Python and Rust targets also includes the serialization boilerplate and utilities that you'd need for those to even get started in those languages."]}),"\n",(0,i.jsxs)(n.p,{children:["The metagen library is availaible within the ",(0,i.jsx)(n.a,{href:"/docs/reference/meta-cli",children:"meta CLI"})," or the ",(0,i.jsx)(n.a,{href:"/docs/reference/typegraph#sdks",children:"typegraph SDK"}),". In the following example we'll use the CLI to generate typescript code for a simple typegraph."]}),"\n",(0,i.jsx)(o.A,{typegraph:"metagen-deno",typescript:t(76140),python:t(60218),query:t(60587)}),"\n",(0,i.jsxs)(n.p,{children:["We'll need to configure metagen through the ",(0,i.jsx)(n.code,{children:"metatype.yaml"})," file. We add a new target to the metagen section that does what we need."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"metagen:\n  targets:\n    # named targets to configure a bunch of generators together\n    metagen_deno:\n      - generator: mdk_typescript # generator to use\n        # path to generate to\n        path: ./metagen/ts/\n        # point to the typegraph location\n        # or name of typegraph on a typegate somehwere\n        typegraph_path: ./metagen-deno.ts\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can configure multiple target in our config file. Each target can have mutiple generator configurations. Metagen currently ",(0,i.jsx)(n.a,{href:"/docs/reference/metagen",children:"implements"})," for the Typescript, Python and Rust targets."]}),"\n",(0,i.jsx)(n.p,{children:"We can then invoke the target using the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"meta gen metagen_deno\n"})}),"\n",(0,i.jsx)(n.p,{children:"This results in the following files."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"\u276f lsd --tree metagen\n\uf115 metagen\n\u2514\u2500\u2500 \ue628 ts\n    \u2514\u2500\u2500 \ue628 mdk.ts\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Within ",(0,i.jsx)(n.code,{children:"mdk.ts"})," and the types and helpers, all the types from your typegraph should be there. Something like:"]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Code generation sample. Collapsed for aesthetic reasons."}),(0,i.jsx)(o.A,{typescript:t(54742),disablePlayground:!0})]}),"\n",(0,i.jsxs)(n.p,{children:["Note, this also include typescript function types for specific typegraph functions. By default, the ",(0,i.jsx)(n.code,{children:"mdk_typescript"})," generator will only include stub function types for those defined on the ",(0,i.jsx)(n.code,{children:"DenoRuntime"})," but this is ",(0,i.jsx)(n.a,{href:"/docs/reference/metagen#mdk_typescript",children:"configurable"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["We can then use these types in the following manner. Add the following snippet into ",(0,i.jsx)(n.code,{children:"metagen/ts/remix.ts"}),"."]}),"\n",(0,i.jsx)(o.A,{typescript:t(68105),disablePlayground:!0}),"\n",(0,i.jsx)(n.p,{children:"Ofcourse, we'll need to include both our implementation and the generated code when defining our typegraph functions."})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},99359:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"ctx"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"context"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"effect"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"meta"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"url"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"token"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"secrets"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"headers"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:119}};n.loc.source={body:"query {\n  ctx {\n    parent\n    context\n    effect\n    meta {\n      url\n      token\n    }\n    secrets\n    headers\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n},33204:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"createIdea"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"createIdea"},arguments:[{kind:"Argument",name:{kind:"Name",value:"data"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"id"},value:{kind:"StringValue",value:"c0ebb212-c94e-4fa5-a6ed-ae910d6cd9f5",block:!1}},{kind:"ObjectField",name:{kind:"Name",value:"name"},value:{kind:"StringValue",value:"PATENT #12343",block:!1}},{kind:"ObjectField",name:{kind:"Name",value:"authorEmail"},value:{kind:"StringValue",value:"corp@abc.xyz",block:!1}},{kind:"ObjectField",name:{kind:"Name",value:"desc"},value:{kind:"StringValue",value:"Well, you can't use it so why do you care?",block:!1}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"authorEmail"},arguments:[],directives:[]}]}}]}},{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"createVote"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"createVote"},arguments:[{kind:"Argument",name:{kind:"Name",value:"authorEmail"},value:{kind:"StringValue",value:"corp@abc.xyz",block:!1}},{kind:"Argument",name:{kind:"Name",value:"ideaId"},value:{kind:"StringValue",value:"c0ebb212-c94e-4fa5-a6ed-ae910d6cd9f5",block:!1}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"vote"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"authorEmail"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:488}};n.loc.source={body:'# create idea first\nmutation createIdea {\n  createIdea(\n    data: {\n      id: "c0ebb212-c94e-4fa5-a6ed-ae910d6cd9f5"\n      name: "PATENT #12343"\n      authorEmail: "corp@abc.xyz"\n      desc: "Well, you can\'t use it so why do you care?"\n    }\n  ) {\n    id\n    authorEmail\n  }\n}\n\n# now try to vote using same email\nmutation createVote {\n  createVote(\n    authorEmail: "corp@abc.xyz"\n    ideaId: "c0ebb212-c94e-4fa5-a6ed-ae910d6cd9f5"\n  ) {\n    vote {\n      id\n      authorEmail\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};function a(e,n){for(var t=0;t<e.definitions.length;t++){var i=e.definitions[t];if(i.name&&i.name.value==n)return i}}function o(e,n){var t={kind:e.kind,definitions:[a(e,n)]};e.hasOwnProperty("loc")&&(t.loc=e.loc);var o=i[n]||new Set,r=new Set,s=new Set;for(o.forEach((function(e){s.add(e)}));s.size>0;){var c=s;s=new Set,c.forEach((function(e){r.has(e)||(r.add(e),(i[e]||new Set).forEach((function(e){s.add(e)})))}))}return r.forEach((function(n){var i=a(e,n);i&&t.definitions.push(i)})),t}n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n,e.exports.createIdea=o(n,"createIdea"),e.exports.createVote=o(n,"createVote")},47008:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"fib"},arguments:[{kind:"Argument",name:{kind:"Name",value:"size"},value:{kind:"IntValue",value:"50"}}],directives:[]},{kind:"Field",name:{kind:"Name",value:"random"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"randomItem"},arguments:[{kind:"Argument",name:{kind:"Name",value:"items"},value:{kind:"ListValue",values:[{kind:"StringValue",value:"ice",block:!1},{kind:"StringValue",value:"advice",block:!1},{kind:"StringValue",value:"gold",block:!1},{kind:"StringValue",value:"flowers",block:!1},{kind:"StringValue",value:"dirt",block:!1}]}}],directives:[]}]}}],loc:{start:0,end:95}};n.loc.source={body:'{\n  fib(size: 50)\n  random\n  randomItem(items: ["ice", "advice", "gold", "flowers", "dirt"])\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n},60587:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"remix"},arguments:[{kind:"Argument",name:{kind:"Name",value:"title"},value:{kind:"StringValue",value:"Lovefool",block:!1}},{kind:"Argument",name:{kind:"Name",value:"artist"},value:{kind:"StringValue",value:"The Cardigans",block:!1}},{kind:"Argument",name:{kind:"Name",value:"releaseTime"},value:{kind:"StringValue",value:"1996-06-29T10:30:40.340Z",block:!1}},{kind:"Argument",name:{kind:"Name",value:"mp3Url"},value:{kind:"StringValue",value:"https://mus.ic/lovefool.mp3",block:!1}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"artist"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"releaseTime"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"mp3Url"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:213}};n.loc.source={body:'query {\n  remix(\n    title: "Lovefool"\n    artist: "The Cardigans"\n    releaseTime: "1996-06-29T10:30:40.340Z"\n    mp3Url: "https://mus.ic/lovefool.mp3"\n  ) {\n    title\n    artist\n    releaseTime\n    mp3Url\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n},13376:e=>{e.exports={content:"",path:"examples/typegraphs/func-ctx.py"}},43974:e=>{e.exports={content:'g.expose(\n  {\n    ctx: deno.func(\n      t.struct({}),\n      t.struct({\n        // the effect under which the function was run\n        effect: t.enum_(["create", "read", "update", "delete"]),\n        meta: t.struct({\n          // url to host typegraph\n          // can be used to talk to host typegraph from within\n          // function\n          url: t.string(), // token for accessing host typegraph\n          token: t.string(),\n        }),\n\n        // http headers\n        headers: t.list(t.list(t.string())),\n        // typegraph secrets\n        secrets: t.list(t.list(t.string())),\n\n        // FIXME: explanation\n        parent: t.string(),\n        context: t.string(),\n      }),\n      {\n        code: (_: any, ctx: any) => ({\n          ...ctx,\n          parent: JSON.stringify(ctx.parent),\n          context: JSON.stringify(ctx.context),\n\n          // modeling arbitrary associative arrays in\n          // graphql is difficult so we return a listified format.\n          // Follow the link for alternative solutions\n          // https://github.com/graphql/graphql-spec/issues/101#issuecomment-170170967\n          headers: Object.entries(ctx.headers),\n          secrets: Object.entries(ctx.secrets),\n        }),\n      },\n    ),\n  },\n  Policy.public(),\n);',path:"examples/typegraphs/func-ctx.ts"}},43685:e=>{e.exports={content:'deno = DenoRuntime()\ndb = PrismaRuntime("db", "POSTGRES")\nidea = t.struct(\n  {\n    "id": t.uuid(as_id=True, config={"auto": True}),\n    "name": t.string(),\n    "desc": t.string().optional(),\n    "authorEmail": t.email(),\n    "votes": t.list(g.ref("vote")),\n  },\n  name="idea",\n)\nvote = t.struct(\n  {\n    "id": t.uuid(as_id=True, config={"auto": True}),\n    "authorEmail": t.email(),\n    "idea": g.ref("idea"),\n  },\n  name="vote",\n)\n# Policy.internal means only custom functions\n# can access these root functions\ng.expose(\n  Policy.internal(),\n  i_get_idea=db.find_unique(idea),\n  i_create_vote=db.create(vote),\n)\ng.expose(\n  Policy.public(),\n  createIdea=db.create(idea),\n  createVote=deno.import_(\n    t.struct(\n      {"ideaId": t.uuid(), "authorEmail": t.email()}\n    ).rename("CreateVoteInput"),\n    t.struct(\n      {\n        # rename here  is necessary to make\n        # `fromParent` down below work\n        "voteId": t.uuid().rename("Vote_id"),\n        # using `reduce` we improve the API allowing\n        # create calls to get the newly created object\n        # without having to send this data from the\n        # custom funciton\n        "vote": db.find_unique(vote).reduce(\n          {\n            "where": {\n              "id": g.inherit().from_parent(\n                "Vote_id"\n              ),\n            },\n          }\n        ),\n      }\n    ).rename("CreateVoteOutput"),\n    module="scripts/createVote.ts",\n    name="handle",  # name the exported function to run\n    effect=fx.create(),\n  ),\n)',path:"examples/typegraphs/func-gql.py"}},83683:e=>{e.exports={content:'const deno = new DenoRuntime();\nconst db = new PrismaRuntime("db", "POSTGRES");\n\nconst idea = t.struct(\n  {\n    "id": t.uuid({ asId: true, config: { "auto": true } }),\n    "name": t.string(),\n    "desc": t.string().optional(),\n    "authorEmail": t.email(),\n    "votes": t.list(g.ref("vote")),\n  },\n  { name: "idea" },\n);\nconst vote = t.struct(\n  {\n    "id": t.uuid({ asId: true, config: { "auto": true } }),\n    "authorEmail": t.email(),\n    "idea": g.ref("idea"),\n  },\n  { name: "vote" },\n);\n\n// Policy.internal means only custom functions\n// can access these root functions\ng.expose({\n  i_get_idea: db.findUnique(idea),\n  i_create_vote: db.create(vote),\n}, Policy.internal());\n\ng.expose({\n  createIdea: db.create(idea),\n  createVote: deno.import(\n    t.struct({ "ideaId": t.uuid(), "authorEmail": t.email() })\n      .rename("CreateVoteInput"),\n    t.struct({\n      // rename here  is necessary to make\n      // `fromParent` down below work\n      "voteId": t.uuid().rename("Vote_id"),\n      // using `reduce` we improve the API allowing\n      // create calls to get the newly created object\n      // without having to send this data from the\n      // custom funciton\n      "vote": db.findUnique(vote)\n        .reduce({\n          "where": {\n            "id": g.inherit().fromParent("Vote_id"),\n          },\n        }),\n    }).rename("CreateVoteOutput"),\n    {\n      module: "scripts/createVote.ts",\n      name: "handle", // name the exported function to run\n      effect: fx.create(),\n    },\n  ),\n}, Policy.public());',path:"examples/typegraphs/func-gql.ts"}},42252:e=>{e.exports={content:'from typegraph.runtimes.deno import DenoRuntime\n\n\n@typegraph(\n)\ndef math(g: Graph):\n  public = Policy.public()\n\n  # we need a runtime to run the functions on\n  deno = DenoRuntime()\n\n  # we can provide the function code inline\n  random_item_fn = "({ items }) => items[Math.floor(Math.random() * items.length)]"\n\n  # or we can point to a local file that\'s accessible to the meta-cli\n  fib_module = "scripts/fib.ts"\n\n  # the policy implementation is based on functions as well\n  restrict_referer = deno.policy(\n    "restrict_referer_policy",\n    \'(_, context) => context.headers.referer && ["localhost", "metatype.dev"].includes(new URL(context.headers.referer).hostname)\',\n  )\n\n  g.expose(\n    public,\n    # all functions have inputs and outputs\n    fib=deno.import_(\n      t.struct({"size": t.integer()}),\n      t.list(t.float()),\n      module=fib_module,\n      name="default",  # name the exported function to run\n    ).with_policy(restrict_referer),\n    randomItem=deno.func(\n      t.struct({"items": t.list(t.string())}),\n      t.string(),\n      code=random_item_fn,\n    ),\n    random=deno.func(\n      t.struct(),\n      t.float(),\n      code="() => Math.random()",  # more inline code\n    ),\n  )',path:"examples/typegraphs/math.py"}},37770:e=>{e.exports={content:'import { DenoRuntime } from "@typegraph/sdk/runtimes/deno.js";\n\nawait typegraph(\n  {\n    name: "math",\n  },\n  (g) => {\n    const pub = Policy.public();\n\n    // we need a runtime to run the functions on\n    const deno = new DenoRuntime();\n\n    // we can provide the function code inline\n    const random_item_fn =\n      "({ items }) => items[Math.floor(Math.random() * items.length)]";\n\n    // the policy implementation is based on functions itself\n    const restrict_referer = deno.policy(\n      "restrict_referer_policy",\n      \'(_, context) => context.headers.referer && ["localhost", "metatype.dev"].includes(new URL(context.headers.referer).hostname)\'\n    );\n\n    // or we can point to a local file that\'s accessible to the meta-cli\n    const fib_module = "scripts/fib.ts";\n\n    g.expose(\n      {\n        // all functions have inputs and outputs\n        fib: deno\n          .import(t.struct({ size: t.integer() }), t.list(t.float()), {\n            module: fib_module,\n            name: "default", // name the exported function to run\n          })\n          .withPolicy(restrict_referer),\n        randomItem: deno.func(\n          t.struct({ items: t.list(t.string()) }),\n          t.string(),\n          { code: random_item_fn }\n        ),\n        random: deno.func(\n          t.struct({}),\n          t.float(),\n          { code: "() => Math.random()" } // more inline code\n        ),\n      },\n      pub\n    );\n  }\n);',path:"examples/typegraphs/math.ts"}},60218:e=>{e.exports={content:'@typegraph(\n)\ndef metagen_deno(g: Graph):\n  idv3 = t.struct(\n    {\n      "title": t.string(),\n      "artist": t.string(),\n      "releaseTime": t.datetime(),\n      "mp3Url": t.uri(),\n      # explicit type names help when generating code\n    }\n  ).rename("idv3")\n  deno = DenoRuntime()\n\n  g.expose(\n    Policy.public(),\n    remix=deno.import_(\n      idv3,\n      idv3,\n      module="./metagen/ts/remix.ts",\n      deps=["./metagen/ts/mdk.ts"],\n      name="remix_track",\n    ).rename("remix_track"),  # explicit names help\n  )',path:"examples/typegraphs/metagen-deno.py"}},76140:e=>{e.exports={content:'await typegraph({\n  name: "metagen-deno",\n}, (g) => {\n  const idv3 = t.struct({\n    title: t.string(),\n    artist: t.string(),\n    releaseTime: t.datetime(),\n    mp3Url: t.uri(),\n    // explicit type names help when generating code\n  }).rename("idv3");\n\n  const deno = new DenoRuntime();\n\n  g.expose({\n    remix: deno.import(\n      idv3,\n      idv3,\n      {\n        module: "./metagen/ts/remix.ts",\n        deps: ["./metagen/ts/mdk.ts"],\n        name: "remix_track",\n      },\n    ).rename("remix_track"), // explicit names help \n  }, Policy.public());\n});',path:"examples/typegraphs/metagen-deno.ts"}},54742:e=>{e.exports={content:'// This file was @generated by metagen and is intended\n// to be generated again on subsequent metagen runs.\n\nexport type Ctx = {\n  parent?: Record<string, unknown>;\n  /**\n   * Request context extracted by auth extractors.\n   */\n  context?: Record<string, unknown>;\n  secrets: Record<string, string>;\n  effect: "create" | "update" | "delete" | "read" | undefined | null;\n  meta: {\n    url: string;\n    token: string;\n  };\n  headers: Record<string, string>;\n};\n\n/**\n * Access features on your typegraph deployment.\n */\nexport type Deployment = {\n  gql: (query: readonly string[], ...args: unknown[]) => {\n    run: (\n      variables: Record<string, unknown>,\n    ) => Promise<Record<string, unknown>>;\n  };\n};\n\nexport type Handler<In, Out> = (\n  input: In,\n  ctx: Ctx,\n  tg: Deployment,\n) => Out | Promise<Out>;\n\nexport type StringDateTime = string;\nexport type StringUri = string;\nexport type Idv3 = {\n  title: string;\n  artist: string;\n  releaseTime: StringDateTime;\n  mp3Url: StringUri;\n};\n\n\nexport type RemixTrackHandler = Handler<Idv3, Idv3>;',path:"examples/typegraphs/metagen/ts/mdk.ts"}},68105:e=>{e.exports={content:'import type { RemixTrackHandler, Ctx, Idv3 } from "./mdk.ts"\n\n// the name of the export must match the one referred int he typegraph\nexport const remix_track: RemixTrackHandler = (inp, cx: Ctx) => {\n  const out: Idv3 = {\n    title: `${inp.title} (Remix)`,\n    artist: `${inp.artist} + DJ Cloud`,\n    releaseTime: new Date().toISOString(),\n    // S3Runtime could be used to really provide this service\n    mp3Url: `${cx.meta.url}/get_mp3`\n  };\n  return out;\n}',path:"examples/typegraphs/metagen/ts/remix.ts"}},36185:e=>{e.exports={content:"export async function handle(\n  inp: { ideaId: string; authorEmail: string },\n  _ctx: any,\n  // the third paramter contains the gql client object\n  { gql }: any,\n) {\n  // find the referenced idea from the typegraph\n  const { data: { idea } } = await gql`\n    query getIdeaAuthorEmail($ideaId: String!) {\n      idea: i_get_idea(where: { id: $ideaId }) {\n        authorEmail\n      }\n    }\n  `.run({ ideaId: inp.ideaId });\n\n  // we check if the idea exists\n  if (!idea) {\n    throw new Error(`no idea found under id ${inp.ideaId}`);\n  }\n\n  // and that the author and voter aren't the same\n  if (inp.authorEmail == idea.authorEmail) {\n    throw new Error(`author of idea can't vote for idea`);\n  }\n\n  // we persist the vote with another gql call\n  const { data: { vote } } = await gql`\n    mutation insertVote($ideaId: String!, $authorEmail: String!) {\n      vote: i_create_vote(data: { \n          authorEmail: $authorEmail, \n          idea: { connect: { id: $ideaId } } \n      }) {\n        id\n      }\n    }\n  `.run(inp);\n  return { voteId: vote.id };\n}",path:"examples/typegraphs/scripts/createVote.ts"}},71920:e=>{e.exports={content:"const CACHE = [1, 1];\nconst MAX_CACHE_SIZE = 1000;\n\nexport default function fib({ size }: { size: number }) {\n  if (size > MAX_CACHE_SIZE) {\n    throw new Error(`unsupported size ${size} > ${MAX_CACHE_SIZE}`);\n  }\n  let i = CACHE.length;\n  while (i++ < size) {\n    CACHE.push(CACHE[i - 2] + CACHE[i - 3]);\n  }\n  return CACHE.slice(0, size);\n}",path:"examples/typegraphs/scripts/fib.ts"}}}]);