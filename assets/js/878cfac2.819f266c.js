"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3076],{17942:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(50959);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(r),y=a,f=u["".concat(p,".").concat(y)]||u[y]||h[y]||o;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},30693:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(87366),a=(r(50959),r(17942));const o={sidebar_position:4},i="Typegate",l={unversionedId:"concepts/typegate/index",id:"concepts/typegate/index",title:"Typegate",description:"The typegate nodes - or typegates - are the central components of the ecosystems. They build and type check typegraphs, and expose them through a HTTP/GraphQL interface. They enforce the type safety of the data flows, connect to all the runtimes and orchestrate the execution of incoming requests.",source:"@site/docs/concepts/typegate/index.mdx",sourceDirName:"concepts/typegate",slug:"/concepts/typegate/",permalink:"/docs/concepts/typegate/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/concepts/typegate/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Typegraph",permalink:"/docs/concepts/typegraph/"},next:{title:"Meta CLI",permalink:"/docs/concepts/meta-cli/"}},p={},c=[{value:"Request lifecycle",id:"request-lifecycle",level:2},{value:"HTTP/GraphQL interface",id:"httpgraphql-interface",level:2}],s={toc:c},u="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typegate"},"Typegate"),(0,a.kt)("p",null,"The typegate nodes - or typegates - are the central components of the ecosystems. They build and type check typegraphs, and expose them through a HTTP/GraphQL interface. They enforce the type safety of the data flows, connect to all the runtimes and orchestrate the execution of incoming requests."),(0,a.kt)("h2",{id:"request-lifecycle"},"Request lifecycle"),(0,a.kt)("p",null,"When a new request fires a trigger, the typegate orchestrates the following stages:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"extract the secure request context from custom authentication or JSON Web Token (JWT)"),(0,a.kt)("li",{parentName:"ol"},"retrieve cached execution plan or compute a new one",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"traverse the typegraph to create a DAG of the required types"),(0,a.kt)("li",{parentName:"ul"},"optimize the DAG to reduce the number of calls to the runtimes"),(0,a.kt)("li",{parentName:"ul"},"pre-compute all structural elements and data resolutions"))),(0,a.kt)("li",{parentName:"ol"},"execute the plan",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"type check the arguments"),(0,a.kt)("li",{parentName:"ul"},"verify lazily policies on the need"),(0,a.kt)("li",{parentName:"ul"},"run the DAG execution"),(0,a.kt)("li",{parentName:"ul"},"enforce the rate-limiting"),(0,a.kt)("li",{parentName:"ul"},"type check the response"))),(0,a.kt)("li",{parentName:"ol"},"manage metadata of the request")),(0,a.kt)("h2",{id:"httpgraphql-interface"},"HTTP/GraphQL interface"),(0,a.kt)("p",null,"For now, the typegate nodes are only accessible through HTTP/1.1 and HTTP/2. More protocols could be supported in the future. Typegates expose a GraphQL interface which is the result of a ",(0,a.kt)("a",{parentName:"p",href:"./typegraph"},"typegraph")," projected onto corresponding GraphQL types. While this reduces the type safety of the data flowing, it makes more interoperable thanks to the many high-quality and well-known GraphQL tooling already available. The underlying types are also exposed in order for API clients to verify the underlying types."),(0,a.kt)("p",null,"GraphQL, being a query language, offers a great asset for Metatype's philosophy:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Efficient querying: the client can specify exactly what data it needs, reducing the amount of over- or under-fetching"),(0,a.kt)("li",{parentName:"ol"},"Flexibility: allows for retrieving multiple resources in a single request, unlike REST, which often requires multiple ones"),(0,a.kt)("li",{parentName:"ol"},"Typing: GraphQL has a built-in type system that allows for better documentation and stronger validation of the requests"),(0,a.kt)("li",{parentName:"ol"},"Improved tooling: tools and libraries around GraphQL are rapidly growing and great a development experience")))}h.isMDXComponent=!0}}]);