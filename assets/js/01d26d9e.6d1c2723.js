"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1645],{17942:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(50959);function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,p=function(e,t){if(null==e)return{};var r,n,p={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(p[r]=e[r]);return p}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(p[r]=e[r])}return p}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,p=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=l(r),y=p,d=m["".concat(s,".").concat(y)]||m[y]||u[y]||a;return r?n.createElement(d,o(o({ref:t},c),{},{components:r})):n.createElement(d,o({ref:t},c))}));function d(e,t){var r=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var a=r.length,o=new Array(a);o[0]=y;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:p,o[1]=i;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},18844:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(87366),p=(r(50959),r(17942));const a={sidebar_label:"importer",title:"typegraph.importers.base.importer"},o=void 0,i={unversionedId:"reference/typegraph/python/typegraph/importers/base/importer",id:"reference/typegraph/python/typegraph/importers/base/importer",title:"typegraph.importers.base.importer",description:"Importer Objects",source:"@site/docs/reference/typegraph/python/typegraph/importers/base/importer.md",sourceDirName:"reference/typegraph/python/typegraph/importers/base",slug:"/reference/typegraph/python/typegraph/importers/base/importer",permalink:"/docs/reference/typegraph/python/typegraph/importers/base/importer",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/typegraph/python/typegraph/importers/base/importer.md",tags:[],version:"current",frontMatter:{sidebar_label:"importer",title:"typegraph.importers.base.importer"},sidebar:"docs",previous:{title:"typegraph",permalink:"/docs/reference/typegraph/python/typegraph/graph/typegraph"},next:{title:"openapi",permalink:"/docs/reference/typegraph/python/typegraph/importers/openapi"}},s={},l=[{value:"Importer Objects",id:"importer-objects",level:2},{value:"headers",id:"headers",level:4},{value:"__init__",id:"__init__",level:4},{value:"Import Objects",id:"import-objects",level:2},{value:"types",id:"types",level:4},{value:"functions",id:"functions",level:4}],c={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,p.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h2",{id:"importer-objects"},"Importer Objects"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"class Importer()\n")),(0,p.kt)("p",null,"Base importer class"),(0,p.kt)("h4",{id:"headers"},"headers"),(0,p.kt)("p",null,"codegen header lines"),(0,p.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name: str,\n             *,\n             renames: Dict[str, str] = {},\n             keep_names: List[str] = [])\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"name")," - name of the importer"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"renames")," - a dictionary mapping original (imported) names to exposed names"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"keep_names")," - a list of names to keep as the original (imported)")),(0,p.kt)("h2",{id:"import-objects"},"Import Objects"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@frozen\nclass Import()\n")),(0,p.kt)("h4",{id:"types"},"types"),(0,p.kt)("p",null,"Dict","[str, t.typedef]"),(0,p.kt)("h4",{id:"functions"},"functions"),(0,p.kt)("p",null,"Dict","[str, t.func]"))}u.isMDXComponent=!0}}]);