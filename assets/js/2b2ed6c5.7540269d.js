"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3394],{574:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>d});var i=s(11527),r=s(63883);s(3643),s(86117);const n={sidebar_position:4},a="Import your existing APIs",o={id:"tutorials/import-your-existing-apis/index",title:"Import your existing APIs",description:"Let's summarize how far you progress made towards the chat-based app. The APIs should offer the following functionalities:",source:"@site/docs/tutorials/import-your-existing-apis/index.mdx",sourceDirName:"tutorials/import-your-existing-apis",slug:"/tutorials/import-your-existing-apis/",permalink:"/docs/tutorials/import-your-existing-apis/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/tutorials/import-your-existing-apis/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Build a feature roadmap API",permalink:"/docs/tutorials/building-feature-roadmap-api/"},next:{title:"Run serverless functions",permalink:"/docs/guides/external-functions/"}},l={},d=[{value:"Google importers",id:"google-importers",level:2},{value:"Effects",id:"effects",level:2},{value:"Introduction to typegraph_std",id:"introduction-to-typegraph_std",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"import-your-existing-apis",children:"Import your existing APIs"}),"\n",(0,i.jsx)(t.p,{children:"Let's summarize how far you progress made towards the chat-based app. The APIs should offer the following functionalities:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"list messages \u2705"}),"\n",(0,i.jsx)(t.li,{children:"create a message \u2705"}),"\n",(0,i.jsx)(t.li,{children:"retrieve the user from a message \u2705"}),"\n",(0,i.jsx)(t.li,{children:"send a notification to all users when there is a new message \ud83d\udd63"}),"\n",(0,i.jsx)(t.li,{children:"authentication and rate-limit the call \ud83d\udd63"}),"\n",(0,i.jsx)(t.li,{children:"add access control management \ud83d\udd63"}),"\n",(0,i.jsx)(t.li,{children:"some business logic \ud83d\udd63"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["For the notifications, Google offer a ",(0,i.jsx)(t.a,{href:"https://firebase.google.com/docs/reference/fcm/rest",children:"Firebase Cloud Messaging"})," (FCM) API which supports push on iOS, Android and web. Sadly as most of Google service, they don't provide an OpenAPI specification or a friendly GraphQL API. Rather they developed their own API definition files called API Discovery Service which maps incoming REST request onto their internal GRPC implementation, but this is a digression."]}),"\n",(0,i.jsx)(t.h2,{id:"google-importers",children:"Google importers"}),"\n",(0,i.jsx)(t.p,{children:"The typegraph module comes with some handy importers to avoid having to rewrite manually all types and materializers. Currently, it supports importers for OpenAPI, GraphQL API and Google APIs."}),"\n",(0,i.jsx)(t.admonition,{title:"Beta/unstable feature",type:"caution",children:(0,i.jsxs)(t.p,{children:["Importers are quite recent and likely to evolve as feedback is received. Your voice and use cases matter a lot, let Metatype community know what suits you the best in this ",(0,i.jsx)(t.a,{href:"https://github.com/metatypedev/metatype/discussions/104",children:"discussion"}),"."]})}),"\n",(0,i.jsxs)(t.p,{children:["Importers are function call with a boolean re-writing the source code file where they live. As they can generate quite long type definition, the best practice is to separate them into a dedicated file that can be imported into your main typegraph. Let's create ",(0,i.jsx)(t.code,{children:"google.py"})," and run ",(0,i.jsx)(t.code,{children:"python google.py"})," to generate the types."]}),"\n",(0,i.jsx)(t.p,{children:"This should generate code similar to this:"}),"\n",(0,i.jsx)(t.p,{children:"And can be imported/customized in your main typegraph file:"}),"\n",(0,i.jsx)(t.h2,{id:"effects",children:"Effects"}),"\n",(0,i.jsx)(t.p,{children:"Effects are a property of materializers and help categorization what happens to data when it gets transformed. Although they are similar to REST verbs and SQL statements, there is no direct one-to-one mapping."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Effects"}),(0,i.jsx)(t.th,{children:"REST verbs"}),(0,i.jsx)(t.th,{children:"SQL statements"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"none"})}),(0,i.jsx)(t.td,{children:"GET"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"SELECT"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"create"})}),(0,i.jsx)(t.td,{children:"POST"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"INSERT"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"update"})}),(0,i.jsx)(t.td,{children:"PUT/PATCH"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"UPDATE"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"upsert"})}),(0,i.jsx)(t.td,{children:"PUT"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"INSERT ON CONFLICT"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"delete"})}),(0,i.jsx)(t.td,{children:"DELETE"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"DELETE"})})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["They provide hints to the typegates for the query orchestration by splitting the queries and mutations. For example, the ",(0,i.jsx)(t.code,{children:"create"})," effect is exposed as a mutation. They also allow setting different policies based on them, that's for the next page."]}),"\n",(0,i.jsx)(t.h2,{id:"introduction-to-typegraph_std",children:"Introduction to typegraph_std"}),"\n",(0,i.jsx)(t.p,{children:"Alternatively, you can use the typegraph_std for the most common APIs.\nIt comes as a separate package so instead of maintening your own importers, you can use typegraph_std."}),"\n",(0,i.jsx)(t.p,{children:"The package currently includes:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Google APIs (fcm, firebase, youtube, etc.)"}),"\n",(0,i.jsx)(t.li,{children:"Stripe"}),"\n",(0,i.jsx)(t.li,{children:"Github"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"As you can see, it works pretty much the same way as importers."})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},46153:(e,t,s)=>{s.d(t,{r:()=>r});s(50959);var i=s(11527);function r(e){let{name:t,choices:s,choice:r,onChange:n,className:a}=e;return(0,i.jsx)("ul",{className:`pl-0 m-0 list-none w-full ${a??""}`,children:Object.entries(s).map((e=>{let[s,a]=e;return(0,i.jsx)("li",{className:"inline-block rounded-md overflow-clip mr-1",children:(0,i.jsx)("div",{children:(0,i.jsxs)("label",{className:"cursor-pointer",children:[(0,i.jsx)("input",{type:"radio",name:t,value:s,checked:s===r,onChange:()=>n(s),className:"hidden peer"}),(0,i.jsx)("div",{className:"px-3 py-1 bg-slate-100 peer-checked:bg-metared peer-checked:text-white",children:a})]})})},s)}))})}},48893:(e,t,s)=>{s.d(t,{Z:()=>j});var i=s(50959),r=s(52691),n=s(45197),a=s(14899),o=s(86117),l=s(33961),d=s(11527);const c=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function h(e){const{queryEditor:t,variableEditor:s,headerEditor:r}=(0,l._i)({nonNull:!0}),[n,a]=(0,i.useState)(e.defaultTab),o=(0,l.Xd)({onCopyQuery:e.onCopyQuery}),h=(0,l.fE)();return(0,i.useEffect)((()=>{s&&c(s)}),[n,s]),(0,i.useEffect)((()=>{r&&c(r)}),[n,r]),(0,i.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("extraKeys",{"Alt-G":()=>{t.replaceSelection("@")}}),t.setOption("gutters",[]),t.on("change",c),c(t))}),[t]),(0,i.useEffect)((()=>{s&&(s.setOption("lineNumbers",!1),s.setOption("gutters",[]),s.on("change",c))}),[s]),(0,i.useEffect)((()=>{r&&(r.setOption("lineNumbers",!1),r.setOption("gutters",[]),r.on("change",c))}),[r]),(0,d.jsx)(l.u.Provider,{children:(0,d.jsxs)("div",{className:"graphiql-editors",children:[(0,d.jsx)("section",{className:"graphiql-query-editor shadow-sm","aria-label":"Query Editor",children:(0,d.jsxs)("div",{className:"graphiql-query-editor-wrapper",children:[(0,d.jsx)(l.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),(0,d.jsxs)("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands",children:[(0,d.jsx)(l._8,{}),(0,d.jsx)(l.wC,{onClick:()=>h(),label:"Prettify query (Shift-Ctrl-P)",children:(0,d.jsx)(l.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})}),(0,d.jsx)(l.wC,{onClick:()=>o(),label:"Copy query (Shift-Ctrl-C)",children:(0,d.jsx)(l.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"})})]})]})}),e.noTool?null:(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{className:"graphiql-editor-tools p-0 text-sm ",children:(0,d.jsxs)("div",{className:"graphiql-editor-tools-tabs",children:[(0,d.jsx)("div",{className:("variables"===n?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{a("variables"===n?"":"variables")},children:"Variables"}),(0,d.jsx)("div",{className:("headers"===n?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{a("headers"===n?"":"headers")},children:"Headers"})]})}),(0,d.jsxs)("section",{className:"graphiql-editor-tool "+(n&&n.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===n?"Variables":"Headers",children:[(0,d.jsx)(l.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==n,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),(0,d.jsx)(l.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==n,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})]})]})]})})}class p{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var u=s(46153);function m(){return(0,l.JB)({nonNull:!0}).isFetching?(0,d.jsx)(l.$j,{}):null}const x={typegraph:"Typegraph",playground:"Playground"};function g(e){let{typegraph:t,query:s,code:n,codeLanguage:c,codeFileUrl:g,headers:j={},variables:y={},tab:f="",noTool:b=!1,defaultMode:v=null}=e;const{siteConfig:{customFields:{tgUrl:w}}}=(0,a.Z)(),N=(0,i.useMemo)((()=>new p),[]),E=(0,i.useMemo)((()=>(0,r.nq)({url:`${w}/${t}`})),[]),[T,I]=(0,i.useState)(v);return(0,d.jsxs)("div",{className:"@container miniql mb-5",children:[v?(0,d.jsx)(u.r,{name:"mode",choices:x,choice:T,onChange:I,className:"mb-2"}):null,(0,d.jsx)(l.j$,{fetcher:E,defaultQuery:s.loc?.source.body.trim(),defaultHeaders:JSON.stringify(j),shouldPersistHeaders:!0,variables:JSON.stringify(y),storage:N,children:(0,d.jsxs)("div",{className:(v?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first",children:[v&&"typegraph"!==T?null:(0,d.jsxs)("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0",children:[g?(0,d.jsxs)("div",{className:"p-2 text-xs font-light",children:["See/edit full code on"," ",(0,d.jsx)("a",{href:`https://github.com/metatypedev/metatype/blob/main/${g}`,children:g})]}):null,n?(0,d.jsx)(o.Z,{language:c,wrap:!0,className:"flex-1",children:n}):null]}),v&&"playground"!==T?null:(0,d.jsxs)("div",{className:"flex flex-col graphiql-container",children:[(0,d.jsx)("div",{className:"flex-1 graphiql-session",children:(0,d.jsx)(h,{defaultTab:f,noTool:b})}),(0,d.jsxs)("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg",children:[(0,d.jsx)(m,{}),(0,d.jsx)(l.iB,{})]})]})]})})]})}function j(e){return(0,d.jsx)(n.Z,{fallback:(0,d.jsx)("div",{children:"Loading..."}),children:()=>(0,d.jsx)(g,{...e})})}},3643:(e,t,s)=>{s.d(t,{Z:()=>n});var i=s(48893),r=(s(50959),s(11527));function n(e){let{python:t,...s}=e;return(0,r.jsx)(i.Z,{code:t.content,codeLanguage:"python",codeFileUrl:t.path,...s})}}}]);