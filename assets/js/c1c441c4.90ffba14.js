"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9179],{76763:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>i,toc:()=>o});var n=s(11527),r=s(63883);const d={},c="Functions",i={id:"reference/types/functions",title:"Functions",description:"Effects",source:"@site/docs/reference/types/functions.mdx",sourceDirName:"reference/types",slug:"/reference/types/functions",permalink:"/docs/reference/types/functions",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/types/functions.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Types",permalink:"/docs/reference/types/"},next:{title:"Importers",permalink:"/docs/reference/types/importers/"}},h={},o=[{value:"Effects",id:"effects",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"functions",children:"Functions"}),"\n",(0,n.jsx)(t.h2,{id:"effects",children:"Effects"}),"\n",(0,n.jsx)(t.p,{children:"Effects are a property of materializers and help categorization what happens to data when it gets transformed. Although they are similar to REST verbs and SQL statements, there is no direct one-to-one mapping."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Effects"}),(0,n.jsx)(t.th,{children:"REST verbs"}),(0,n.jsx)(t.th,{children:"SQL statements"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"none"})}),(0,n.jsx)(t.td,{children:"GET"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"SELECT"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"create"})}),(0,n.jsx)(t.td,{children:"POST"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"INSERT"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"update"})}),(0,n.jsx)(t.td,{children:"PUT/PATCH"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"UPDATE"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"upsert"})}),(0,n.jsx)(t.td,{children:"PUT"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"INSERT ON CONFLICT"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"delete"})}),(0,n.jsx)(t.td,{children:"DELETE"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"DELETE"})})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["They provide hints to the typegates for the query orchestration by splitting the queries and mutations. For example, the ",(0,n.jsx)(t.code,{children:"create"})," effect is exposed as a mutation. They also allow setting different policies based on them, that's for the next page."]})]})}function a(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);