(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9646],{7158:(e,n,t)=>{"use strict";t.d(n,{ZP:()=>o});var a=t(11527),i=t(63883);function r(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Metatype is only supported on macOS and Linux. Windows users should use ",(0,a.jsx)(n.a,{href:"https://learn.microsoft.com/windows/wsl/install",children:"Linux on Windows with WSL"}),"."]})}),"\n",(0,a.jsxs)(n.p,{children:["You can download the binary from the\n",(0,a.jsx)(n.a,{href:"https://github.com/metatypedev/metatype/releases/",children:"releases page"}),", make it\nexecutable and add it to your ",(0,a.jsx)(n.code,{children:"PATH"})," or use the automated method below."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# the installer may ask for your password\ncurl -fsSL https://raw.githubusercontent.com/metatypedev/metatype/main/installer.sh | bash\n\n# (for later) upgrade to a newer version\nmeta upgrade\n"})})]})}function o(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}},80611:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>u,toc:()=>h});var a=t(11527),i=t(63883),r=t(5081),o=t(57114),s=t(3643),d=t(7158);t(86117);const l={sidebar_position:3},c="Build a feature roadmap API",u={id:"tutorials/building-feature-roadmap-api/index",title:"Build a feature roadmap API",description:"This page will walk you through a real world API with data storage and authorization.",source:"@site/docs/tutorials/building-feature-roadmap-api/index.mdx",sourceDirName:"tutorials/building-feature-roadmap-api",slug:"/tutorials/building-feature-roadmap-api/",permalink:"/docs/tutorials/building-feature-roadmap-api/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/tutorials/building-feature-roadmap-api/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Metatype basics",permalink:"/docs/tutorials/metatype-basics/"},next:{title:"Import your existing APIs",permalink:"/docs/tutorials/import-your-existing-apis/"}},p={},h=[{value:"What are you building?",id:"what-are-you-building",level:2},{value:"Setup",id:"setup",level:2},{value:"Install Meta CLI",id:"install-meta-cli",level:3},{value:"Create a new project",id:"create-a-new-project",level:3},{value:"Launch typegate",id:"launch-typegate",level:3},{value:"Make sure it&#39;s all working",id:"make-sure-its-all-working",level:3},{value:"Types",id:"types",level:2},{value:"Materializers",id:"materializers",level:2},{value:"The Prisma Runtime",id:"the-prisma-runtime",level:3},{value:"Policies",id:"policies",level:2},{value:"More",id:"more",level:2},{value:"<code>reduce</code>",id:"reduce",level:3},{value:"<code>execute</code>",id:"execute",level:3},{value:"<code>rest</code>",id:"rest",level:3},{value:"<code>import</code>",id:"import",level:3}];function m(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"build-a-feature-roadmap-api",children:"Build a feature roadmap API"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"This page will walk you through a real world API with data storage and authorization."})}),"\n",(0,a.jsx)(n.admonition,{title:"You will learn",type:"note",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"how to setup your development for metatype projects"}),"\n",(0,a.jsx)(n.li,{children:"how to run the typegate on the docker runtime"}),"\n",(0,a.jsx)(n.li,{children:"how to create/read/update/delete data"}),"\n",(0,a.jsx)(n.li,{children:"how to write custom business logic"}),"\n",(0,a.jsx)(n.li,{children:"how to authenticate requests"}),"\n",(0,a.jsx)(n.li,{children:"how to protect data with policies"}),"\n"]})}),"\n",(0,a.jsx)(n.h2,{id:"what-are-you-building",children:"What are you building?"}),"\n",(0,a.jsxs)(n.p,{children:["For this tutorial, we'll be implementing an API to power a simple feature roadmap/request hybrid as can be seen on ",(0,a.jsx)(n.a,{href:"https://productlane.com/roadmap",children:"Productlane"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Looking through the app we can see tha the api should allow:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:'Unauthenticated users to submit new "ideas" or vote on any of those already listed.'}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:'Specify or vote on the importance of an "idea" from "medium" to "critical" or even submit text with more description.'}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:'Admins will be able to move ideas across buckets like "Backlog", "Planned", "In Progress".'}),"\n","\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.p,{children:"Before anything, we'll first need to install the tooling required for development and create a new project."}),"\n",(0,a.jsx)(n.h3,{id:"install-meta-cli",children:"Install Meta CLI"}),"\n",(0,a.jsx)(n.p,{children:"The meta-cli tool manages and helps you develop your metatype based projects.\nThis include allowing you to run them locally for development, push them to production in the cloud, managing your database migrations and more."}),"\n",(0,a.jsx)(d.ZP,{}),"\n",(0,a.jsx)(n.h3,{id:"create-a-new-project",children:"Create a new project"}),"\n",(0,a.jsx)(n.p,{children:"Metatype projects are composed of modular bundles of types, logic and policies called typegraphs.\nWe author typegraphs using modern programming languages & environments.\nPython and ECMAScript are currently availaible for use.\nThe meta-cli allows us to create a new project based on pre-existing templates."}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsxs)(o.Z,{value:"typescript",children:[(0,a.jsxs)(n.p,{children:["Run one the following commands to create a new project under a new directory titled ",(0,a.jsx)(n.code,{children:"tg_roadmap"}),"."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# using Node/Bun runtimes\nmeta new --template node tg_roadmap \n#                        ^ project name \n#                   ^  Use `meta new --help` find out more available templates. \n\n# using Deno\nmeta new --template deno tg_roadmap \n"})}),(0,a.jsxs)(n.p,{children:["When using ECMAScript, the ",(0,a.jsx)(n.code,{children:"@typegraph/sdk"})," package exposes all the necessary functions and types we'll need to describe our typegraph.\nThe templates already specify it as as a dependency so all we need to do now is run the following command to download it:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# using Deno\ndeno cache api/example.ts # cache dependencies\n\n# using Bun\nbun install\n\n# using pnpm\npnpm install\n\n# using npm\nnpm install\n\n# using yarn\nyarn install\n"})})]}),(0,a.jsxs)(o.Z,{value:"python",children:[(0,a.jsxs)(n.p,{children:["Run the following command to create a new project under a new directory titled ",(0,a.jsx)(n.code,{children:"tg_roadmap"}),"."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"meta new --template python tg_roadmap \n#                          ^ project name \n#                   ^  Use `meta new --help` find out more available templates. \n"})}),(0,a.jsxs)(n.p,{children:["When using python, the ",(0,a.jsx)(n.code,{children:"typegraph"})," package exposes all the necessary functions and types we'll need to describe our typegraph.\nWe'll need to run the following command to install it:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# virtual env\npython3 -m venv .venv\n# other activate scripts should be available for non bash shells\nsource .venv/bin/activate \n\n# using pip\npip3 install typegraph\n\n# using poetry\n# the template has included `typegraph` in the poetry manifest\npoetry install \n"})})]})]}),"\n",(0,a.jsx)(n.h3,{id:"launch-typegate",children:"Launch typegate"}),"\n",(0,a.jsxs)(n.p,{children:["The typegate is a program that runs and orchestrates our typegraphs.\nWe can run it locally for development purposes.\nTypegate currently requires the Redis database to function and to make it eay to run both, we'll make use of a linux container runtime for this.\nThe Docker runtime to be specific which has installation guides located ",(0,a.jsx)(n.a,{href:"https://docs.docker.com/get-docker/",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["We'll also need the Docker Compose orchestrator which usually comes by default with the ",(0,a.jsx)(n.code,{children:"docker"})," command. Use the following command to check if it's available:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker compose version \n# Docker Compose version 2.23.0\n"})}),"\n",(0,a.jsxs)(n.p,{children:["...and if not, the official installation guide can be found ",(0,a.jsx)(n.a,{href:"https://docs.docker.com/compose/install/",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If you have your docker runtime installed and running correctly, you will be able to launch the ",(0,a.jsx)(n.code,{children:"compose.yml"})," file that's bundled in every template.\nThe compose file by default includes the ",(0,a.jsx)(n.code,{children:"postgres"})," and ",(0,a.jsx)(n.code,{children:"mongo"})," databases.\nYou can disable the latter by commenting it out or removing it as we'll not be needing it for this tutorial."]}),"\n",(0,a.jsx)(n.p,{children:"To launch the services, navigate you shell the the project directory and run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker compose up --detach\n#                 ^ detach means it'll run in the background.\n#                   Omit to get the all logs in the current terminal\n"})}),"\n",(0,a.jsx)(n.p,{children:"This should download and start typegate and it's dependent services."}),"\n",(0,a.jsx)(n.p,{children:"We can observe their log of typegate or any of the other services with the following command. It has to be run from the same project directory."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker compose logs typegate --follow\n#                   ^ Omit service name to look at the combined logs of all services\n"})}),"\n",(0,a.jsx)(n.h3,{id:"make-sure-its-all-working",children:"Make sure it's all working"}),"\n",(0,a.jsxs)(n.p,{children:["The meta-cli includes the ",(0,a.jsx)(n.code,{children:"doctor"})," command that checks everything is in working order.\nYou can run the following to make sure everything's up and running."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"meta doctor\n# \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 Global \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n# curr. directory      /home/asdf/tg_roadmap\n# global config        /home/asdf/.config/meta/config.json\n# meta-cli version     0.2.4\n# docker version       Docker version 24.0.7, build afdd53b4e3\n# containers           ghcr.io/metatypedev/typegate:v0.2.4 (Up 7 minutes), redis:7 (Up 7 minutes), postgres:15 (Up 7 minutes)\n# \n# \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 Project  \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n# metatype file        metatype.yaml\n# targets              [2] deploy (remote, 3 secrets), dev (local, 3 secrets)\n# typegraphs           [1] api/example.ts\n# \n# \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 Python SDK \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n# python version       Python 3.11.5\n# python bin           .venv/bin/python\n# venv folder          .venv\n# pyproject file       pyproject.toml\n# pipfile file         not found\n# requirements file    not found\n# typegraph version\n# \n# \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 Typescript SDK \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n# deno version         deno 1.38.0\n# node version         v20.9.0\n# \n# \u250c\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2510\n# | Check that all versions match.                             |\n# | In case of issue or question, please raise a ticket on:    |\n# | https://github.com/metatypedev/metatype/issues             |\n# | Or browse the documentation:                               |\n# | https://metatype.dev/docs/reference                        |\n# \u2514\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2518\n"})}),"\n",(0,a.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,a.jsx)(n.p,{children:'The types of our typegraph describe the shape of the data that flows through it.\nIn this case, we\'ll build our typegraph around types that represent "ideas", "votes" and "buckets".'}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsxs)(o.Z,{value:"typescript",children:[(0,a.jsxs)(n.p,{children:["Modify the file at ",(0,a.jsx)(n.code,{children:"api/example.ts"})," to look something like the following."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// we\'ll need the following imports\nimport { t, typegraph } from "@typegraph/sdk";\n\n\ntypegraph("roadmap", (g) => {\n  //       ^ each typegraph has a name\n\n  const bucket = t.struct({\n    // asId and other config items describe the logical properties\n    // of our types beyond just the shape\n    "id": t.integer({}, { asId: true }),\n    "name": t.string(),\n  });\n  const idea = t.struct({\n    // uuid is just a shorthand alias for `t.string({format: "uuid"})`\n    "id": t.uuid({ asId: true }), \n    "name": t.string(),\n    // another string shorthand\n    "authorEmail": t.email(), \n  });\n  const vote = t.struct({\n    "id": t.uuid(),\n    "authorEmail": t.email(),\n    // `enum_` is also a shorthand over `t.string`\n    "importance": t.enum_(["medium", "important", "critical"]).optional(), \n    // makes it optional\n    "desc": t.string().optional(), \n  });\n});\n'})})]}),(0,a.jsxs)(o.Z,{value:"python",children:[(0,a.jsxs)(n.p,{children:["Modify the file at ",(0,a.jsx)(n.code,{children:"api/example.py"})," to look something like the following."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# we\'ll need the following imports\nfrom typegraph import typegraph, t, Graph\n\n# the typegraph will carry the name of the defining function by default\n@typegraph()\ndef roadmap(g: Graph):\n    bucket = t.struct({\n        # asId and other config items describe the logical properties\n        # of our types beyond just the shape\n        "id": t.integer(as_id=True),\n        "name": t.string(),\n    });\n    idea = t.struct({\n        # email is just a shorthand alias for `t.string({format: "uuid"})`\n        "id": t.uuid(as_id=True), \n        "name": t.string(),\n        # another string shorthand\n        "authorEmail": t.email(), \n    });\n    vote = t.struct({\n        "id": t.uuid(),\n        "authorEmail": t.email(),\n        # `enum` is also a shorthand over `t.string`\n        "importance": t.enum(["medium", "important", "critical"]).optional(), \n        # makes it optional\n        "desc": t.string().optional(), \n    });\n\n'})})]})]}),"\n",(0,a.jsx)(n.p,{children:"The types here are very simple and we haven't yet added any thing that models their relationships but they should do for our purposes."}),"\n",(0,a.jsx)(n.h2,{id:"materializers",children:"Materializers"}),"\n",(0,a.jsx)(n.p,{children:"Typegraphs expose an API to the external world using Materializer objects.\nMaterializers describe functions that transform some input type into an output type and we define them in scope of different Runtimes, where the actual logic runs.\nAt this early stage, we can make use of the Random runtime which allows us to generate random test data for our types to get a feel of our API."}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"typescript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// add need the following imports\nimport { RandomRuntime } from "@typegraph/sdk/runtimes/random";\n\ntypegraph("roadmap", (g) => {\n  // ...\n  // every exposed materializer requires access control policies\n  // for now, just use the public policy, anyone can access it \n  const pub = Policy.public(); \n  const random = new RandomRuntime({});\n  g.expose(\n    {\n      // generates a random object in the shape of idea\n      "get_idea": random.gen(idea).withPolicy(pub),\n    },\n  );\n});\n'})})}),(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from typegraph.runtimes.random import RandomRuntime\n\n@typegraph()\ndef roadmap(g: Graph):\n    # every exposed materializer requires access control policies\n    # for now, just use the public policy, anyone can access it\n    pub = Policy.public() \n    random = RandomRuntime()\n    g.expose(\n      # generates a random object in the shape of idea\n      get_idea=random.gen(idea).with_policy(pub)\n    )\n\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"At this point, we can push our typegraph to the locally running typegate node and access it.\nRun the following command in your project root:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# features auto-reload on any changes to your source files\nmeta dev \n"})}),"\n",(0,a.jsxs)(n.p,{children:["Typegate has first-class support for consuming the API through a GraphQl interface and it's enabled by default.\nIt also bundles the GrahpiQl API explorer and you should be able to access it at ",(0,a.jsx)(n.a,{href:"http://localhost:7890/roadmap",children:"http://localhost:7890/roadmap"})," once meta-cli has successfully pushed your typegraph."]}),"\n",(0,a.jsx)(s.Z,{typegraph:"roadmap-random",python:t(35508),query:t(34467)}),"\n",(0,a.jsx)(n.h3,{id:"the-prisma-runtime",children:"The Prisma Runtime"}),"\n",(0,a.jsxs)(n.p,{children:["A runtime most apps will be depend on is the ",(0,a.jsx)(n.a,{href:"/docs/reference/runtimes/prisma",children:"Prisma Runtime"}),".\nIt allows you to persist data and run queries on different kinds of databases and has support for popular SQL and NoSQL databases.\nWe'll use it to add the CRUD (create, read, update, delete) operations our app needs."]}),"\n",(0,a.jsxs)(n.p,{children:["For this tutorial, we'll be making use of the PostgreSQL database.\nIf you made use of the ",(0,a.jsx)(n.code,{children:"compose.yml"})," to run typegate as outlined in this tutorial, there should be an instance of Postgres already up.\nYou can check if postgres container is currently running by using the ",(0,a.jsx)(n.code,{children:"meta doctor"})," command."]}),"\n",(0,a.jsxs)(n.p,{children:["If a typegraph needs to access a database, it first needs to be made aware of its address.\nThis is done through environment variables.\nIn the root of your project directory, you'll find a file titled ",(0,a.jsx)(n.code,{children:"metatype.yaml"}),".\nIt contains metatype specific configuration for our project such as the top level ",(0,a.jsx)(n.code,{children:"typegates"})," object which we use to specify the location and credentials of the different typegate nodes we'll be using.\nEach typegate entry also takes an ",(0,a.jsx)(n.code,{children:"env"})," object where we can specify environment variables to be passed to our typegraphs.\nThis requires special syntax.\nIf we want for a typegraph called, say ",(0,a.jsx)(n.code,{children:"FOO"}),", to be able read a variable named ",(0,a.jsx)(n.code,{children:"BAR"}),", we specify the variable as ",(0,a.jsx)(n.code,{children:"TG_FOO_BAR: value"})," in our config."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"metatype.yaml"})," should already have a few sample environment variables.\nAdd an entry like the following to give our typegraph access to the database's address:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'typegates:\n  dev:\n    # ..\n    env:\n      # values here assume default config\n      TG_ROADMAP_POSTGRES: "postgresql://postgres:password@postgres:5432/db"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Meta-cli will auto-reload when it detects changes to ",(0,a.jsx)(n.code,{children:"metatype.yaml"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"We can add the Prisma runtime to our typegraph now."}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"typescript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// new imports\nimport { PrismaRuntime } from "@typegraph/sdk/providers/prisma";\n\ntypegraph("roadmap", (g) => {\n  // ...\n  \n  // the constructor takes the name of the env var directly\n  const db = new PrismaRuntime("db", "POSTGRES");\n  // ...\n});\n'})})}),(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# new imports\nfrom typegraph.providers.prisma import PrismaRuntime\n\n@typegraph()\ndef roadmap(g: Graph):\n    # ..\n\n    # the constructor takes the name of the env var directly\n    db = PrismaRuntime("db", "POSTGRES")\n    # ..\n\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"One of the features that the Prisma runtime allows us to implement is relationships."}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"typescript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { PrismaRuntime } from "@typegraph/sdk/providers/prisma";\n\ntypegraph("roadmap", (g) => {\n  // ...\n  \n  const db = new PrismaRuntime("db", "POSTGRES");\n\n  const bucket = t.struct({\n    "id": t.integer({}, { \n      asId: true, \n      //  auto generate ids during creation\n      config: { auto: true }\n    }),\n    "name": t.string(),\n    // one-to many relationship\n    "ideas": t.list(g.ref("idea")), \n  })\n    // explicitly naming our types makes reference later easier\n    .rename("bucket"); \n  \n  const idea = t.struct({\n    "id": t.uuid({ asId: true, config: { auto: true } }),\n    "name": t.string(),\n    "authorEmail": t.email(),\n    // we need to specify the relationships on both types\n    "bucket": g.ref("bucket"), \n    "votes": t.list(g.ref("vote")),\n  })\n    .rename("idea");\n\n  const vote = t.struct({\n    "id": t.uuid({ asId: true, config: { auto: true } }),\n    "authorEmail": t.email(),\n    "importance": t.enum_(["medium", "important", "critical"]).optional(),\n    "desc": t.string().optional(),\n    "idea": g.ref("idea")\n  })\n    .rename("vote");\n\n  // ...\n});\n'})})}),(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typegraph.providers.prisma import PrismaRuntime\n\n@typegraph()\ndef roadmap(g: Graph):\n    # ..\n    db = PrismaRuntime("db", "POSTGRES")\n\n    bucket = t.struct(\n        {\n            "id": t.integer(\n              as_id=True, \n              # auto generate ids during creation\n              config={"auto": True}\n            ),\n            "name": t.string(),\n            # one-to many relationship\n            "ideas": t.list(g.ref("idea")), \n        },\n        # explicitly naming our types makes reference later easier\n        name="bucket"  \n    )\n    idea = t.struct(\n        {\n            "id": t.uuid(as_id=True, config={"auto": True}),\n            "name": t.string(),\n            "authorEmail": t.email(),\n            "votes": t.list(g.ref("vote")),\n            "bucket": g.ref("bucket"), \n        },\n        name="idea"\n    )\n    vote = t.struct(\n        {\n            "id": t.uuid(as_id=True, config={"auto": True}),\n            "authorEmail": t.email(),\n            "importance": t.enum(["medium", "important", "critical"]).optional(),\n            "desc": t.string().optional(),\n            "idea": g.ref("idea"),\n        },\n        name="vote"\n    )\n    # ..\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"g.ref"})," declares logical relationships between our types which the Prisma runtime will be able to pick up.\nIf you need more control on what the relationships will look like on the database, you can use the ",(0,a.jsx)(n.code,{children:"db.link"})," function.\nMore information can be found on the Prisma runtime ",(0,a.jsx)(n.a,{href:"/docs/reference/runtimes/prisma",children:"reference"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["When we save our file at this point, the ",(0,a.jsx)(n.code,{children:"meta dev"})," watcher should automatically create and push the necessary migrations to our database to get it in its intended shape.\nYou should see a new subdirectory in your project called ",(0,a.jsx)(n.code,{children:"prisma"}),".\nIt's where the generated migrations are contained."]}),"\n",(0,a.jsx)(n.p,{children:"If you mess something up in the migrations and want a clean slate, you can reset everything by recreating the containers like so:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# remove all containers and their volumes\ndocker compose down -v \n# launch \ndocker compose up --detach\n# meta dev will auto apply any pending changes to databases\nmeta dev\n"})}),"\n",(0,a.jsx)(n.p,{children:"At this point, we're ready to add materializers to expose database queries to create or read data.\nThe Prisma runtime allows us to run raw queries directly on the database but it also provides handy functions we can use for basic CRUD operations.\nWe'll make use of those."}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"typescript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { PrismaRuntime } from "@typegraph/sdk/providers/prisma";\n\ntypegraph("roadmap", (g) => {\n  // ...\n  const pub = Policy.public(); \n  const db = new PrismaRuntime("db", "POSTGRES");\n  // ...\n  g.expose(\n    {\n      "get_buckets": db.findMany(bucket),\n      "create_bucket": db.create(bucket),\n      "get_idea": db.findFirst(idea),\n      "create_ideas": db.create(idea),\n    }, pub // make all materializers public by default\n  );\n});\n'})})}),(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typegraph.providers.prisma import PrismaRuntime\n\n@typegraph()\ndef roadmap(g: Graph):\n    # ..\n    pub = Policy.public()\n    db = PrismaRuntime("db", "POSTGRES")\n    # ..\n    g.expose(\n        pub, # make all materializers public by default\n        get_buckets=db.find_many(bucket),\n        create_bucket=db.create(bucket),\n        get_idea=db.find_many(bucket),\n        create_idea=db.create(bucket),\n        get_vote=db.create(vote),\n    )\n\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"We should be able to add a few buckets and ideas now."}),"\n",(0,a.jsx)(s.Z,{typegraph:"roadmap-prisma",python:t(49981),query:t(6700)}),"\n",(0,a.jsx)(n.h2,{id:"policies",children:"Policies"}),"\n",(0,a.jsx)(n.p,{children:"We now have the tools enough to allow coarse CRUD of our data.\nThe next thing we usually add at this point is authorization.\nA way to control who can read or write what.\nThe primary mechanism typegraphs use for this purpose are policies."}),"\n",(0,a.jsxs)(n.p,{children:["Policies are small functions that get the context of a request as input and return a boolean signaling weather access should be granted.\nThere are different kinds of extractors available that primarily work on HTTP request headers including ",(0,a.jsx)(n.code,{children:"jwt"}),", ",(0,a.jsx)(n.code,{children:"hmac"}),", ",(0,a.jsx)(n.code,{children:"basic"})," and ",(0,a.jsx)(n.code,{children:"oauth2"})," with support for different providers.\nWe register any extractors we're interested in for the entire typegraph.\nAny policies running within it can then access their extracted values in the context.",(0,a.jsx)(n.br,{}),"\n","Metatype currently supports policies based on javascript functions that are run on the Deno runtime."]}),"\n",(0,a.jsxs)(n.p,{children:['For this tutorial, we\'ll be making use of the basic auth extractor.\nIt expects a string in the format "Basic token" to be set in the ',(0,a.jsx)(n.code,{children:"Authorization"})," http header.\nThe token is expected to be a base64 encoded string in the format ",(0,a.jsx)(n.code,{children:"username:secret"}),"."]}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"typescript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { DenoRuntime } from "@typegraph/sdk/runtimes/deno";\nimport { Auth } from "@typegraph/sdk/params";\n\ntypegraph("roadmap", (g) => {\n  // ...\n\n  const deno = new DenoRuntime();\n\n  // The basic extractor only populates the context when \n  // it recognizes the username and the secret matches\n  g.auth(Auth.basic(["andim", /*more users*/]))\n\n  // the `username` value is only availaible if the basic\n  // extractor was successful \n  const admins = deno.policy("admins", `\n  (_args, { context }) => !!context.username\n`);\n\n  g.expose(\n    {\n      // ..\n      // only admins are allowed to create new buckets\n      "create_bucket": db.create(bucket).withPolicy(admins),\n      // ..\n    }, pub\n  );\n\n  // ...\n\n});\n'})})}),(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typegraph.providers.prisma import PrismaRuntime\nfrom typegraph.graph.params import Auth\n\n@typegraph()\ndef roadmap(g: Graph):\n    # ..\n    # The basic extractor only populates the context when \n    # it recognizes the username and the secret matches\n    g.auth(Auth.basic(["andim"]))\n\n    deno = DenoRuntime()\n\n    # the username value is only availaible if the basic\n    # extractor was successful \n    admins = deno.policy("admins", """\n  (_args, { context }) => !!context.username\n""")\n\n    g.expose(\n        pub,\n        # ..\n        # only admins are allowed to create new buckets\n        create_bucket=db.create(bucket).with_policy(admins),\n        # ..\n    )\n\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["The basic extractors expects the secrets in environment variables named in a specific format.\nAdd the following entries to the ",(0,a.jsx)(n.code,{children:"metatype.yaml"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"typegates:\n  dev:\n    # ..\n    env:\n      # ..\n      # the basic extractor secret format\n      # TG_[typegraph]_BASIC_[username] \n      TG_ROADMAP_BASIC_ANDIM: hunter2\n"})}),"\n",(0,a.jsxs)(n.p,{children:["When you save the files, meta-cli will reload the new additions to your typegraph.\n",(0,a.jsx)(n.code,{children:"create_bucket"})," is now only accessible to requests bearing the right tokens.\n(For the provided example, ",(0,a.jsx)(n.code,{children:"Basic YW5kaW06aHVudGVyMg=="}),' should work)\nIf you\'re using the GraphiQl interface from earlier, there should be a panel in the bottom left called "Headers" for setting http headers']}),"\n",(0,a.jsx)(s.Z,{typegraph:"roadmap-policies",python:t(86960),query:t(41181)}),"\n",(0,a.jsx)(n.h2,{id:"more",children:"More"}),"\n",(0,a.jsx)(n.h3,{id:"reduce",children:(0,a.jsx)(n.code,{children:"reduce"})}),"\n",(0,a.jsxs)(n.p,{children:["We can use the ",(0,a.jsx)(n.code,{children:"reduce"})," method to modify the input types of functions.\nThis comes especially handy when dealing with generated functions like those from the CRUD helpers from the Prisma runtime.\nBy default, Prisma generates types that supports the whole suite of usecases one might have on a CRUD operation such as allowing creation of objects of related types in a single operation.\nWe don't always want this and in our case, we want to prevent users from being able to create buckets, which are protected, through the ",(0,a.jsx)(n.code,{children:"create_idea"})," materializer which's public."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'mutation CIdea {\n  create_idea(\n    data: {\n      # we want to prevent bucket creation through `create_idea`\n      bucket: {\n        create: {name: "Backlog"}\n      }, \n      authorEmail: "asdf@as.df", \n      name: "Add support for WASM GC"\n    }\n  ) {\n    id\n    name\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Even though the ",(0,a.jsx)(n.code,{children:"reduce"})," method doesn't allow us to change the shape of the type, we can change the types of members and importantly here, hide the ones we don't need."]}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"typescript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'typegraph("roadmap", (g) => {\n  // ...\n  g.expose(\n    {\n      // ..\n      "create_idea": db.create(idea).reduce({\n        "data": {\n          // `g.inherit` specifies that we keep the member \n          // type of the original \n          "name": g.inherit(),\n          "authorEmail": g.inherit(),\n          "votes": g.inherit(),\n          "bucket": {\n            "connect": g.inherit(),\n            // by omitting the `create` member, we hide it\n          }\n        }\n      }),\n      // ..\n    }, pub\n  );\n\n});\n'})})}),(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@typegraph()\ndef roadmap(g: Graph):\n    # ..\n    g.expose(\n        pub,\n        # ..\n        create_idea=db.create(idea).reduce({\n            "data": {\n                # `g.inherit` specifies that we keep the member \n                # type of the original\n                "name": g.inherit(),\n                "authorEmail": g.inherit(),\n                "votes": g.inherit(),\n                "bucket": {\n                    "connect": g.inherit(),\n                    # by omitting the `create` member, we hide it\n                }\n            }\n        }),\n        # ..\n    )\n\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Requests are now only able to ",(0,a.jsx)(n.code,{children:"connect"})," new ideas with pre-existing buckets and won't be able to create them."]}),"\n",(0,a.jsx)(s.Z,{typegraph:"roadmap-reduce",python:t(43976),query:t(32753)}),"\n",(0,a.jsx)(n.h3,{id:"execute",children:(0,a.jsx)(n.code,{children:"execute"})}),"\n",(0,a.jsxs)(n.p,{children:["You'll notice that we had set the ",(0,a.jsx)(n.code,{children:"importance"})," field on votes as optional.\nThis is to allow users to just up-vote an idea from the main list without opening a form.\nIf they want to add importance or a description to their vote at a later point, we want to update their already existing vote.\nIt should be easy to expose a materializer for this using Prisma's ",(0,a.jsx)(n.code,{children:"db.update"})," helper and ",(0,a.jsx)(n.code,{children:"reduce"})," to restrict changes to only those field.\nBut we'll take this opportunity to explore the feature of the Prisma runtime to execute raw queries."]}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"typescript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import * as effects from "@typegraph/sdk/effects";\n\ntypegraph("roadmap", (g) => {\n  // ...\n  g.expose(\n    {\n      // ..\n      "set_vote_importance": db.execute(\n        // query parameters are matched by name from the input type\n        \'UPDATE "vote" SET importance = ${importance} WHERE id = ${vote_id}::uuid\',\n        // our input type\n        t.struct({\n          "vote_id": t.uuid(),\n          "importance": t.enum_(["medium", "important", "critical"]),\n        }),\n        // we use effects to signal what kind of operation we\'re doing\n        // updates and creates will be exposed as mutations in GraphQl\n        // the boolean signals that the query is idempotent\n        effects.update(true), \n      )\n      // ..\n    }, pub\n  );\n\n});\n'})})}),(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typegraph.gen.exports.runtimes import EffectUpdate\n\n@typegraph()\ndef roadmap(g: Graph):\n    # ..\n    g.expose(\n        pub,\n        # ..\n        set_vote_importance=db.execute(\n            # query parameters are matched by name from the input typ\n            \'UPDATE "vote" SET importance = ${importance} WHERE id = ${vote_id}::uuid\',\n            # our input type\n            t.struct({\n                "vote_id": t.uuid(),\n                "importance": t.enum(["medium", "important", "critical"]),\n            }),\n            # we use effects to signal what kind of operation we\'re doing\n            # updates and creates will be exposed as mutations in GraphQl\n            # the boolean signals that the query is idempotent\n            EffectUpdate(True),\n        ),\n        # ..\n    )\n\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"Our query is exposed like any other materializer in the GraphQl api."}),"\n",(0,a.jsx)(s.Z,{typegraph:"roadmap-execute",python:t(37051),query:t(90978)}),"\n",(0,a.jsx)(n.h3,{id:"rest",children:(0,a.jsx)(n.code,{children:"rest"})}),"\n",(0,a.jsxs)(n.p,{children:["We can easily expose an HTTP API for our typegraph using the ",(0,a.jsx)(n.code,{children:"g.rest"})," method.\nIt takes a string describe a graphql query to be executed when the http path is requested."]}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"typescript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'typegraph("roadmap", (g) => {\n  // ...\n  \n  g.rest(\n    `\n        query get_buckets {\n            get_buckets {\n                id\n                name\n                ideas {\n                    id\n                    name\n                    authorEmail\n                }\n            }\n        }\n    `\n  )\n  g.rest(\n    // query parameters present\n    // expects a request of the type `roadmap/rest/get_bucket?id=uuidstr`\n    `\n        query get_bucket($id: Integer) {\n            get_bucket(where:{\n                id: $id\n            }) {\n                id\n                name\n                ideas {\n                    id\n                    name\n                    authorEmail\n                }\n            }\n        }\n    `\n  )\n});\n'})})}),(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@typegraph()\ndef roadmap(g: Graph):\n    # ..\n    g.rest(\n        """\n        query get_buckets {\n            get_buckets {\n                id \n                name\n                ideas {\n                    id\n                    name\n                    authorEmail\n                }\n            }\n        }\n        """\n    )\n    g.rest(\n        # query parameters present\n        # expects a request of the type `roadmap/rest/get_bucket?id=uuidstr`\n        """\n        query get_bucket($id: Integer) {\n            get_bucket(where:{\n                id: $id\n            }) {\n                id \n                name\n                ideas {\n                    id\n                    name\n                    authorEmail\n                }\n            }\n        }\n        """\n    )\n\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["The exposed query is served at the path ",(0,a.jsx)(n.code,{children:"{typegate_url}/{typegraph_name}/rest/{query_name}"}),".\nAny parameters that the query takes are processed from the search params of the request."]}),"\n","\n",(0,a.jsx)(n.h3,{id:"import",children:(0,a.jsx)(n.code,{children:"import"})}),"\n",(0,a.jsxs)(n.p,{children:["So far, the materializers we've looked at have been generated by helpers like the CRUD helpers from the Prisma runtime or the the Random runtime's ",(0,a.jsx)(n.code,{children:"generate"})," helper.\nThe ",(0,a.jsx)(n.code,{children:"deno.policy"})," function we used for authoring policies was also based on function objects.\nAll these helpers are shorthands for creating function objects and now we'll look at how to roll a custom function ourselves.\nWe'll be using the Deno runtime to run our code."]}),"\n",(0,a.jsxs)(n.p,{children:["Instead of including the code inline through a string, the Deno runtime allows us to import modules from disk.\nOur modules are allowed to use ESM imports to access libraries on different registries like ",(0,a.jsx)(n.code,{children:"npm"})," and ",(0,a.jsx)(n.code,{children:"deno.land"}),".\nWe'll use these features to write a simple materializer that converts markdown to html."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import * as marked from "https://deno.land/x/marked/mod.ts";\n\nexport function parse({ raw }: { raw: string }): string {\n  return marked.parse(raw);\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"We'll expose our module using the deno runtime."}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"typescript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'typegraph("roadmap", (g) => {\n  // ...\n  g.expose(\n    {\n      // ..\n      "parse_markdown": deno.import(\n          t.struct({"raw": t.string()}),\n          t.string(),\n          {\n            name: "parse",\n            // the path is parsed relative to the typegraph file\n            module: "md2html.ts",\n          }\n        ),\n      // ..\n    }, pub\n  );\n});\n'})})}),(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@typegraph()\ndef roadmap(g: Graph):\n    g.expose(\n        pub,\n        # ..\n        parse_markdown=deno.import_(\n            t.struct({"raw": t.string()}),\n            t.string(),\n            # the path is parsed relative to the typegraph file\n            module="md2html.ts",\n            name="parse",\n        ),\n    )\n\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"We can now access our func through the GraphQl api."}),"\n",(0,a.jsx)(s.Z,{typegraph:"roadmap-func",python:t(1157),query:t(35192)}),"\n","\n"]})}function g(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},57114:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});t(50959);var a=t(45924);const i={tabItem:"tabItem_zPeR"};var r=t(11527);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,o),hidden:t,children:n})}},46153:(e,n,t)=>{"use strict";t.d(n,{r:()=>i});t(50959);var a=t(11527);function i(e){let{name:n,choices:t,choice:i,onChange:r,className:o}=e;return(0,a.jsx)("ul",{className:`pl-0 m-0 list-none w-full ${o??""}`,children:Object.entries(t).map((e=>{let[t,o]=e;return(0,a.jsx)("li",{className:"inline-block rounded-md overflow-clip mr-1",children:(0,a.jsx)("div",{children:(0,a.jsxs)("label",{className:"cursor-pointer",children:[(0,a.jsx)("input",{type:"radio",name:n,value:t,checked:t===i,onChange:()=>r(t),className:"hidden peer"}),(0,a.jsx)("div",{className:"px-3 py-1 bg-slate-100 peer-checked:bg-metared peer-checked:text-white",children:o})]})})},t)}))})}},48893:(e,n,t)=>{"use strict";t.d(n,{Z:()=>y});var a=t(50959),i=t(52691),r=t(45197),o=t(14899),s=t(86117),d=t(33961),l=t(11527);const c=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function u(e){const{queryEditor:n,variableEditor:t,headerEditor:i}=(0,d._i)({nonNull:!0}),[r,o]=(0,a.useState)(e.defaultTab),s=(0,d.Xd)({onCopyQuery:e.onCopyQuery}),u=(0,d.fE)();return(0,a.useEffect)((()=>{t&&c(t)}),[r,t]),(0,a.useEffect)((()=>{i&&c(i)}),[r,i]),(0,a.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("extraKeys",{"Alt-G":()=>{n.replaceSelection("@")}}),n.setOption("gutters",[]),n.on("change",c),c(n))}),[n]),(0,a.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("gutters",[]),t.on("change",c))}),[t]),(0,a.useEffect)((()=>{i&&(i.setOption("lineNumbers",!1),i.setOption("gutters",[]),i.on("change",c))}),[i]),(0,l.jsx)(d.u.Provider,{children:(0,l.jsxs)("div",{className:"graphiql-editors",children:[(0,l.jsx)("section",{className:"graphiql-query-editor shadow-sm","aria-label":"Query Editor",children:(0,l.jsxs)("div",{className:"graphiql-query-editor-wrapper",children:[(0,l.jsx)(d.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),(0,l.jsxs)("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands",children:[(0,l.jsx)(d._8,{}),(0,l.jsx)(d.wC,{onClick:()=>u(),label:"Prettify query (Shift-Ctrl-P)",children:(0,l.jsx)(d.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})}),(0,l.jsx)(d.wC,{onClick:()=>s(),label:"Copy query (Shift-Ctrl-C)",children:(0,l.jsx)(d.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"})})]})]})}),e.noTool?null:(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)("div",{className:"graphiql-editor-tools p-0 text-sm ",children:(0,l.jsxs)("div",{className:"graphiql-editor-tools-tabs",children:[(0,l.jsx)("div",{className:("variables"===r?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("variables"===r?"":"variables")},children:"Variables"}),(0,l.jsx)("div",{className:("headers"===r?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("headers"===r?"":"headers")},children:"Headers"})]})}),(0,l.jsxs)("section",{className:"graphiql-editor-tool "+(r&&r.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===r?"Variables":"Headers",children:[(0,l.jsx)(d.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==r,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),(0,l.jsx)(d.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==r,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})]})]})]})})}class p{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,n){this.map.has(e)||(this.length+=1),this.map.set(e,n)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var h=t(46153);function m(){return(0,d.JB)({nonNull:!0}).isFetching?(0,l.jsx)(d.$j,{}):null}const g={typegraph:"Typegraph",playground:"Playground"};function f(e){let{typegraph:n,query:t,code:r,codeLanguage:c,codeFileUrl:f,headers:y={},variables:b={},tab:v="",noTool:x=!1,defaultMode:k=null}=e;const{siteConfig:{customFields:{tgUrl:j}}}=(0,o.Z)(),w=(0,a.useMemo)((()=>new p),[]),S=(0,a.useMemo)((()=>(0,i.nq)({url:`${j}/${n}`})),[]),[_,E]=(0,a.useState)(k);return(0,l.jsxs)("div",{className:"@container miniql mb-5",children:[k?(0,l.jsx)(h.r,{name:"mode",choices:g,choice:_,onChange:E,className:"mb-2"}):null,(0,l.jsx)(d.j$,{fetcher:S,defaultQuery:t.loc?.source.body.trim(),defaultHeaders:JSON.stringify(y),shouldPersistHeaders:!0,variables:JSON.stringify(b),storage:w,children:(0,l.jsxs)("div",{className:(k?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first",children:[k&&"typegraph"!==_?null:(0,l.jsxs)("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0",children:[f?(0,l.jsxs)("div",{className:"p-2 text-xs font-light",children:["See/edit full code on"," ",(0,l.jsx)("a",{href:`https://github.com/metatypedev/metatype/blob/main/${f}`,children:f})]}):null,r?(0,l.jsx)(s.Z,{language:c,wrap:!0,className:"flex-1",children:r}):null]}),k&&"playground"!==_?null:(0,l.jsxs)("div",{className:"flex flex-col graphiql-container",children:[(0,l.jsx)("div",{className:"flex-1 graphiql-session",children:(0,l.jsx)(u,{defaultTab:v,noTool:x})}),(0,l.jsxs)("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg",children:[(0,l.jsx)(m,{}),(0,l.jsx)(d.iB,{})]})]})]})})]})}function y(e){return(0,l.jsx)(r.Z,{fallback:(0,l.jsx)("div",{children:"Loading..."}),children:()=>(0,l.jsx)(f,{...e})})}},5081:(e,n,t)=>{"use strict";t.d(n,{Z:()=>w});var a=t(50959),i=t(45924),r=t(89071),o=t(28903),s=t(6468),d=t(77358),l=t(93139),c=t(45574);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const i=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,d._X)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=p(e),[o,d]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[l,u]=m({queryString:t,groupId:i}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,c.Nk)(t);return[i,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),y=(()=>{const e=l??g;return h({value:e,tabValues:r})?e:null})();(0,s.Z)((()=>{y&&d(y)}),[y]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),f(e)}),[u,f,r]),tabValues:r}}var f=t(40967);const y={tabList:"tabList_eBZj",tabItem:"tabItem_t45a"};var b=t(11527);function v(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.o5)(),c=e=>{const n=e.currentTarget,t=d.indexOf(n),i=s[t].value;i!==a&&(l(n),o(i))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>d.push(e),onKeyDown:u,onClick:c,...r,className:(0,i.Z)("tabs__item",y.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function k(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,i.Z)("tabs-container",y.tabList),children:[(0,b.jsx)(v,{...e,...n}),(0,b.jsx)(x,{...e,...n})]})}function j(e){const n=(0,f.Z)();return(0,b.jsx)(k,{...e,children:u(e.children)},String(n))}function w(e){let{children:n}=e;return(0,b.jsx)(j,{groupID:"sdk",queryString:"sdk",defaultValue:"typescript",values:[{label:"Typescript SDK",value:"typescript"},{label:"Python SDK",value:"python"}],children:n})}},3643:(e,n,t)=>{"use strict";t.d(n,{Z:()=>r});var a=t(48893),i=(t(50959),t(11527));function r(e){let{python:n,...t}=e;return(0,i.jsx)(a.Z,{code:n.content,codeLanguage:"python",codeFileUrl:n.path,...t})}},90978:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"UVote"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"set_vote_importance"},arguments:[{kind:"Argument",name:{kind:"Name",value:"vote_id"},value:{kind:"StringValue",value:"2f3207e0-6cb6-4aaf-a759-037cdfe48f0c",block:!1}},{kind:"Argument",name:{kind:"Name",value:"importance"},value:{kind:"StringValue",value:"medium",block:!1}}],directives:[]}]}}],loc:{start:0,end:124}};n.loc.source={body:'mutation UVote {\n  set_vote_importance(\n    vote_id: "2f3207e0-6cb6-4aaf-a759-037cdfe48f0c",\n    importance: "medium"\n  )\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&n.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var a={};function i(e,n){for(var t=0;t<e.definitions.length;t++){var a=e.definitions[t];if(a.name&&a.name.value==n)return a}}n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),a[e.name.value]=n}})),e.exports=n,e.exports.UVote=function(e,n){var t={kind:e.kind,definitions:[i(e,n)]};e.hasOwnProperty("loc")&&(t.loc=e.loc);var r=a[n]||new Set,o=new Set,s=new Set;for(r.forEach((function(e){s.add(e)}));s.size>0;){var d=s;s=new Set,d.forEach((function(e){o.has(e)||(o.add(e),(a[e]||new Set).forEach((function(e){s.add(e)})))}))}return o.forEach((function(n){var a=i(e,n);a&&t.definitions.push(a)})),t}(n,"UVote")},35192:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parse_markdown"},arguments:[{kind:"Argument",name:{kind:"Name",value:"raw"},value:{kind:"StringValue",value:"hello",block:!1}}],directives:[]}]}}],loc:{start:0,end:41}};n.loc.source={body:'query {\n  parse_markdown(raw: "hello")\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&n.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var a={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),a[e.name.value]=n}})),e.exports=n},41181:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"CBucket"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"create_bucket"},arguments:[{kind:"Argument",name:{kind:"Name",value:"data"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"name"},value:{kind:"StringValue",value:"Backlog",block:!1}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:92}};n.loc.source={body:'mutation CBucket {\n  create_bucket(\n    data: {name: "Backlog"}\n  ) {\n    id\n    name\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&n.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var a={};function i(e,n){for(var t=0;t<e.definitions.length;t++){var a=e.definitions[t];if(a.name&&a.name.value==n)return a}}n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),a[e.name.value]=n}})),e.exports=n,e.exports.CBucket=function(e,n){var t={kind:e.kind,definitions:[i(e,n)]};e.hasOwnProperty("loc")&&(t.loc=e.loc);var r=a[n]||new Set,o=new Set,s=new Set;for(r.forEach((function(e){s.add(e)}));s.size>0;){var d=s;s=new Set,d.forEach((function(e){o.has(e)||(o.add(e),(a[e]||new Set).forEach((function(e){s.add(e)})))}))}return o.forEach((function(n){var a=i(e,n);a&&t.definitions.push(a)})),t}(n,"CBucket")},6700:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"CBucket"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"create_bucket"},arguments:[{kind:"Argument",name:{kind:"Name",value:"data"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"name"},value:{kind:"StringValue",value:"Backlog",block:!1}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}},{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"CIdea"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"create_idea"},arguments:[{kind:"Argument",name:{kind:"Name",value:"data"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"bucket"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"connect"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"id"},value:{kind:"IntValue",value:"1"}}]}}]}},{kind:"ObjectField",name:{kind:"Name",value:"authorEmail"},value:{kind:"StringValue",value:"deng@xi.ng",block:!1}},{kind:"ObjectField",name:{kind:"Name",value:"name"},value:{kind:"StringValue",value:"Add support for WASM Gc",block:!1}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:275}};n.loc.source={body:'mutation CBucket {\n  create_bucket(data: {name:"Backlog"}){\n    id\n    name\n  }\n}\n\nmutation CIdea {\n  create_idea(data:{\n    bucket: {\n      connect:{\n      \tid: 1,\n      }\n    },\n    authorEmail: "deng@xi.ng",\n    name: "Add support for WASM Gc"\n  }){\n    id\n    name\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&n.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var a={};function i(e,n){for(var t=0;t<e.definitions.length;t++){var a=e.definitions[t];if(a.name&&a.name.value==n)return a}}function r(e,n){var t={kind:e.kind,definitions:[i(e,n)]};e.hasOwnProperty("loc")&&(t.loc=e.loc);var r=a[n]||new Set,o=new Set,s=new Set;for(r.forEach((function(e){s.add(e)}));s.size>0;){var d=s;s=new Set,d.forEach((function(e){o.has(e)||(o.add(e),(a[e]||new Set).forEach((function(e){s.add(e)})))}))}return o.forEach((function(n){var a=i(e,n);a&&t.definitions.push(a)})),t}n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),a[e.name.value]=n}})),e.exports=n,e.exports.CBucket=r(n,"CBucket"),e.exports.CIdea=r(n,"CIdea")},34467:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"get_idea"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"authorEmail"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:58}};n.loc.source={body:"query {\n  get_idea{\n    id\n    name\n    authorEmail\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&n.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var a={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),a[e.name.value]=n}})),e.exports=n},32753:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"CIdea"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"create_idea"},arguments:[{kind:"Argument",name:{kind:"Name",value:"data"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"bucket"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"connect"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"id"},value:{kind:"IntValue",value:"1"}}]}}]}},{kind:"ObjectField",name:{kind:"Name",value:"authorEmail"},value:{kind:"StringValue",value:"deng@xi.ng",block:!1}},{kind:"ObjectField",name:{kind:"Name",value:"name"},value:{kind:"StringValue",value:"Add support for WASM Gc",block:!1}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:201}};n.loc.source={body:'mutation CIdea {\n  create_idea(\n    data: {\n      bucket: {\n        connect: {id: 1}\n      }, \n      authorEmail: "deng@xi.ng", \n      name: "Add support for WASM Gc"\n    }\n  ) {\n    id\n    name\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var a=e.type;"NamedType"===a.kind&&n.add(a.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var a={};function i(e,n){for(var t=0;t<e.definitions.length;t++){var a=e.definitions[t];if(a.name&&a.name.value==n)return a}}n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),a[e.name.value]=n}})),e.exports=n,e.exports.CIdea=function(e,n){var t={kind:e.kind,definitions:[i(e,n)]};e.hasOwnProperty("loc")&&(t.loc=e.loc);var r=a[n]||new Set,o=new Set,s=new Set;for(r.forEach((function(e){s.add(e)}));s.size>0;){var d=s;s=new Set,d.forEach((function(e){o.has(e)||(o.add(e),(a[e]||new Set).forEach((function(e){s.add(e)})))}))}return o.forEach((function(n){var a=i(e,n);a&&t.definitions.push(a)})),t}(n,"CIdea")},37051:e=>{e.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.runtimes.deno import DenoRuntime\nfrom typegraph.graph.params import Auth\nfrom typegraph.providers.prisma import PrismaRuntime\nfrom typegraph.gen.exports.runtimes import EffectUpdate\nfrom typegraph.graph.params import Cors\n\n\n@typegraph(\n)\ndef roadmap(g: Graph):\n  pub = Policy.public()\n  db = PrismaRuntime("db", "POSTGRES")\n  deno = DenoRuntime()\n\n  bucket = t.struct(\n    {\n      "id": t.integer(as_id=True, config={"auto": True}),\n      "name": t.string(),\n      "ideas": t.list(g.ref("idea")),\n    },\n    name="bucket",\n  )\n\n  idea = t.struct(\n    {\n      "id": t.uuid(as_id=True, config={"auto": True}),\n      "name": t.string(),\n      "authorEmail": t.email(),\n      "votes": t.list(g.ref("vote")),\n      "bucket": g.ref("bucket"),\n    },\n    name="idea",\n  )\n\n  vote = t.struct(\n    {\n      "id": t.uuid(as_id=True, config={"auto": True}),\n      "authorEmail": t.email(),\n      "importance": t.enum(\n        ["medium", "important", "critical"]\n      ).optional(),\n      "desc": t.string().optional(),\n      "idea": g.ref("idea"),\n    },\n    name="vote",\n  )\n\n  g.auth(Auth.basic(["andim"]))\n\n  admins = deno.policy(\n    "admins",\n    """\n  (_args, { context }) => !!context.username\n""",\n  )\n\n  g.expose(\n    pub,\n    create_bucket=db.create(bucket).with_policy(admins),\n    get_buckets=db.find_many(bucket),\n    get_bucket=db.find_first(bucket),\n    get_idea=db.find_many(idea),\n    create_idea=db.create(idea).reduce(\n      {\n        "data": {\n          "name": g.inherit(),\n          "authorEmail": g.inherit(),\n          "votes": g.inherit(),\n          "bucket": {"connect": g.inherit()},\n        }\n      }\n    ),\n    create_vote=db.create(vote),\n    set_vote_importance=db.execute(\n      \'UPDATE "vote" SET importance = ${importance} WHERE id = ${vote_id}::uuid\',\n      t.struct(\n        {\n          "vote_id": t.uuid(),\n          "importance": t.enum(\n            ["medium", "important", "critical"]\n          ),\n        }\n      ),\n      EffectUpdate(True),\n    ),\n    get_context=deno.identity(\n      t.struct(\n        {\n          "username": t.string()\n          .optional()\n          .from_context("username")\n        }\n      )\n    ),\n  )',path:"website/docs/tutorials/building-feature-roadmap-api/execute.py"}},1157:e=>{e.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.runtimes.deno import DenoRuntime\n\n\n\n@typegraph(\n)\ndef roadmap(g: Graph):\n  deno = DenoRuntime()\n\n\n  g.expose(\n    pub,\n    parse_markdown=deno.import_(\n      t.struct({"raw": t.string()}),\n      t.string(),\n      module="md2html.ts.src",\n      name="parse",\n    ),\n  )',path:"website/docs/tutorials/building-feature-roadmap-api/func.py"}},86960:e=>{e.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.runtimes.deno import DenoRuntime\nfrom typegraph.graph.params import Auth\nfrom typegraph.providers.prisma import PrismaRuntime\nfrom typegraph.graph.params import Cors\n\n\n@typegraph(\n)\ndef roadmap(g: Graph):\n  pub = Policy.public()\n  db = PrismaRuntime("db", "POSTGRES")\n  deno = DenoRuntime()\n\n  bucket = t.struct(\n    {\n      # auto generate ids during creation\n      "id": t.integer(as_id=True, config={"auto": True}),\n      "name": t.string(),\n      "ideas": t.list(g.ref("idea")),\n    },\n    name="bucket",\n  )\n\n  idea = t.struct(\n    {\n      "id": t.uuid(as_id=True, config={"auto": True}),\n      "name": t.string(),\n      "authorEmail": t.email(),\n      "votes": t.list(g.ref("vote")),\n      "bucket": g.ref("bucket"),\n    },\n    name="idea",\n  )\n\n  vote = t.struct(\n    {\n      "id": t.uuid(as_id=True, config={"auto": True}),\n      "authorEmail": t.email(),\n      "importance": t.enum(\n        ["medium", "important", "critical"]\n      ).optional(),\n      "desc": t.string().optional(),\n      "idea": g.ref("idea"),\n    },\n    name="vote",\n  )\n\n  g.auth(Auth.basic(["andim"]))\n\n  admins = deno.policy(\n    "admins",\n    """\n  (_args, { context }) => !!context.username\n""",\n  )\n\n  g.expose(\n    pub,\n    create_bucket=db.create(bucket).with_policy(admins),\n    get_buckets=db.find_many(bucket),\n    get_idea=db.find_many(idea),\n    create_idea=db.create(idea),\n    create_vote=db.create(vote),\n  )',path:"website/docs/tutorials/building-feature-roadmap-api/policies.py"}},49981:e=>{e.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.providers.prisma import PrismaRuntime\nfrom typegraph.graph.params import Cors\n\n\n@typegraph(\n)\ndef roadmap_py(g: Graph):\n  pub = Policy.public()\n  db = PrismaRuntime("db", "POSTGRES")\n\n  bucket = t.struct(\n    {\n      "id": t.integer(as_id=True, config={"auto": True}),\n      "name": t.string(),\n      "ideas": t.list(g.ref("idea")),\n    },\n    name="bucket",\n  )\n  idea = t.struct(\n    {\n      "id": t.uuid(as_id=True, config={"auto": True}),\n      "name": t.string(),\n      "authorEmail": t.email(),\n      "votes": t.list(g.ref("vote")),\n      "bucket": g.ref("bucket"),\n    },\n    name="idea",\n  )\n  vote = t.struct(\n    {\n      "id": t.uuid(as_id=True, config={"auto": True}),\n      "authorEmail": t.email(),\n      "importance": t.enum(\n        ["medium", "important", "critical"]\n      ).optional(),\n      "desc": t.string().optional(),\n      "idea": g.ref("idea"),\n    },\n    name="vote",\n  )\n\n  g.expose(\n    pub,\n    get_buckets=db.find_many(bucket),\n    create_bucket=db.create(bucket),\n    get_idea=db.find_many(idea),\n    create_idea=db.create(idea),\n    get_vote=db.create(vote),\n  )',path:"website/docs/tutorials/building-feature-roadmap-api/prisma.py"}},35508:e=>{e.exports={content:'from typegraph import typegraph, t, Graph\nfrom typegraph.runtimes.random import RandomRuntime\nfrom typegraph.graph.params import Cors\n\n\n@typegraph(\n)\ndef roadmap(g: Graph):\n  _bucket = t.struct(\n    {\n      "id": t.integer(as_id=True),\n      "name": t.string(),\n    }\n  )\n  idea = t.struct(\n    {\n      "id": t.uuid(\n        as_id=True\n      ),  # email is just a shorthand alias for `t.string({format: "uuid"})`\n      "name": t.string(),\n      "authorEmail": t.email(),  # another string shorthand\n    }\n  )\n  _vote = t.struct(\n    {\n      "id": t.uuid(),\n      "authorEmail": t.email(),\n      "importance": t.enum(\n        ["medium", "important", "critical"]\n      ).optional(),  # `enum_` is also a shorthand over `t.string`\n      "createdAt": t.datetime(),\n      "desc": t.string().optional(),  # makes it optional\n    }\n  )\n  random = RandomRuntime()\n  g.expose(get_idea=random.gen(idea))',path:"website/docs/tutorials/building-feature-roadmap-api/random.py"}},43976:e=>{e.exports={content:"",path:"website/docs/tutorials/building-feature-roadmap-api/reduce.py"}}}]);