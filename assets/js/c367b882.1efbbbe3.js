(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7100],{66922:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var i=t(86070),r=t(25710),o=t(65671);const l={},c="gRPC Runtime",s={id:"reference/runtimes/grpc/index",title:"gRPC Runtime",description:"Overview",source:"@site/docs/reference/runtimes/grpc/index.mdx",sourceDirName:"reference/runtimes/grpc",slug:"/reference/runtimes/grpc/",permalink:"/docs/reference/runtimes/grpc/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/docs/metatype.dev/docs/reference/runtimes/grpc/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"GraphQL",permalink:"/docs/reference/runtimes/graphql/"},next:{title:"HTTP/REST",permalink:"/docs/reference/runtimes/http/"}},a={},d=[{value:"Overview",id:"overview",level:2},{value:"Variables",id:"variables",level:2},{value:"<code>proto_file</code>",id:"proto_file",level:3},{value:"<code>endpoint</code>",id:"endpoint",level:3},{value:"Method",id:"method",level:2},{value:"<code>call</code>",id:"call",level:3},{value:"Example",id:"example",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"grpc-runtime",children:"gRPC Runtime"}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GrpcRuntime"})," allows your Typegraphs to interact with external gRPC services. Similar to the HTTP runtime, this enables integrating gRPC services into your graph through a unified interface."]}),"\n",(0,i.jsx)(n.p,{children:"Common use cases include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Consuming a gRPC API within a Typegraph"}),"\n",(0,i.jsx)(n.li,{children:"Calling gRPC methods programmatically via a type-safe structure"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In a ",(0,i.jsx)(n.code,{children:"GrpcRuntime"}),", several key parameters help define how the graph interacts with the service, such as the gRPC ",(0,i.jsx)(n.strong,{children:"endpoint"}),", the ",(0,i.jsx)(n.strong,{children:"protofile"})," that describes the service, and the ",(0,i.jsx)(n.strong,{children:"method"})," to be called."]}),"\n",(0,i.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.h3,{id:"proto_file",children:(0,i.jsx)(n.code,{children:"proto_file"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"proto_file"})," is the path to the ",(0,i.jsx)(n.code,{children:".proto"})," file that defines the gRPC service. This file contains the service definitions, including message types and method signatures, that the Typegraph will use to communicate with the gRPC server."]}),"\n",(0,i.jsx)(n.h3,{id:"endpoint",children:(0,i.jsx)(n.code,{children:"endpoint"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"endpoint"})," is the address of the gRPC server that the Typegraph will communicate with. It uses the format ",(0,i.jsx)(n.code,{children:"tcp://<host>:<port>"}),", and is specified to point to the correct server and port where the gRPC service is running."]}),"\n",(0,i.jsx)(n.h2,{id:"method",children:"Method"}),"\n",(0,i.jsx)(n.h3,{id:"call",children:(0,i.jsx)(n.code,{children:"call"})}),"\n",(0,i.jsxs)(n.p,{children:["This method creates a typegraph function for gRPC method calls. It accepts the full path to the gRPC method, usually in the form ",(0,i.jsx)(n.code,{children:"/package_name.service_name/method_name"}),". The ",(0,i.jsx)(n.strong,{children:"package_name"})," refers to the package defined in the ",(0,i.jsx)(n.code,{children:".proto"})," file, and it must be included when calling the method. In the example below, ",(0,i.jsx)(n.code,{children:"greet"})," will call the ",(0,i.jsx)(n.code,{children:"SayHello"})," method of the ",(0,i.jsx)(n.code,{children:"Greeter"})," service within the ",(0,i.jsx)(n.code,{children:"helloworld"})," package, as defined in the ",(0,i.jsx)(n.code,{children:"helloworld.proto"})," file."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(o.A,{typegraph:"grpc",typescript:t(26395),python:t(97837),query:t(85631)})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65671:(e,n,t)=>{"use strict";t.d(n,{A:()=>o});var i=t(98302),r=(t(30758),t(86070));function o(e){let{python:n,typescript:t,rust:o,...l}=e;const c=[n&&{content:n.content,codeLanguage:"python",codeFileUrl:n.path},t&&{content:t.content,codeLanguage:"typescript",codeFileUrl:t.path},o&&{content:o.content,codeLanguage:"rust",codeFileUrl:o.path}].filter((e=>!!e));return(0,r.jsx)(i.A,{code:0==c.length?void 0:c,...l})}},85631:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"greet"},arguments:[{kind:"Argument",name:{kind:"Name",value:"name"},value:{kind:"StringValue",value:"Metatype",block:!1}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"message"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:54}};n.loc.source={body:'query {\n  greet(name: "Metatype") {\n    message\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n},97837:e=>{e.exports={content:'# highlight-next-line\nfrom typegraph.runtimes.grpc import GrpcRuntime\n\n\n@typegraph(\n)\ndef grpc(g: Graph):\n  endpoint = "tcp://localhost:4770"\n  proto_file = "proto/helloworld.proto"\n\n  # highlight-next-line\n  grpc_runtime = GrpcRuntime(proto_file, endpoint)\n\n  g.expose(\n    Policy.public(),\n    greet=grpc_runtime.call("/helloworld.Greeter/SayHello"),\n  )',path:"../examples/typegraphs/grpc.py"}},26395:e=>{e.exports={content:'export const tg = await typegraph(\n  {\n    name: "grpc",\n  },\n  (g) => {\n    const endpoint = "tcp://localhost:4770";\n    const proto_file = "proto/helloworld.proto";\n\n    // highlight-next-line\n    const grpc_runtime = new GrpcRuntime(proto_file, endpoint);\n\n    g.expose(\n      {\n        greet: grpc_runtime.call("/helloworld.Greeter/SayHello"),\n      },\n      Policy.public(),\n    );\n  },\n);',path:"../examples/typegraphs/grpc.ts"}}}]);