(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6574],{18601:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>y,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var o=n(86070),r=n(25710),s=n(79752),p=n(54006),a=n(69564);const i={},l="Programmatic deployment",c={id:"guides/programmatic-deployment/index",title:"Programmatic deployment",description:"The SDKs are complete enough to enable deploying typegraphs without using meta cli, the later being built as a convenience tool for everyday use.",source:"@site/docs/guides/programmatic-deployment/index.mdx",sourceDirName:"guides/programmatic-deployment",slug:"/guides/programmatic-deployment/",permalink:"/docs/guides/programmatic-deployment/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/guides/programmatic-deployment/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Importing External Modules",permalink:"/docs/guides/import-external-modules/"},next:{title:"Types",permalink:"/docs/reference/types/"}},d={},h=[{value:"Deploy typegraphs",id:"deploy-typegraphs",level:2},{value:"Undeploy typegraphs",id:"undeploy-typegraphs",level:2}];function g(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"programmatic-deployment",children:"Programmatic deployment"}),"\n",(0,o.jsxs)(t.p,{children:["The SDKs are complete enough to enable deploying typegraphs without using ",(0,o.jsx)(t.a,{href:"/docs/reference/meta-cli",children:"meta cli"}),", the later being built as a convenience tool for everyday use."]}),"\n",(0,o.jsx)(t.p,{children:"Common use cases:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Testing"}),"\n",(0,o.jsx)(t.li,{children:"Manage everything programmatically"}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"deploy-typegraphs",children:"Deploy typegraphs"}),"\n",(0,o.jsxs)(t.p,{children:["This can be done using the ",(0,o.jsx)(t.code,{children:"tgDeploy"}),"/",(0,o.jsx)(t.code,{children:"tg_deploy"})," function.",(0,o.jsx)(t.br,{}),"\n","You are required to provide the configurations and also handle migrations by yourself (if any)."]}),"\n",(0,o.jsxs)(s.Ay,{children:[(0,o.jsx)(p.A,{value:"python",children:(0,o.jsx)(a.A,{language:"python",children:n(41565).content})}),(0,o.jsx)(p.A,{value:"typescript",children:(0,o.jsx)(a.A,{language:"typescript",children:n(77067).content})})]}),"\n",(0,o.jsx)(t.h2,{id:"undeploy-typegraphs",children:"Undeploy typegraphs"}),"\n",(0,o.jsxs)(t.p,{children:["Similarly to the above, you can undeploy typegraphs using the ",(0,o.jsx)(t.code,{children:"tgRemove"}),"/",(0,o.jsx)(t.code,{children:"tg_remove"})," function."]}),"\n",(0,o.jsxs)(s.Ay,{children:[(0,o.jsx)(p.A,{value:"python",children:(0,o.jsx)(a.A,{language:"python",children:n(1926).content})}),(0,o.jsx)(p.A,{value:"typescript",children:(0,o.jsx)(a.A,{language:"typescript",children:n(11472).content})})]})]})}function y(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},79752:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>p,gc:()=>a});n(30758);var o=n(93098),r=n(99035),s=n(86070);function p(e){let{children:t}=e;const[n,p]=(0,o.e)();return(0,s.jsx)(r.mS,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:n,onChange:p,children:t})}function a(e){let{children:t}=e;const[n]=(0,o.e)();return(0,s.jsx)(r.q9,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:n,children:t})}},41565:e=>{e.exports={content:"",path:"typegate/tests/docs/how-tos/prog_deploy/prog_deploy.py"}},77067:e=>{e.exports={content:'import { Policy, t, typegraph } from "@typegraph/sdk/index.ts";\nimport { DenoRuntime } from "@typegraph/sdk/runtimes/deno.ts";\nimport * as path from "node:path";\nimport { BasicAuth, tgDeploy } from "@typegraph/sdk/tg_deploy.ts";\n\n// Your typegraph\nexport const tg = await typegraph("example", (g) => {\n  const deno = new DenoRuntime();\n  const pub = Policy.public();\n\n  g.expose(\n    {\n      sayHello: deno.import(t.struct({ name: t.string() }), t.string(), {\n        module: "scripts/say_hello.ts",\n        name: "sayHello",\n      }),\n    },\n    pub,\n  );\n});\n\n// Configure your deployment\nlet baseUrl = "<TYPEGATE_URL>";\nlet auth = new BasicAuth("<USERNAME>", "<PASSWORD>");\n\nconst config = {\n  typegate: {\n    url: baseUrl,\n    auth: auth,\n  },\n  typegraphPath: path.join(cwd, "path-to-typegraph.ts"),\n  prefix: "",\n  secrets: {},\n  migrationsDir: path.join("prisma-migrations", tg.name),\n  defaultMigrationAction: {\n    apply: true,\n    create: true,\n    reset: true, // allow destructive migrations\n  },\n};\n\n// Deploy to typegate\nconst deployResult = await tgDeploy(tg, config);',path:"typegate/tests/docs/how-tos/prog_deploy/prog_deploy.ts"}},1926:e=>{e.exports={content:"",path:"typegate/tests/docs/how-tos/prog_deploy/prog_remove.py"}},11472:e=>{e.exports={content:'import { typegraph } from "@typegraph/sdk/index.ts";\nimport { BasicAuth, tgRemove } from "@typegraph/sdk/tg_deploy.ts";\n\n// Your typegraph\nconst tg = await typegraph("example", (_g) => {\n  // ...\n});\n\n\n// Response from typegate,\nconst result = await tgRemove(tg.name, {\n  // pass the typegraph name\n  typegate: {\n    url: baseUrl,\n    auth: auth,\n  },\n});',path:"typegate/tests/docs/how-tos/prog_deploy/prog_remove.ts"}}}]);