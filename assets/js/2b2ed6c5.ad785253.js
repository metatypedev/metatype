(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3394],{17942:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>c,kt:()=>h});var a=n(50959);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},43726:(e,t,n)=>{"use strict";n.d(t,{r:()=>r});var a=n(50959);function r(e){let{name:t,choices:n,choice:r,onChange:i,className:o}=e;return a.createElement("ul",{className:`pl-0 m-0 list-none w-full ${o??""}`},Object.entries(n).map((e=>{let[n,o]=e;return a.createElement("li",{key:n,className:"inline-block rounded-md overflow-clip mr-1"},a.createElement("div",null,a.createElement("label",{className:"cursor-pointer"},a.createElement("input",{type:"radio",name:t,value:n,checked:n===r,onChange:()=>i(n),className:"hidden peer"}),a.createElement("div",{className:"px-3 py-1 bg-slate-100 peer-checked:bg-metared peer-checked:text-white"},o))))})))}},66360:(e,t,n)=>{"use strict";n.d(t,{Z:()=>y});var a=n(50959),r=n(55362),i=n(90430),o=n(85551),l=n(90116),s=n(14623);const p=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function c(e){const{queryEditor:t,variableEditor:n,headerEditor:r}=(0,s._i)({nonNull:!0}),[i,o]=(0,a.useState)(e.defaultTab),l=(0,s.Xd)({onCopyQuery:e.onCopyQuery}),c=(0,s.fE)();return(0,a.useEffect)((()=>{n&&p(n)}),[i,n]),(0,a.useEffect)((()=>{r&&p(r)}),[i,r]),(0,a.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("extraKeys",{"Alt-G":()=>{t.replaceSelection("@")}}),t.setOption("gutters",[]),t.on("change",p),p(t))}),[t]),(0,a.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("gutters",[]),n.on("change",p))}),[n]),(0,a.useEffect)((()=>{r&&(r.setOption("lineNumbers",!1),r.setOption("gutters",[]),r.on("change",p))}),[r]),a.createElement(s.u.Provider,null,a.createElement("div",{className:"graphiql-editors"},a.createElement("section",{className:"graphiql-query-editor shadow-sm","aria-label":"Query Editor"},a.createElement("div",{className:"graphiql-query-editor-wrapper"},a.createElement(s.WK,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),a.createElement("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands"},a.createElement(s._8,null),a.createElement(s.wC,{onClick:()=>c(),label:"Prettify query (Shift-Ctrl-P)"},a.createElement(s.Kt,{className:"graphiql-toolbar-icon","aria-hidden":"true"})),a.createElement(s.wC,{onClick:()=>l(),label:"Copy query (Shift-Ctrl-C)"},a.createElement(s.TI,{className:"graphiql-toolbar-icon","aria-hidden":"true"}))))),e.noTool?null:a.createElement(a.Fragment,null,a.createElement("div",{className:"graphiql-editor-tools p-0 text-sm "},a.createElement("div",{className:"graphiql-editor-tools-tabs"},a.createElement("div",{className:("variables"===i?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("variables"===i?"":"variables")}},"Variables"),a.createElement("div",{className:("headers"===i?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{o("headers"===i?"":"headers")}},"Headers"))),a.createElement("section",{className:"graphiql-editor-tool "+(i&&i.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===i?"Variables":"Headers"},a.createElement(s.hF,{editorTheme:e.editorTheme,isHidden:"variables"!==i,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),a.createElement(s.LA,{editorTheme:e.editorTheme,isHidden:"headers"!==i,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})))))}class m{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var d=n(43726);function u(){return(0,s.JB)({nonNull:!0}).isFetching?a.createElement(s.$j,null):null}const h={typegraph:"Typegraph",playground:"Playground"};function g(e){let{typegraph:t,query:n,code:i,codeLanguage:p,codeFileUrl:g,headers:y={},variables:f={},tab:b="",noTool:k=!1,defaultMode:N=null}=e;const{siteConfig:{customFields:{tgUrl:E}}}=(0,o.Z)(),v=(0,a.useMemo)((()=>new m),[]),x=(0,a.useMemo)((()=>(0,r.nq)({url:`${E}/${t}`})),[]),[w,O]=(0,a.useState)(N);return a.createElement("div",{className:"@container miniql mb-5"},N?a.createElement(d.r,{name:"mode",choices:h,choice:w,onChange:O,className:"mb-2"}):null,a.createElement(s.j$,{fetcher:x,defaultQuery:n.loc?.source.body.trim(),defaultHeaders:JSON.stringify(y),shouldPersistHeaders:!0,variables:JSON.stringify(f),storage:v},a.createElement("div",{className:(N?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first"},N&&"typegraph"!==w?null:a.createElement("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0"},g?a.createElement("div",{className:"p-2 text-xs font-light"},"See/edit full code on"," ",a.createElement("a",{href:`https://github.com/metatypedev/metatype/blob/main/${g}`},g)):null,i?a.createElement(l.Z,{language:p,wrap:!0,className:"flex-1"},i):null),N&&"playground"!==w?null:a.createElement("div",{className:"flex flex-col graphiql-container"},a.createElement("div",{className:"flex-1 graphiql-session"},a.createElement(c,{defaultTab:b,noTool:k})),a.createElement("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg"},a.createElement(u,null),a.createElement(s.iB,null))))))}function y(e){return a.createElement(i.Z,{fallback:a.createElement("div",null,"Loading...")},(()=>a.createElement(g,e)))}},31645:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var a=n(28957),r=n(66360),i=n(50959);function o(e){let{python:t,...n}=e;return i.createElement(r.Z,(0,a.Z)({code:t.content,codeLanguage:"python",codeFileUrl:t.path},n))}},5488:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(28957),r=(n(50959),n(17942)),i=(n(31645),n(90116));const o={sidebar_position:4},l="Import your existing APIs",s={unversionedId:"tutorials/import-your-existing-apis/index",id:"tutorials/import-your-existing-apis/index",title:"Import your existing APIs",description:"Let's summarize how far you progress made towards the chat-based app. The APIs should offer the following functionalities:",source:"@site/docs/tutorials/import-your-existing-apis/index.mdx",sourceDirName:"tutorials/import-your-existing-apis",slug:"/tutorials/import-your-existing-apis/",permalink:"/docs/tutorials/import-your-existing-apis/",draft:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/tutorials/import-your-existing-apis/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Adding more runtimes",permalink:"/docs/tutorials/adding-more-runtimes/"},next:{title:"Authentication and security",permalink:"/docs/tutorials/authentication-and-security/"}},p={},c=[{value:"Google importers",id:"google-importers",level:2},{value:"Effects",id:"effects",level:2},{value:"Introduction to typegraph_std",id:"introduction-to-typegraph_std",level:2}],m={toc:c},d="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"import-your-existing-apis"},"Import your existing APIs"),(0,r.kt)("p",null,"Let's summarize how far you progress made towards the chat-based app. The APIs should offer the following functionalities:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"list messages \u2705"),(0,r.kt)("li",{parentName:"ul"},"create a message \u2705"),(0,r.kt)("li",{parentName:"ul"},"retrieve the user from a message \u2705"),(0,r.kt)("li",{parentName:"ul"},"send a notification to all users when there is a new message \ud83d\udd63"),(0,r.kt)("li",{parentName:"ul"},"authentication and rate-limit the call \ud83d\udd63"),(0,r.kt)("li",{parentName:"ul"},"add access control management \ud83d\udd63"),(0,r.kt)("li",{parentName:"ul"},"some business logic \ud83d\udd63")),(0,r.kt)("p",null,"For the notifications, Google offer a ",(0,r.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/fcm/rest"},"Firebase Cloud Messaging")," (FCM) API which supports push on iOS, Android and web. Sadly as most of Google service, they don't provide an OpenAPI specification or a friendly GraphQL API. Rather they developed their own API definition files called API Discovery Service which maps incoming REST request onto their internal GRPC implementation, but this is a digression."),(0,r.kt)("h2",{id:"google-importers"},"Google importers"),(0,r.kt)("p",null,"The typegraph module comes with some handy importers to avoid having to rewrite manually all types and materializers. Currently, it supports importers for OpenAPI, GraphQL API and Google APIs."),(0,r.kt)("admonition",{title:"Beta/unstable feature",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Importers are quite recent and likely to evolve as feedback is received. Your voice and use cases matter a lot, let Metatype community know what suits you the best in this ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/metatypedev/metatype/discussions/104"},"discussion"),".")),(0,r.kt)("p",null,"Importers are function call with a boolean re-writing the source code file where they live. As they can generate quite long type definition, the best practice is to separate them into a dedicated file that can be imported into your main typegraph. Let's create ",(0,r.kt)("inlineCode",{parentName:"p"},"google.py")," and run ",(0,r.kt)("inlineCode",{parentName:"p"},"python google.py")," to generate the types."),(0,r.kt)(i.Z,{language:"python",mdxType:"CodeBlock"},n(1034).content),(0,r.kt)("p",null,"This should generate code similar to this:"),(0,r.kt)(i.Z,{language:"python",mdxType:"CodeBlock"},n(66765).content),(0,r.kt)("p",null,"And can be imported/customized in your main typegraph file:"),(0,r.kt)("h2",{id:"effects"},"Effects"),(0,r.kt)("p",null,"Effects are a property of materializers and help categorization what happens to data when it gets transformed. Although they are similar to REST verbs and SQL statements, there is no direct one-to-one mapping."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Effects"),(0,r.kt)("th",{parentName:"tr",align:null},"REST verbs"),(0,r.kt)("th",{parentName:"tr",align:null},"SQL statements"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"none")),(0,r.kt)("td",{parentName:"tr",align:null},"GET"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SELECT"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"create")),(0,r.kt)("td",{parentName:"tr",align:null},"POST"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"INSERT"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"update")),(0,r.kt)("td",{parentName:"tr",align:null},"PUT/PATCH"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UPDATE"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"upsert")),(0,r.kt)("td",{parentName:"tr",align:null},"PUT"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"INSERT ON CONFLICT"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"delete")),(0,r.kt)("td",{parentName:"tr",align:null},"DELETE"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DELETE"))))),(0,r.kt)("p",null,"They provide hints to the typegates for the query orchestration by splitting the queries and mutations. For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," effect is exposed as a mutation. They also allow setting different policies based on them, that's for the next page."),(0,r.kt)("h2",{id:"introduction-to-typegraph_std"},"Introduction to typegraph_std"),(0,r.kt)("p",null,"Alternatively, you can use the typegraph_std for the most common APIs.\nIt comes as a separate package so instead of maintening your own importers, you can use typegraph_std."),(0,r.kt)("p",null,"The package currently includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Google APIs (fcm, firebase, youtube, etc.)"),(0,r.kt)("li",{parentName:"ul"},"Stripe"),(0,r.kt)("li",{parentName:"ul"},"Github")),(0,r.kt)(i.Z,{language:"python",mdxType:"CodeBlock"},n(38700).content),(0,r.kt)("p",null,"As you can see, it works pretty much the same way as importers."))}u.isMDXComponent=!0},66765:e=>{e.exports={content:'def import_googleapi():\n  # ...\n  types["MessageOut"] = t.struct(\n    {\n      "token": t.string().optional(),\n      "name": t.string().optional(),\n      "condition": t.string().optional(),\n      "data": t.struct({"_": t.string().optional()}).optional(),\n      "fcmOptions": t.proxy(\n        renames["FcmOptionsOut"]\n      ).optional(),\n      "notification": t.proxy(\n        renames["NotificationOut"]\n      ).optional(),\n      "android": t.proxy(\n        renames["AndroidConfigOut"]\n      ).optional(),\n      "topic": t.string().optional(),\n      "apns": t.proxy(renames["ApnsConfigOut"]).optional(),\n      "webpush": t.proxy(\n        renames["WebpushConfigOut"]\n      ).optional(),\n      "error": t.proxy(renames["ErrorResponse"]).optional(),\n    }\n  ).named(renames["MessageOut"])\n  # ...\n  return Import(\n    importer="googleapi",\n    renames=renames,\n    types=Box(types),\n    functions=Box(functions),\n  )',path:"website/docs/tutorials/import-your-existing-apis/google.py"}},1034:e=>{e.exports={content:"",path:"website/docs/tutorials/import-your-existing-apis/importer.py"}},38700:e=>{e.exports={content:"",path:"website/docs/tutorials/import-your-existing-apis/typegraph_std.py"}}}]);