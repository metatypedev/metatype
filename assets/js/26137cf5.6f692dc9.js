(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7050],{97822:(e,n,t)=>{"use strict";t.d(n,{Ay:()=>o,RM:()=>r});var i=t(13274),s=t(99128),a=t(81288);const r=[];function l(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["We can make use of the ",(0,i.jsx)(n.a,{href:"/docs/reference/runtimes/s3",children:"S3Runtime"})," to interact with object storage APIs that implement the S3 api."]}),"\n",(0,i.jsxs)(n.p,{children:["We'll need to add the following vars to our ",(0,i.jsx)(n.code,{children:"metatype.yml"})," first."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:'typegates:\n  dev:\n    # ..\n      # replace "retrend" by the name of your typegraph\n    retrend:\n      S3_HOST: http://localhost:9000\n      S3_REGION: local\n      S3_ACCESS_KEY: minio\n      S3_SECRET_KEY: password\n      S3_PATH_STYLE: true\n'})}),"\n",(0,i.jsx)(n.p,{children:"Our typegraph will then look something like:"}),"\n",(0,i.jsx)(a.A,{typegraph:"retrend",python:t(47937),typescript:t(89975),query:t(76629)})]})}function o(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},96603:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(13274),s=t(99128),a=t(97822);const r={sidebar_position:50},l="Upload files to cloud storage",o={id:"guides/files-upload/index",title:"Upload files to cloud storage",description:"We can then use this typegraph from our client code like so:",source:"@site/docs/guides/files-upload/index.mdx",sourceDirName:"guides/files-upload",slug:"/guides/files-upload/",permalink:"/docs/guides/files-upload/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/guides/files-upload/index.mdx",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"docs",previous:{title:"Run serverless functions",permalink:"/docs/guides/external-functions/"},next:{title:"Write REST endpoints",permalink:"/docs/guides/rest/"}},d={},c=[...a.RM,{value:"Uploading file using presigned url",id:"uploading-file-using-presigned-url",level:3},{value:"Uploading file using GraphQL multipart request",id:"uploading-file-using-graphql-multipart-request",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"upload-files-to-cloud-storage",children:"Upload files to cloud storage"}),"\n",(0,i.jsx)(a.Ay,{}),"\n",(0,i.jsx)(n.p,{children:"We can then use this typegraph from our client code like so:"}),"\n",(0,i.jsx)(n.h3,{id:"uploading-file-using-presigned-url",children:"Uploading file using presigned url"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const image = await Deno.readFile("website/static/images/logo.png");\n\n// Get a presigned url\nconst {\n  data: { signUploadUrl: presigned },\n} = await fetch("http://localhost:7891/retrend", {\n  method: "POST",\n  body: JSON.stringify({\n    query: `\n        query SignUploadUrl($length: Int) {\n            signUploadUrl(length: $length, path: "my-super-image.png")\n        }\n    `,\n    variables: {\n      length: image.length,\n    },\n  }),\n}).then((r) => r.json());\n\n// Upload the file\nconst upload = await fetch(presigned, {\n  method: "PUT",\n  body: image,\n  headers: {\n    "content-type": "image/png",\n    "content-length": image.length,\n  },\n});\n\nconsole.log(upload.status);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"uploading-file-using-graphql-multipart-request",children:"Uploading file using GraphQL multipart request"}),"\n",(0,i.jsxs)(n.p,{children:["Metatype supports\n",(0,i.jsx)(n.a,{href:"https://github.com/jaydenseric/graphql-multipart-request-spec",children:"GraphQL multipart request"}),"\nfor uploading files.\nYou may use one of the clients in this\n",(0,i.jsx)(n.a,{href:"https://github.com/jaydenseric/graphql-multipart-request-spec#client",children:"list"}),"\nthat support GraphQL multipart request."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const image = await Deno.readFile("website/static/images/logo.png");\n\nconst formData = new FormData();\nformData.append(\n  "operations",\n  JSON.stringify({\n    query: `\n        mutation UploadImage($file: Upload!) {\n            upload(file: $file) {\n                id\n                path\n                size\n                contentType\n            }\n        }\n    `,\n    variables: {\n      file: null,\n    },\n  })\n);\nformData.append("map", JSON.stringify({ 0: ["variables.file"] }));\nformData.append("0", image, "logo.png");\n\nconst upload = await fetch("http://localhost:7891/retrend", {\n  method: "POST",\n  body: formData,\n});\nconsole.log(await upload.json());\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},95649:(e,n,t)=>{"use strict";t.d(n,{A:()=>j});var i=t(79474),s=t(355),a=t(70792),r=t(96116),l=t(31604),o=t(12956),d=t(17537),c=t(13274);const p=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function u(e){const{queryEditor:n,variableEditor:t,headerEditor:s}=(0,d.mi)({nonNull:!0}),[a,r]=(0,i.useState)(e.defaultTab),l=(0,d.xb)({onCopyQuery:e.onCopyQuery}),o=(0,d.Ln)();return(0,i.useEffect)((()=>{t&&p(t)}),[a,t]),(0,i.useEffect)((()=>{s&&p(s)}),[a,s]),(0,i.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("extraKeys",{"Alt-G":()=>{n.replaceSelection("@")}}),n.setOption("gutters",[]),n.on("change",p),p(n))}),[n]),(0,i.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("gutters",[]),t.on("change",p))}),[t]),(0,i.useEffect)((()=>{s&&(s.setOption("lineNumbers",!1),s.setOption("gutters",[]),s.on("change",p))}),[s]),(0,c.jsx)(d.m_.Provider,{children:(0,c.jsxs)("div",{className:"graphiql-editors",children:[(0,c.jsx)("section",{className:"graphiql-query-editor ","aria-label":"Query Editor",children:(0,c.jsxs)("div",{className:"graphiql-query-editor-wrapper",children:[(0,c.jsx)(d.wY,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),(0,c.jsxs)("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands",children:[(0,c.jsx)(d.cl,{}),(0,c.jsx)(d.IB,{onClick:()=>o(),label:"Prettify query (Shift-Ctrl-P)",children:(0,c.jsx)(d.RG,{className:"graphiql-toolbar-icon","aria-hidden":"true"})}),(0,c.jsx)(d.IB,{onClick:()=>l(),label:"Copy query (Shift-Ctrl-C)",children:(0,c.jsx)(d.Td,{className:"graphiql-toolbar-icon","aria-hidden":"true"})})]})]})}),e.noTool?null:(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{className:"graphiql-editor-tools p-0 text-sm ",children:(0,c.jsxs)("div",{className:"graphiql-editor-tools-tabs",children:[(0,c.jsx)("div",{className:("variables"===a?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{r("variables"===a?"":"variables")},children:"Variables"}),(0,c.jsx)("div",{className:("headers"===a?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{r("headers"===a?"":"headers")},children:"Headers"})]})}),(0,c.jsxs)("section",{className:"graphiql-editor-tool "+(a&&a.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===a?"Variables":"Headers",children:[(0,c.jsx)(d.G0,{editorTheme:e.editorTheme,isHidden:"variables"!==a,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),(0,c.jsx)(d.B4,{editorTheme:e.editorTheme,isHidden:"headers"!==a,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})]})]})]})})}class h{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,n){this.map.has(e)||(this.length+=1),this.map.set(e,n)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var g=t(50910),m=t(88244),f=t(56978);function y(){return(0,d.Vm)({nonNull:!0}).isFetching?(0,c.jsx)(d.y$,{}):null}const x={typegraph:"Typegraph",playground:"Playground"};function b(e){let{typegraph:n,query:t,code:a,headers:p={},variables:b={},panel:j="",noTool:v=!1,defaultMode:S=null,disablePlayground:k=!1}=e;const{siteConfig:{customFields:{tgUrl:N}}}=(0,r.A)(),q=(0,i.useMemo)((()=>new h),[]),E=(0,i.useMemo)((()=>(0,s.a5)({url:`${N}/${n}`})),[]),[w,O]=(0,i.useState)(S),[T,U]=(0,m.e)();return(0,c.jsxs)("div",{className:"@container miniql mb-4",children:[S?(0,c.jsx)(g.m,{choices:x,choice:w,onChange:O}):null,(0,c.jsx)(d.ql,{fetcher:E,defaultQuery:t.loc?.source.body.trim(),defaultHeaders:JSON.stringify(p),shouldPersistHeaders:!0,variables:JSON.stringify(b),storage:q,children:(0,c.jsxs)("div",{className:(S?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first",children:[S&&"typegraph"!==w?null:(0,c.jsx)("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0 relative",children:(0,c.jsx)(g.m,{choices:{typescript:"Typescript",python:"Python"},choice:T,onChange:U,className:"ml-2",children:a?.map((e=>(0,c.jsxs)(f.A,{value:e.codeLanguage,children:[(0,c.jsxs)(o.A,{href:`https://github.com/metatypedev/metatype/blob/main/${e?.codeFileUrl}`,className:"absolute top-0 right-0 m-2 p-1",children:[e?.codeFileUrl?.split("/").pop()," \u2197"]}),(0,c.jsx)(l.A,{language:e?.codeLanguage,wrap:!0,className:"flex-1",children:e.content})]},e.codeLanguage)))})}),k||S&&"playground"!==w?null:(0,c.jsxs)("div",{className:"flex flex-col graphiql-container",children:[(0,c.jsx)("div",{className:"flex-1 graphiql-session",children:(0,c.jsx)(u,{defaultTab:j,noTool:v})}),(0,c.jsxs)("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg",children:[(0,c.jsx)(y,{}),(0,c.jsx)(d.ny,{})]})]})]})})]})}function j(e){return(0,c.jsx)(a.A,{fallback:(0,c.jsx)("div",{children:"Loading..."}),children:()=>(0,c.jsx)(b,{...e})})}},81288:(e,n,t)=>{"use strict";t.d(n,{A:()=>a});var i=t(95649),s=(t(79474),t(13274));function a(e){let{python:n,typescript:t,...a}=e;const r=[n&&{content:n.content,codeLanguage:"python",codeFileUrl:n.path},t&&{content:t.content,codeLanguage:"typescript",codeFileUrl:t.path}].filter((e=>!!e));return(0,s.jsx)(i.A,{code:0==r.length?void 0:r,...a})}},76629:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"listObjects"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"keys"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"key"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"size"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:60}};n.loc.source={body:"{\n  listObjects{\n    keys{\n      key\n      size\n    }\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var i=e.type;"NamedType"===i.kind&&n.add(i.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var i={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),i[e.name.value]=n}})),e.exports=n},47937:e=>{e.exports={content:"",path:"examples/typegraphs/files-upload.py"}},89975:e=>{e.exports={content:'import { Policy, t, typegraph } from "@typegraph/sdk/index.js";\nimport { S3Runtime } from "@typegraph/sdk/providers/aws.js";\n\nawait typegraph({\n  name: "retrend",\n}, (g) => {\n  const pub = Policy.public();\n\n  const s3 = new S3Runtime({\n    hostSecret: "S3_HOST",\n    regionSecret: "S3_REGION",\n    accessKeySecret: "S3_ACCESS_KEY",\n    secretKeySecret: "S3_SECRET_KEY",\n    pathStyleSecret: "S3_PATH_STYLE",\n  });\n\n  g.expose({\n    listObjects: s3.list("bucket"),\n    getDownloadUrl: s3.presignGet({ bucket: "bucket" }),\n    signUploadUrl: s3.presignPut({ bucket: "bucket" }),\n    upload: s3.upload("bucket", t.file({ allow: ["image/png", "image/jpeg"] })),\n    uploadMany: s3.uploadAll("bucket"),\n  }, pub);\n});',path:"examples/typegraphs/files-upload.ts"}}}]);