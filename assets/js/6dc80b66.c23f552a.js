(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6650],{42630:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>p,toc:()=>u});var r=t(86070),o=t(25710),i=t(79752),s=t(54006),a=t(50695);t(69564);const d={},l="Importing External Modules",p={id:"guides/import-external-modules/index",title:"Importing External Modules",description:"So far, the functinos we've looked at have been generated by helpers like the CRUD helpers from the Prisma runtime or the the Random runtime's generate helper. The deno.policy function we used for authoring policies was also based on function objects. All these helpers are shorthands for creating function objects and now we'll look at how to roll a custom function ourselves. We'll be using the Deno runtime to run our code.",source:"@site/docs/guides/import-external-modules/index.mdx",sourceDirName:"guides/import-external-modules",slug:"/guides/import-external-modules/",permalink:"/docs/guides/import-external-modules/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/guides/import-external-modules/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Contribute to Metatype",permalink:"/docs/guides/contributing"},next:{title:"Programmatic deployment",permalink:"/docs/guides/programmatic-deployment/"}},c={},u=[];function m(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"importing-external-modules",children:"Importing External Modules"}),"\n",(0,r.jsxs)(n.p,{children:["So far, the functinos we've looked at have been generated by helpers like the CRUD helpers from the Prisma runtime or the the Random runtime's ",(0,r.jsx)(n.code,{children:"generate"})," helper. The ",(0,r.jsx)(n.code,{children:"deno.policy"})," function we used for authoring policies was also based on function objects. All these helpers are shorthands for creating function objects and now we'll look at how to roll a custom function ourselves. We'll be using the Deno runtime to run our code."]}),"\n",(0,r.jsxs)(n.p,{children:["Instead of including the code inline through a string, the Deno runtime allows us to import modules from disk. Our modules are allowed to use ESM imports to access libraries on different registries like ",(0,r.jsx)(n.code,{children:"npm"})," and ",(0,r.jsx)(n.code,{children:"deno.land"}),". We'll use these features to write a simple function that converts markdown to html."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import * as marked from "https://deno.land/x/marked/mod.ts";\n\nexport function parse({ raw }: { raw: string }): string {\n  return marked.parse(raw);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"We'll expose our module using the deno runtime."}),"\n",(0,r.jsxs)(i.Ay,{children:[(0,r.jsx)(s.A,{value:"typescript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'typegraph("roadmap", (g) => {\n  // ...\n  g.expose(\n    {\n      // ..\n      parse_markdown: deno.import(t.struct({ raw: t.string() }), t.string(), {\n        name: "parse",\n        // the path is parsed relative to the typegraph file\n        module: "md2html.ts",\n      }),\n      // ..\n    },\n    pub,\n  );\n});\n'})})}),(0,r.jsx)(s.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@typegraph()\ndef roadmap(g: Graph):\n    g.expose(\n        pub,\n        # ..\n        parse_markdown=deno.import_(\n            t.struct({"raw": t.string()}),\n            t.string(),\n            # the path is parsed relative to the typegraph file\n            module="md2html.ts",\n            name="parse",\n        ),\n    )\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"We can now access our func through the GraphQl api."}),"\n",(0,r.jsx)(a.A,{typegraph:"roadmap-func",python:t(57916),typescript:t(30138),query:t(99042)})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},79752:(e,n,t)=>{"use strict";t.d(n,{Ay:()=>s,gc:()=>a});t(30758);var r=t(93098),o=t(99035),i=t(86070);function s(e){let{children:n}=e;const[t,s]=(0,r.e)();return(0,i.jsx)(o.mS,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,onChange:s,children:n})}function a(e){let{children:n}=e;const[t]=(0,r.e)();return(0,i.jsx)(o.q9,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,children:n})}},99042:e=>{var n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parse_markdown"},arguments:[{kind:"Argument",name:{kind:"Name",value:"raw"},value:{kind:"StringValue",value:"hello",block:!1}}],directives:[]}]}}],loc:{start:0,end:41}};n.loc.source={body:'query {\n  parse_markdown(raw: "hello")\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};function t(e,n){if("FragmentSpread"===e.kind)n.add(e.name.value);else if("VariableDefinition"===e.kind){var r=e.type;"NamedType"===r.kind&&n.add(r.name.value)}e.selectionSet&&e.selectionSet.selections.forEach((function(e){t(e,n)})),e.variableDefinitions&&e.variableDefinitions.forEach((function(e){t(e,n)})),e.definitions&&e.definitions.forEach((function(e){t(e,n)}))}var r={};n.definitions.forEach((function(e){if(e.name){var n=new Set;t(e,n),r[e.name.value]=n}})),e.exports=n},57916:e=>{e.exports={content:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.runtimes.deno import DenoRuntime\n\n\n\n@typegraph(\n)\ndef roadmap(g: Graph):\n    deno = DenoRuntime()\n\n\n    g.expose(\n        pub,\n        parse_markdown=deno.import_(\n            t.struct({"raw": t.string()}),\n            t.string(),\n            module="scripts/md2html.ts.src",\n            name="parse",\n        ),\n    )',path:"examples/typegraphs/func.py"}},30138:e=>{e.exports={content:'import { Policy, t, typegraph } from "@typegraph/sdk/index.js";\nimport { DenoRuntime } from "@typegraph/sdk/runtimes/deno.js";\n\n\nawait typegraph({\n}, (g) => {\n  const deno = new DenoRuntime();\n\n\n  g.expose({\n    parse_markdown: deno.import(\n      t.struct({ "raw": t.string() }),\n      t.string(),\n      {\n        module: "scripts/md2html.ts.src",\n        name: "parse",\n      },\n    ),\n  }, pub);\n\n});',path:"examples/typegraphs/func.ts"}}}]);