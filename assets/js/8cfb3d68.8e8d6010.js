(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3599,8752],{27781:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>p,default:()=>g,frontMatter:()=>c,metadata:()=>d,toc:()=>u});var s=n(13274),a=n(99128),r=n(90580),i=n(11640),o=n(3649),l=n(80872);const c={sidebar_position:1},p="Features",d={id:"concepts/features-overview/index",title:"Features",description:"We're taking any and all kinds of feature requests, suggestions and recommendations. Please direct them kindly to the github ticket or better yet discussion boards. Thank you!",source:"@site/docs/concepts/features-overview/index.mdx",sourceDirName:"concepts/features-overview",slug:"/concepts/features-overview/",permalink:"/docs/concepts/features-overview/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/concepts/features-overview/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Programmatic deployment",permalink:"/docs/reference/programmatic-deployment/"},next:{title:"Mental model",permalink:"/docs/concepts/mental-model/"}},h={},u=[{value:"Typegate",id:"typegate",level:2},{value:"Typegraph",id:"typegraph",level:2},{value:"Runtimes",id:"runtimes",level:2},{value:"Prisma",id:"prisma",level:3},{value:"Auth",id:"auth",level:2},{value:"Tooling",id:"tooling",level:2},{value:"SDK",id:"sdk",level:2}];function m(e){const t={a:"a",admonition:"admonition",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"features",children:"Features"}),"\n",(0,s.jsx)(t.admonition,{title:"Suggestions",type:"info",children:(0,s.jsxs)(t.p,{children:["We're taking any and all kinds of feature requests, suggestions and recommendations. Please direct them kindly to the github ",(0,s.jsx)(t.a,{href:"https://github.com/metatypedev/metatype/issues",children:"ticket"})," or better yet ",(0,s.jsx)(t.a,{href:"https://github.com/metatypedev/metatype/discussions/",children:"discussion"})," boards. Thank you!"]})}),"\n",(0,s.jsx)(t.h2,{id:"typegate",children:"Typegate"}),"\n",(0,s.jsx)(r.default,{rows:[[{title:"GraphQL API",status:"complete",link:"/docs/reference/typegate",body:(0,s.jsx)(s.Fragment,{children:"Expose select materializers in your graph through a GraphQL API. These root-materializers will serve as the entry point to your graph for any incoming request. The typegraph model is a great fit for GraphQL semantics and this is the best supported way to consume typegraphs."})},{title:"GraphQL Subscriptions",status:"future",link:"https://github.com/metatypedev/metatype/issues/726",body:(0,s.jsx)(s.Fragment,{children:"Get real-time data to clients."})}],[{title:"REST API",status:"complete",link:"/docs/guides/rest",body:(0,s.jsx)(s.Fragment,{children:"You can expose select root materializers through a simple REST API. This is handy to serve endpoints for clients that are not GraphQl capable, even though it hampers access to some typegraph features. Inputs will be sourced from either HTTP bodies or search parameters according to HTTP verb."})},{title:"gRPC API",status:"future",link:"/docs/reference/typegate",body:(0,s.jsx)(s.Fragment,{children:"Support to expose the typegraph through a gRPC API."})}],[{title:"Cron triggers",status:"future",link:"/docs/reference/typegate",body:(0,s.jsx)(s.Fragment,{children:"Execute materializers at certain time intervals. Useful for cleanup jobs."})},(0,s.jsx)(t.div,{})],[{title:"Rate-limiting",status:"complete",link:"/docs/reference/typegate/cors",body:(0,s.jsx)(s.Fragment,{children:"Rate-limit parts of your graph to minimize abuse. The limits can be configured granularly for each materializer and for custom time windows. Use custom request identifiers, in addition to ip addresses, to track limits counters."})},{title:"CORS",status:"complete",link:"/docs/reference/typegate/cors",body:(0,s.jsx)(s.Fragment,{children:"Specify cross-origin request rules to control which domains can access your API from within a browser. Prevents abuse from websites trying to use your API without permission."})}],[{title:"Single-node",status:"complete",link:"/docs/reference/typegate/synchronization",body:(0,s.jsx)(s.Fragment,{children:"The typegate can be run as a single node mode for simple deployments and using the filesystem as its artifact store. Useful for local development and testing."})},{title:"Multi-node",status:"complete",link:"/docs/reference/typegate/synchronization",body:(0,s.jsx)(s.Fragment,{children:"Deploy multiple instances of the typegate to distribute loads across machines and scale horizontally. You'll only need a Redis compatible key-value cache, an S3 compatible object store, and your favorite load-balancer in front of the instances to get it going. This mode is recommended for production deployments even if only a single node is used."})}]]}),"\n",(0,s.jsx)(t.h2,{id:"typegraph",children:"Typegraph"}),"\n",(0,s.jsx)(r.default,{rows:[[(0,s.jsx)(i.A,{python:n(73523),typescript:n(50029),disablePlayground:!0})],[{title:"Scalar types",status:"complete",link:"/docs/reference/types#scalar-types",body:(0,s.jsxs)(s.Fragment,{children:["The primitive types ",(0,s.jsx)(t.code,{children:"integer"}),", ",(0,s.jsx)(t.code,{children:"float"}),", ",(0,s.jsx)(t.code,{children:"boolean"}),", ",(0,s.jsx)(t.code,{children:"string"})," and ",(0,s.jsx)(t.code,{children:"file"}),". All data that flows through a typegraph reduces down to these types."]})},{title:"Type constraints",status:"complete",link:"/docs/reference/types/injections",body:(0,s.jsx)(s.Fragment,{children:"Declare types in your graph that are subset of primitives like string and integers by using regular expressions or min/max limits. Useful to validate incoming data even more and distribute invariants through your app."})}],[{title:"Composite types",status:"complete",link:"/docs/reference/types#scalar-types",body:(0,s.jsxs)(s.Fragment,{children:["Support for ",(0,s.jsx)(t.code,{children:"struct"}),", ",(0,s.jsx)(t.code,{children:"list"}),", ",(0,s.jsx)(t.code,{children:"union"}),", ",(0,s.jsx)(t.code,{children:"either"})," and ",(0,s.jsx)(t.code,{children:"optional"})," types. These allow you to represent types equivalent to most modern type systems."]})},{title:"Injections",status:"complete",link:"/docs/reference/types/injections",body:(0,s.jsx)(s.Fragment,{children:"Injections resolve part of your graph inline instead of from materializers or provide defaults for incoming request data. This can be used to set static values or source them from the context, other parts of the graph...etc."})}],[{title:"Materializers (Functions)",status:"complete",link:"/docs/reference/types/functions",body:(0,s.jsxs)(s.Fragment,{children:["Nodes in your typegraph that represent data to be resolved after running some logic on a ",(0,s.jsx)(t.code,{children:"Runtime"}),"."]})},{title:"Materializer chaining",status:"future",link:"https://github.com/metatypedev/metatype/issues/721",body:(0,s.jsx)(s.Fragment,{children:"Compose materializers together by feeding the output of one as the input of another. Encourages code reuse by allowing one to extract common middleware logic from each materializer, all within the typegraph layer."})}],[{title:(0,s.jsx)(t.code,{children:"reduce"}),status:"complete",link:"/docs/reference/types/parameter-transformations#funcreducetree",body:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.code,{children:"reduce"})," is useful to transform materializer input types so that only certain struct fields are used, discarding the others. Required fields can be hidden from the user and can instead be injected from the request's context or a static default. This is useful for remixing generated or core domain types to more targeted forms appropriate for a materializer."]})},{title:(0,s.jsx)(t.code,{children:"apply"}),status:"complete",link:"/docs/reference/types/parameter-transformations#funcapplytree",body:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.code,{children:"apply"})," allows the flattening of deeply nested types materializer input types to something friendlier. Injection can also be used to substitute required fields in the original type from another source."]})}],[{title:"Imports",status:"future",link:"https://github.com/metatypedev/metatype/issues/722",body:(0,s.jsxs)(s.Fragment,{children:["Imports will allow graphs to include nodes from other API descriptions like GraphQL, OpenAPI, gRPC and database schemas. These APIs can then be consumed in a typesafe manner through the ",(0,s.jsx)(t.code,{children:"GraphQL"})," and ",(0,s.jsx)(t.code,{children:"Http"})," runtimes."]})},{title:"Secrets",status:"complete",link:"#",body:(0,s.jsx)(s.Fragment,{children:"First-class support for secrets to ease runtime substitution of sensetive values. API keys or dynamic values only discovrable after deployment, this is how you get them into your app."})}]]}),"\n",(0,s.jsx)(t.h2,{id:"runtimes",children:"Runtimes"}),"\n",(0,s.jsx)(r.default,{rows:[[{title:"Deno runtime",status:"complete",link:"/docs/reference/runtimes/deno",body:(0,s.jsx)(s.Fragment,{children:"Write materializers that execute pieces of TypeScript code on a Deno worker. Includes easy access to ESM and libraries through standard Deno features."})}],[(0,s.jsx)(i.A,{python:n(14922),typescript:n(54140),disablePlayground:!0})],[{title:"Python runtime",status:"beta",link:"/docs/reference/runtimes/python",body:(0,s.jsx)(s.Fragment,{children:"Implement materializers that execute python functions in code snippets or on disk modules."})}],[(0,s.jsx)(l.A,{language:"py",children:'from typegraph import typegraph, Policy, t, Graph\nfrom typegraph.runtimes.deno import PythonRuntime\n\n@typegraph()\ndef example_python(g: Graph):\n    public = Policy.public()\n    python = PythonRuntime()\n\n    g.expose(\n        public,\n        add=t.func(\n            t.struct({"a": t.integer(), "b": t.integer()}),\n            t.integer(),\n            # we can provide the code inline using lambdas\n            python.from_lambda(lambda x: x["a"] + x["b"]),\n        ),\n        sayHello=python.import_(\n            t.struct({"name": t.string()}),\n            t.string(),\n            # point to pythoin a file on disc\n            module="hello.py",\n            name="say_hello"\n        ),\n    )\n}'})],[{title:"S3 runtime",status:"complete",link:"/docs/reference/runtimes/s3",body:(0,s.jsxs)(s.Fragment,{children:["Store large blobs in S3 compatible object stores. This includes support for ",(0,s.jsx)(o.A,{to:"/docs/guides/files-upload",children:"GraphQL file uploads"})," and presigned URLs making working with images and large uploads a breeze."]})},{title:"Temporal runtime",status:"complete",link:"/docs/reference/runtimes/temporal",body:(0,s.jsx)(s.Fragment,{children:"Kick off and query Temporal workflows from a typegraph. Temporal is a durable execution engine that can be used to implement long-running, failure-resistant business processes."})},{title:"Wasm runtime",status:"beta",link:"/docs/reference/runtimes/wasm",body:(0,s.jsx)(s.Fragment,{children:"Make materializers that use WASM components to implement their logic. Write core-wasm or wasi 0.2 based wasm components in languages like Rust, Python and Javascript to power all your custom functions."})}],[{title:"GraphQL runtime",status:"complete",link:"/docs/reference/runtimes/graphql",body:(0,s.jsx)(s.Fragment,{children:"Include external GraphQL APIs as part of your typegraph. This runtime provides materializers that resolve the data by querying an external GraphQL API."})},{title:"Http runtime",status:"complete",link:"/docs/reference/runtimes/http",body:(0,s.jsx)(s.Fragment,{children:"Include external Http APIs as part of your typegraph. Source the data for your graph using external HTTP requests."})}],[{title:"Random runtime",status:"complete",link:"/docs/reference/runtimes/random",body:(0,s.jsx)(s.Fragment,{children:"Materializers to generate random data based on your types. Useful for quickly throwing together an API and testing."})},{title:"gRPC runtime",status:"future",link:"https://github.com/metatypedev/metatype/issues/723",body:(0,s.jsx)(s.Fragment,{children:"Include external gRPC APIs as part of your typegraph."})}]]}),"\n",(0,s.jsx)(t.h3,{id:"prisma",children:"Prisma"}),"\n",(0,s.jsx)(t.p,{children:"Access a myriad of databases directly from your typegraph. Run queries, mange it's schema, the full orm featureset."}),"\n",(0,s.jsx)(r.default,{rows:[[(0,s.jsx)(i.A,{python:n(49659),typescript:n(85861),disablePlayground:!0})],[{title:"Relational schemas",status:"complete",link:"/docs/reference/runtimes/prisma#relationships",body:(0,s.jsx)(s.Fragment,{children:"Use the types in your graph to declare and manage relational schemas to be used on your databse. This means support for primary keys, unique constraints, one-to-one, one-to-many, many-to-many relationships...etc."})},{title:"CRUD queries",status:"complete",link:"/docs/reference/runtimes/prisma#generators",body:(0,s.jsx)(s.Fragment,{children:"Generate easy materializers for common create, update, read and delete queries. Includes nested filtering and aggregration paramters for efficent and targeted requests."})},{title:"Raw queries",status:"complete",link:"/docs/reference/runtimes/prisma#raw-query",body:(0,s.jsx)(s.Fragment,{children:"Drop down to raw SQL queries for cases not covered by the CRUD generators. Useful to access unique features native to your database or craft extra efficient queries."})}],[{title:"PostgreSQL support",status:"complete",link:"/docs/reference/runtimes/prisma",body:(0,s.jsx)(s.Fragment,{children:"Support for PostgreSQL, a modern and established DBMS."})},{title:"Beta databases",status:"beta",link:"https://github.com/metatypedev/metatype/issues/724",body:(0,s.jsx)(s.Fragment,{children:"MySQL, MariaDB, AWS Aurora, AWS Aurora Serverless, Microsoft SQL Server, Azure SQL, MongoDB, CockroachDB."})}]]}),"\n",(0,s.jsx)(t.h2,{id:"auth",children:"Auth"}),"\n",(0,s.jsx)(r.default,{rows:[[{title:"Policy-based access control",status:"complete",link:"/docs/reference/policies",body:(0,s.jsx)(s.Fragment,{children:"Policies are simple functions that take the request as input and return values to signal whether it's allowed/denied access. They can be attached to any materializer in the graph and are evaluated right before the request triggers one. They compose well and are the primary authorization primitive available to typegraphs."})}],[(0,s.jsx)(i.A,{python:n(34316),typescript:n(90186),disablePlayground:!0})],[{title:"Basic authentication",status:"complete",link:"/docs/reference/typegate/authentication#basic-authentication",body:(0,s.jsx)(s.Fragment,{children:"Requests can authenticate themselves using Basic HTTP headers. Simple but useful for getting started or protecting admin only requests."})},(0,s.jsx)(i.A,{python:n(98422),typescript:n(63328),disablePlayground:!0})],[{title:"JWT authentication",status:"complete",link:"/docs/reference/typegate/authentication#jwt-authentication",body:(0,s.jsx)(s.Fragment,{children:"Json Web Tokens can be used to attach more authentication and context information to requests. The data in the tokens can then be used by policies to make authorization decisions."})},(0,s.jsx)(i.A,{python:n(90357),typescript:n(2067),disablePlayground:!0})],[{title:"Oauth2 authorization",status:"complete",link:"/docs/reference/typegate/authentication#oauth2-authorization",body:(0,s.jsx)(s.Fragment,{children:"Use the Oauth2 scheme to implement social-sign in from common identity providers like Github, Meta and Google."})},(0,s.jsx)(i.A,{python:n(2641),typescript:n(21383),disablePlayground:!0})]]}),"\n",(0,s.jsx)(t.h2,{id:"tooling",children:"Tooling"}),"\n",(0,s.jsx)(r.default,{rows:[[{title:"Meta CLI",status:"complete",link:"/docs/reference/meta-cli",body:(0,s.jsx)(s.Fragment,{children:"Full-featured CLI to aid development and manage typegraph deployments on the typegate. Supports watch mode to aid rapid-iteration, including support for interactive database migration management. Bundles the typegate within it making the CLI all one needs to get started. (And a text editor, of course.)"})}],[(0,s.jsx)(l.A,{language:"shell",children:"\u276f meta --help                                                                                    at 02:03:36\nDeclarative API development platform. Build backend components with WASM/Typescript/Python, no matter where and how your (legacy) systems are.\n\nUsage: meta [OPTIONS] [COMMAND]\n\nCommands:\n  serialize   Serialize the typegraphs defined in the specified python file(s) into JSON\n  dev         Push typegraph(s) with development mode features enabled\n  deploy      Push typegraph(s) to typegate\n  undeploy    Undeploy typegraph(s) from typegate\n  gen         Access metagen generators\n  upgrade     Upgrade\n  completion  Generate shell completion\n  doctor      Troubleshoot the installation\n  new         Create a new Metatype project\n  typegate    Access a minimal deno CLI\n  help        Print this message or the help of the given subcommand(s)\n\nOptions:\n      --version\n  -v, --verbose...       Increase logging verbosity\n  -q, --quiet...         Decrease logging verbosity\n  -C, --dir <DIR>        [default: .]\n      --config <CONFIG>  path to the config file\n  -h, --help             Print help\n"})],[{title:"Metagen",status:"beta",link:"#",body:(0,s.jsxs)(s.Fragment,{children:["Code generation suite that supports Rust, Python and Typescript. Generate types from your graph and other helper functions for authoring custom functions for the Wasm, Python and Deno runtimes respectively. Can be accessed through the CLI under the ",(0,s.jsx)(t.code,{children:"gen"})," subcommand or through the different SDKs."]})},{title:"Meta LSP",status:"beta",link:"/docs/reference/meta-lsp",body:(0,s.jsx)(s.Fragment,{children:"Extension for your IDE to help authoring of typegraphs. Supports VSCode as of now."})},(0,s.jsx)(t.div,{})],[{title:"Docker images",status:"complete",link:"https://github.com/orgs/metatypedev/packages/container/package/typegate",body:(0,s.jsxs)(s.Fragment,{children:["The typegate is primarily distributed as a docker image for deployment as a container. All the available configuration environment variables can be found ",(0,s.jsx)(o.A,{to:"http://localhost:3000/docs/reference/typegate#environment-variables",children:"here"}),"."]})},{title:"Helm charts",status:"complete",link:"/docs/guides/self-hosting",body:(0,s.jsx)(s.Fragment,{children:"Helm charts are published to ease installation of a typegate deployment in your Kubernetes cluster."})}],[(0,s.jsx)(l.A,{language:"shell",children:"docker run --rm --pull always \\\n   -p 7890:7890 \\\n   -e TG_SECRET=$(openssl rand -base64 64 | tr -d '\\n') \\\n   -e TG_ADMIN_PASSWORD=\"password\" \\\n   ghcr.io/metatypedev/typegate:latest"})]]}),"\n",(0,s.jsx)(t.h2,{id:"sdk",children:"SDK"}),"\n",(0,s.jsx)(r.default,{rows:[[{title:"Typescript SDK",status:"complete",link:"https://www.npmjs.com/package/@typegraph/sdk",body:(0,s.jsx)(s.Fragment,{children:"Use typescript to author typegraphs and access other SDK tooling. Supports Node and compatible runtimes like Deno and Bun."})},{title:"Python SDK",status:"complete",link:"http://localhost:3000/docs/reference/typegate#environment-variables",body:(0,s.jsx)(s.Fragment,{children:"Use Python to author typegraphs and access other SDK tooling."})}],[{title:"Deployments",status:"complete",link:"/docs/reference/programmatic-deployment",body:(0,s.jsx)(s.Fragment,{children:"Programmatically upload your typegraphs to the typegate from within the SDK. Useful for writing tests or building on top of the Metatype platform."})},{title:"Migrations",status:"beta",link:"/docs/reference/programmatic-deployment",body:(0,s.jsx)(s.Fragment,{children:"Programmaticaly manage necessary migrations returned by the Prisma runtime. Useful for writing tests or building on top of the Metatype platform."})}],[{title:"Codegen",status:"beta",link:"/docs/reference/programmatic-deployment",body:(0,s.jsx)(s.Fragment,{children:"Access metagen through the SDK directly to generate type declarations and other helpful code. Useful for testing and to build custom workflows/tooling."})},(0,s.jsx)(t.div,{})]]})]})}function g(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},26787:(e,t,n)=>{"use strict";n.d(t,{A:()=>j});var s=n(79474),a=n(80126),r=n(8035),i=n(84221),o=n(80872),l=n(3649),c=n(34077),p=n(13274);const d=e=>{e.getWrapperElement().closest(".graphiql-editor").style.height=`${e.doc.height}px`};function h(e){const{queryEditor:t,variableEditor:n,headerEditor:a}=(0,c.mi)({nonNull:!0}),[r,i]=(0,s.useState)(e.defaultTab),o=(0,c.xb)({onCopyQuery:e.onCopyQuery}),l=(0,c.Ln)();return(0,s.useEffect)((()=>{n&&d(n)}),[r,n]),(0,s.useEffect)((()=>{a&&d(a)}),[r,a]),(0,s.useEffect)((()=>{t&&(t.setOption("lineNumbers",!1),t.setOption("extraKeys",{"Alt-G":()=>{t.replaceSelection("@")}}),t.setOption("gutters",[]),t.on("change",d),d(t))}),[t]),(0,s.useEffect)((()=>{n&&(n.setOption("lineNumbers",!1),n.setOption("gutters",[]),n.on("change",d))}),[n]),(0,s.useEffect)((()=>{a&&(a.setOption("lineNumbers",!1),a.setOption("gutters",[]),a.on("change",d))}),[a]),(0,p.jsx)(c.m_.Provider,{children:(0,p.jsxs)("div",{className:"graphiql-editors",children:[(0,p.jsx)("section",{className:"graphiql-query-editor ","aria-label":"Query Editor",children:(0,p.jsxs)("div",{className:"graphiql-query-editor-wrapper",children:[(0,p.jsx)(c.wY,{editorTheme:e.editorTheme,keyMap:e.keyMap,onCopyQuery:e.onCopyQuery,onEdit:e.onEditQuery,readOnly:e.readOnly}),(0,p.jsxs)("div",{className:"graphiql-toolbar",role:"toolbar","aria-label":"Editor Commands",children:[(0,p.jsx)(c.cl,{}),(0,p.jsx)(c.IB,{onClick:()=>l(),label:"Prettify query (Shift-Ctrl-P)",children:(0,p.jsx)(c.RG,{className:"graphiql-toolbar-icon","aria-hidden":"true"})}),(0,p.jsx)(c.IB,{onClick:()=>o(),label:"Copy query (Shift-Ctrl-C)",children:(0,p.jsx)(c.Td,{className:"graphiql-toolbar-icon","aria-hidden":"true"})})]})]})}),e.noTool?null:(0,p.jsxs)(p.Fragment,{children:[(0,p.jsx)("div",{className:"graphiql-editor-tools p-0 text-sm ",children:(0,p.jsxs)("div",{className:"graphiql-editor-tools-tabs",children:[(0,p.jsx)("div",{className:("variables"===r?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{i("variables"===r?"":"variables")},children:"Variables"}),(0,p.jsx)("div",{className:("headers"===r?"text-slate-800":"")+" p-2 hover:text-slate-800 cursor-pointer",onClick:()=>{i("headers"===r?"":"headers")},children:"Headers"})]})}),(0,p.jsxs)("section",{className:"graphiql-editor-tool "+(r&&r.length>0?"pt-0":"hidden p-0"),"aria-label":"variables"===r?"Variables":"Headers",children:[(0,p.jsx)(c.G0,{editorTheme:e.editorTheme,isHidden:"variables"!==r,keyMap:e.keyMap,onEdit:e.onEditVariables,readOnly:e.readOnly}),(0,p.jsx)(c.B4,{editorTheme:e.editorTheme,isHidden:"headers"!==r,keyMap:e.keyMap,onEdit:e.onEditHeaders,readOnly:e.readOnly})]})]})]})})}class u{constructor(){this.map=new Map,this.length=0}getItem(e){return this.map.get(e)}setItem(e,t){this.map.has(e)||(this.length+=1),this.map.set(e,t)}removeItem(e){this.map.has(e)&&(this.length-=1),this.map.delete(e)}clear(){this.length=0,this.map.clear()}}var m=n(2222),g=n(82192),y=n(30947);function f(){return(0,c.Vm)({nonNull:!0}).isFetching?(0,p.jsx)(c.y$,{}):null}const x={typegraph:"Typegraph",playground:"Playground"};function b(e){let{typegraph:t,query:n,code:r,headers:d={},variables:b={},panel:j="",noTool:v=!1,defaultMode:w=null,disablePlayground:k=!1}=e;const{siteConfig:{customFields:{tgUrl:P}}}=(0,i.A)(),A=(0,s.useMemo)((()=>new u),[]),T=(0,s.useMemo)((()=>(0,a.a5)({url:`${P}/${t}`})),[]),[S,F]=(0,s.useState)(w),[_,q]=(0,g.e)();return(0,p.jsxs)("div",{className:"@container miniql mb-4",children:[w&&!k?(0,p.jsx)(m.mS,{choices:x,choice:S,onChange:F}):null,(0,p.jsxs)("div",{className:(w||k?"":"md:grid @2xl:grid-cols-2")+" gap-2 w-full order-first",children:[k||!w||"typegraph"===S?(0,p.jsx)("div",{className:" bg-slate-100 rounded-lg flex flex-col mb-2 md:mb-0 relative",children:(0,p.jsx)(m.mS,{choices:{typescript:"Typescript",python:"Python"},choice:_,onChange:q,className:"ml-2",children:r?.map((e=>(0,p.jsxs)(y.A,{value:e.codeLanguage,children:[(0,p.jsxs)(l.A,{href:`https://github.com/metatypedev/metatype/blob/main/${e?.codeFileUrl}`,className:"absolute top-0 right-0 m-2 p-1",children:[e?.codeFileUrl?.split("/").pop()," \u2197"]}),(0,p.jsx)(o.A,{language:e?.codeLanguage,wrap:!0,className:"flex-1",children:e.content})]},e.codeLanguage)))})}):null,k||w&&"playground"!==S?null:(0,p.jsx)(c.ql,{fetcher:T,defaultQuery:n.loc?.source.body.trim(),defaultHeaders:JSON.stringify(d),shouldPersistHeaders:!0,variables:JSON.stringify(b),storage:A,children:(0,p.jsxs)("div",{className:"flex flex-col graphiql-container",children:[(0,p.jsx)("div",{className:"flex-1 graphiql-session",children:(0,p.jsx)(h,{defaultTab:j,noTool:v})}),(0,p.jsxs)("div",{className:"flex-auto graphiql-response min-h-[200px] p-2 mt-2 bg-slate-100 rounded-lg",children:[(0,p.jsx)(f,{}),(0,p.jsx)(c.ny,{})]})]})})]})]})}function j(e){return(0,p.jsx)(r.A,{fallback:(0,p.jsx)("div",{children:"Loading..."}),children:()=>(0,p.jsx)(b,{...e})})}},11640:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});var s=n(26787),a=(n(79474),n(13274));function r(e){let{python:t,typescript:n,...r}=e;const i=[t&&{content:t.content,codeLanguage:"python",codeFileUrl:t.path},n&&{content:n.content,codeLanguage:"typescript",codeFileUrl:n.path}].filter((e=>!!e));return(0,a.jsx)(s.A,{code:0==i.length?void 0:i,...r})}},90580:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});n(79474);var s=n(40429),a=n(80872),r=n(3649),i=n(13274);function o(e){return(0,i.jsx)("div",{children:e?.rows?.map((e=>(0,i.jsx)("div",{className:"gap-2 flex max-w-full my-10",children:e.map((e=>{if("title"in e)return(0,i.jsx)("div",{className:"flex-1",children:(0,i.jsx)(l,{...e})});if("content"in e){const t=e.path.split("."),n=t[t.length-1];return(0,i.jsxs)("div",{className:"flex-1",children:[(0,i.jsxs)(r.A,{to:`https://github.com/metatypedev/metatype/blob/main/${e.path}`,className:"absolute top-0 right-0 m-2 p-1",children:[e.path.split("/").pop()," \u2197"]}),(0,i.jsx)(a.A,{language:n,wrap:!0,children:e.content})]})}return(0,i.jsx)("div",{className:"flex-1",children:e})}))})))})}function l(e){return(0,i.jsx)(r.A,{to:e.link,style:{textDecoration:"none",color:"inherit"},children:(0,i.jsxs)("div",{className:"flex flex-col gap-1",children:[(0,i.jsxs)("div",{className:"flex gap-2",children:[(0,i.jsx)(s.A,{as:"h3",children:e.title}),(0,i.jsx)("span",{className:`${{complete:"text-green-500",beta:"text-yellow-500",future:"text-pink-500"}[e.status]}`,children:e.status.toUpperCase()})]}),(0,i.jsx)("div",{children:e.body})]})})}},98422:e=>{e.exports={content:'@typegraph(\n    allow_origin=["https://metatype.dev", "http://localhost:3000"]\n  ),\n)\ndef basic_authentication(g: Graph):\n  deno = DenoRuntime()\n  public = Policy.public()\n\n  ctx = t.struct({"username": t.string().optional()})\n\n  # highlight-next-line\n  g.auth(Auth.basic(["admin"]))\n\n  g.expose(\n    public,\n    get_context=deno.identity(ctx).apply(\n      {\n        "username": g.from_context("username"),\n      }\n    ),\n  )',path:"examples/typegraphs/basic.py"}},63328:e=>{e.exports={content:'await typegraph({\n  name: "basic-authentication",\n}, (g) => {\n  const deno = new DenoRuntime();\n  const pub = Policy.public();\n\n  const ctx = t.struct({\n    "username": t.string().optional(),\n  });\n\n  // highlight-next-line\n  g.auth(Auth.basic(["admin"]));\n\n  g.expose({\n    get_context: deno.identity(ctx).apply({\n      username: g.fromContext("username"),\n    }).withPolicy(pub),\n  });\n});',path:"examples/typegraphs/basic.ts"}},49659:e=>{e.exports={content:"",path:"examples/typegraphs/database.py"}},85861:e=>{e.exports={content:'// highlight-next-line\nimport { PrismaRuntime } from "@typegraph/sdk/providers/prisma.js";\n\nawait typegraph({\n  name: "database",\n}, (g) => {\n  const db = new PrismaRuntime("database", "POSTGRES_CONN");\n  const pub = Policy.public();\n\n  const message = t.struct(\n    {\n      // highlight-next-line\n      "id": t.integer({}, { asId: true, config: { auto: true } }),\n      "title": t.string(),\n      "body": t.string(),\n    },\n    // highlight-next-line\n    { name: "message" },\n  );\n\n  g.expose({\n    // highlight-next-line\n    create_message: db.create(message),\n    list_messages: db.findMany(message),\n  }, pub);\n});',path:"examples/typegraphs/database.ts"}},14922:e=>{e.exports={content:'@typegraph(\n    allow_origin=["https://metatype.dev", "http://localhost:3000"]\n  ),\n)\ndef deno(g: Graph):\n  deno = DenoRuntime()\n  public = Policy.public()\n\n  fib = deno.func(\n    t.struct({"n": t.float()}),\n    t.struct({"res": t.integer(), "ms": t.float()}),\n    code="""\n    ({ n }) => {\n        let a = 0, b = 1, c;\n        const start = performance.now();\n        for (\n          let i = 0;\n          i < Math.min(n, 10);\n          c = a + b, a = b, b = c, i += 1\n        );\n        return {\n          res: b,\n          ms: performance.now() - start,\n        };\n      }\n      """,\n  )\n\n  g.expose(\n    public,\n    compute_fib=fib,\n  )',path:"examples/typegraphs/deno.py"}},54140:e=>{e.exports={content:'await typegraph({\n  name: "deno",\n}, (g) => {\n  const deno = new DenoRuntime();\n  const pub = Policy.public();\n\n  const fib = deno.func(\n    t.struct({ "n": t.float() }),\n    t.struct({ "res": t.integer(), "ms": t.float() }),\n    {\n      code: `\n            ({ n }) => {\n                let a = 0, b = 1, c;\n                const start = performance.now();\n                for (\n                    let i = 0;\n                    i < Math.min(n, 10);\n                    c = a + b, a = b, b = c, i += 1\n                );\n                return {\n                    res: b,\n                    ms: performance.now() - start,\n                };\n            }\n        `,\n    },\n  );\n\n  g.expose({\n    compute_fib: fib,\n  }, pub);\n});',path:"examples/typegraphs/deno.ts"}},73523:e=>{e.exports={content:"",path:"examples/typegraphs/first-typegraph.py"}},50029:e=>{e.exports={content:'import { Policy, t, typegraph } from "@typegraph/sdk/index.js";\nimport { RandomRuntime } from "@typegraph/sdk/runtimes/random.js";\n\nawait typegraph({\n  name: "first-typegraph",\n}, (g) => {\n  // declare runtimes and policies\n  const random = new RandomRuntime({});\n  const pub = Policy.public();\n\n  // declare types\n  const message = t.struct(\n    {\n      "id": t.integer(),\n      "title": t.string(),\n      "user_id": t.integer(),\n    },\n  );\n\n  // expose them with policies\n  g.expose({\n    // input \u2192 output via materializer\n    get_message: random.gen(message),\n  }, pub);\n});',path:"examples/typegraphs/first-typegraph.ts"}},90357:e=>{e.exports={content:'@typegraph(\n    allow_origin=["https://metatype.dev", "http://localhost:3000"]\n  ),\n)\ndef jwt_authentication(g: Graph):\n  deno = DenoRuntime()\n  public = Policy.public()\n\n  ctx = t.struct({"your_own_content": t.string().optional()})\n  # highlight-next-line\n  g.auth(Auth.hmac256("custom"))\n\n  g.expose(\n    get_context=deno.identity(ctx).apply(\n      {\n        "your_own_content": g.from_context(\n          "your_own_content"\n        ),\n      }\n    ),\n    default_policy=[public],\n  )',path:"examples/typegraphs/jwt.py"}},2067:e=>{e.exports={content:'typegraph({\n  name: "jwt-authentication",\n}, (g) => {\n  const deno = new DenoRuntime();\n  const pub = Policy.public();\n\n  const ctx = t.struct({\n    "your_own_content": t.string().optional(),\n  });\n  // highlight-next-line\n  g.auth(Auth.hmac256("custom"));\n\n  g.expose({\n    get_context: deno.identity(ctx).apply({\n      your_own_content: g.fromContext("your_own_content"),\n    }),\n  }, pub);\n});',path:"examples/typegraphs/jwt.ts"}},2641:e=>{e.exports={content:"",path:"examples/typegraphs/oauth2.py"}},21383:e=>{e.exports={content:'typegraph({\n  name: "oauth2-authentication",\n}, (g) => {\n  const deno = new DenoRuntime();\n  const pub = Policy.public();\n\n  const ctx = t.struct({ "exp": t.integer().optional() });\n\n  // highlight-start\n  g.auth(\n    Auth.oauth2Github("openid profile email"),\n  );\n  // highlight-end\n\n  g.expose({\n    get_context: deno.identity(ctx).apply({\n      exp: g.fromContext("exp"),\n    }),\n  }, pub);\n});',path:"examples/typegraphs/oauth2.ts"}},34316:e=>{e.exports={content:"",path:"examples/typegraphs/policies.py"}},90186:e=>{e.exports={content:'const deno = new DenoRuntime();\nconst random = new RandomRuntime({ seed: 0 });\n// `public` is sugar for `(_args, _ctx) => true`\nconst pub = Policy.public();\n\nconst admin_only = deno.policy(\n  "admin_only",\n  // note: policies either return true | false | null\n  "(args, { context }) => context.username ? context.username === \'admin\' : null",\n);\nconst user_only = deno.policy(\n  "user_only",\n  "(args, { context }) => context.username ? context.username === \'user\' : null",\n);\n\ng.auth(Auth.basic(["admin", "user"]));\n\ng.expose({\n  public: random.gen(t.string()).withPolicy(pub),\n  admin_only: random.gen(t.string()).withPolicy(admin_only),\n  user_only: random.gen(t.string()).withPolicy(user_only),\n  // if both attached policies return null, access is denied\n  both: random.gen(t.string()).withPolicy([user_only, admin_only]),\n  // set default policy for materializers\n}, pub);',path:"examples/typegraphs/policies.ts"}}}]);