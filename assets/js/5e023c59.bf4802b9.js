"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2091],{53857:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>h});var r=s(86070),t=s(25710),a=s(92465),i=s(51510);const o={sidebar_position:5},c="REST",l={id:"reference/rest/index",title:"REST",description:"Metatype also allows you to consume your API in the same way you would consume regular REST APIs. It is as easy as calling a function: g.rest(..).",source:"@site/docs/reference/rest/index.mdx",sourceDirName:"reference/rest",slug:"/reference/rest/",permalink:"/docs/reference/rest/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/rest/index.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"Ecosystem",permalink:"/docs/reference/ecosystem/"},next:{title:"Typegraph",permalink:"/docs/reference/typegraph/"}},d={},h=[{value:"General rule",id:"general-rule",level:2},{value:"Dynamic queries",id:"dynamic-queries",level:2},{value:"Auto-generated docs",id:"auto-generated-docs",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"rest",children:"REST"}),"\n",(0,r.jsxs)(n.p,{children:["Metatype also allows you to consume your API in the same way you would consume regular REST APIs. It is as easy as calling a function: ",(0,r.jsx)(n.code,{children:"g.rest(..)"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Here is a basic overview of how it looks like:"}),"\n",(0,r.jsxs)(a.Ay,{children:[(0,r.jsx)(i.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@typegraph()\ndef example(g: Graph):\n    # ..\n    g.expose(\n        pub,\n        getUsers= ..,\n    )\n\n    g.rest(\n        """\n        query users($name: String, $rows: Integer) {\n            getUsers(name: $name, option: { maxRows: $rows } ) {\n                name\n            }\n        }\n        """\n    )\n    # ..\n'})})}),(0,r.jsx)(i.A,{value:"typescript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'typegraph("example", (g) => {\n    // ..\n    g.expose({\n        getUsers: ..,\n    }, pub);\n\n    g.rest(`\n        query users($name: String, $rows: Integer) {\n            getUsers(name: $name, option: { maxRows: $rows } ) {\n                name\n            }\n        }\n    `);\n    // ..\n});\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"general-rule",children:"General rule"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"query_type endpoint_name($param1: T1, $param2: T2, ..) {\n    exposed(..) {\n        f1\n        f2 ..\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["There is no rule in what type of query you should do most of the time as everything is up to you, however the ",(0,r.jsx)("b",{children:"type of query"})," you set ",(0,r.jsx)("b",{children:"will define"})," how your endpoint should be used."]}),"\n",(0,r.jsxs)(n.p,{children:["In other words, depending on what ",(0,r.jsx)(n.code,{children:"query_type"})," (query or mutation), ",(0,r.jsx)(n.code,{children:"$param1, $param2, .."})," will be defined from the request parameters (GET) or the request body (POST)."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)("b",{children:"query"}),": Perform a ",(0,r.jsx)(n.code,{children:"GET"})," at\n",(0,r.jsx)(n.code,{children:"TYPEGATE_URL/TG_NAME/rest/endpoint_name?param1=..&param2=.."})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)("b",{children:"mutation"}),": Perform a ",(0,r.jsx)(n.code,{children:"POST"})," at ",(0,r.jsx)(n.code,{children:"TYPEGATE_URL/TG_NAME/rest/endpoint_name"}),"\nwith ",(0,r.jsx)(n.code,{children:"Content-Type"})," set as ",(0,r.jsx)(n.code,{children:"application/json"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'{\n    "param1": ..,\n    "param2": ..,\n    ..\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In the example above, for a local instance, the endpoint might look like: ",(0,r.jsx)(n.code,{children:"http://localhost:7890/example/rest/users?name=Bob&rows=10"})]}),"\n",(0,r.jsx)(n.h2,{id:"dynamic-queries",children:"Dynamic queries"}),"\n",(0,r.jsx)(n.p,{children:"This enables/disables all non-static queries, i.e. queries whose output or side effects depend on certain parameters."}),"\n",(0,r.jsxs)(n.p,{children:["By default, ",(0,r.jsx)(n.code,{children:"dynamic"})," is always on."]}),"\n",(0,r.jsxs)(a.Ay,{children:[(0,r.jsx)(i.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@typegraph(dynamic=False)\ndef my_typegraph(g: Graph):\n    # ..\n\n"})})}),(0,r.jsx)(i.A,{value:"typescript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'typegraph({ name: "my-typegraph", dynamic: false }, (g) => {\n  // ..\n});\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"auto-generated-docs",children:"Auto-generated docs"}),"\n",(0,r.jsx)(n.p,{children:"In any case, you can always check the auto-generated documentation of the available endpoints, parameters, output shapes."}),"\n",(0,r.jsxs)(n.p,{children:["You can browse it at ",(0,r.jsx)(n.code,{children:"TYPEGATE_URL/TG_NAME/rest"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Or download the OpenAPI spec at ",(0,r.jsx)(n.code,{children:"TYPEGATE_URL/TG_NAME/rest/__schema"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},92465:(e,n,s)=>{s.d(n,{Ay:()=>i,gc:()=>o});s(30758);var r=s(53096),t=s(43236),a=s(86070);function i(e){let{children:n}=e;const[s,i]=(0,r.e)();return(0,a.jsx)(t.mS,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:s,onChange:i,children:n})}function o(e){let{children:n}=e;const[s]=(0,r.e)();return(0,a.jsx)(t.q9,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:s,children:n})}}}]);