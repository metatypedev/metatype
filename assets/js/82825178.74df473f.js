"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7716],{82016:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>g});var r=t(13274),a=t(99128),i=t(86671),o=t(30947);const s={},p="Programmatic deployment",c={id:"reference/programmatic-deployment/index",title:"Programmatic deployment",description:"The SDKs are complete enough to enable deploying typegraphs without using meta cli, the later being built as a convenience tool for everyday use.",source:"@site/docs/reference/programmatic-deployment/index.mdx",sourceDirName:"reference/programmatic-deployment",slug:"/reference/programmatic-deployment/",permalink:"/docs/reference/programmatic-deployment/",draft:!1,unlisted:!1,editUrl:"https://github.com/metatypedev/metatype/tree/main/website/docs/reference/programmatic-deployment/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Changelog",permalink:"/docs/reference/changelog"},next:{title:"Features",permalink:"/docs/concepts/features-overview/"}},l={},g=[{value:"Deploy typegraphs",id:"deploy-typegraphs",level:2},{value:"Undeploy typegraphs",id:"undeploy-typegraphs",level:2}];function m(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"programmatic-deployment",children:"Programmatic deployment"}),"\n",(0,r.jsxs)(n.p,{children:["The SDKs are complete enough to enable deploying typegraphs without using ",(0,r.jsx)(n.a,{href:"/docs/reference/meta-cli",children:"meta cli"}),", the later being built as a convenience tool for everyday use."]}),"\n",(0,r.jsx)(n.p,{children:"Common use cases:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Testing"}),"\n",(0,r.jsx)(n.li,{children:"Manage everything programmatically"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"deploy-typegraphs",children:"Deploy typegraphs"}),"\n",(0,r.jsxs)(n.p,{children:["This can be done using the ",(0,r.jsx)(n.code,{children:"tgRemove"}),"/",(0,r.jsx)(n.code,{children:"tg_remove"})," function.",(0,r.jsx)(n.br,{}),"\n","You are required to provide the configurations and also handle migrations by yourself (if any)."]}),"\n",(0,r.jsxs)(i.Ay,{children:[(0,r.jsx)(o.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from os import path\nfrom typegraph import Graph, Policy, t, typegraph\nfrom typegraph.runtimes.deno import DenoRuntime\n\nfrom typegraph.wit import ArtifactResolutionConfig, MigrationAction, MigrationConfig\nfrom typegraph.utils import unpack_tarb64\nfrom typegraph.graph.tg_deploy import BasicAuth, TypegraphDeployParams, tg_deploy\n\n# Your typegraph\n@typegraph()\ndef example(g: Graph):\n    deno = DenoRuntime()\n    pub = Policy.public()\n\n    g.expose(\n        pub,\n        sayHello=deno.import_(\n            t.struct({"name": t.string()}),\n            t.string(),\n            module="path/to/say_hello.ts",\n            name="sayHello",\n        ),\n    )\n\n# Configure your deployment\ntg = example()\n\nconfig_params = MigrationConfig(\n    migration_dir=path.join("prisma-migrations", tg.name),\n    global_action=MigrationAction(\n        create=True,\n        reset=True  # allow destructive migrations\n    ),\n    runtime_actions=None,\n)\nartifacts_config = ArtifactResolutionConfig(\n    prisma_migration=config_params,\n    prefix=None,\n    dir=None,  # artifacts are resolved relative to this path\n    disable_artifact_resolution=None,\n    codegen=None,\n)\nconfig = TypegraphDeployParams(\n    base_url="<TYPEGATE_URL>",\n    auth=BasicAuth(username="<USERNAME>", password="<PASSWORD>"),\n    artifacts_config=artifacts_config,\n    secrets={"POSTGRES": "<DB_URL>"},\n)\n\n# Deploy to typegate\nres = tg_deploy(tg, config)\n\nmigrations = res.typegate["data"]["addTypegraph"]["migrations"] or []\nfor item in migrations:\n    base_dir = artifacts_config.prisma_migration.migration_dir\n    # Convention, however if migration_dir is absolute then you might want to use that instead\n    # cwd + tg_name + runtime_name\n    full_path = path.join(base_dir, item["runtime"])\n    unpack_tarb64(item["migrations"], full_path)\n    print(f"Unpacked migrations at {full_path}")\n\n'})})}),(0,r.jsx)(o.A,{value:"typescript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { Policy, t, typegraph } from "@typegraph/sdk/index.js";\nimport { DenoRuntime } from "@typegraph/sdk/runtimes/deno.js";\nimport * as path from "path";\n\nimport { wit_utils } from "@typegraph/sdk/wit.js";\nimport { BasicAuth, tgDeploy } from "@typegraph/sdk/tg_deploy.js";\n\n// Your typegraph\nconst tg = await typegraph("example", (g) => {\n  const deno = new DenoRuntime();\n  const pub = Policy.public();\n\n  g.expose({\n    sayHello: deno.import(\n      t.struct({ name: t.string() }),\n      t.string(),\n      { module: "path/to/say_hello.ts", name: "sayHello" },\n    ),\n  }, pub);\n});\n\n// Configure your deployment\nconst artifactsConfig = {\n  prismaMigration: {\n    globalAction: {\n      create: true,\n      reset: true, // allow destructive migrations\n    },\n    migrationDir: path.join("prisma-migrations", tg.name),\n  },\n // dir: "." // artifacts are resolved relative to this path\n};\n\nconst config = {\n  baseUrl: "<TYPEGATE_URL>",\n  auth: new BasicAuth("<USERNAME>", "<PASSWORD>");,\n  secrets: { POSTGRES: "<DB_URL>" },\n  artifactsConfig,\n};\n\n// Deploy to typegate\ntgDeploy(tg, config).then(({ typegate }) => {\n  const selection = typegate?.data?.addTypegraph;\n  if (selection) {\n    const { migrations, messages } = selection;\n    migrations.map(({ runtime, migrations }) => {\n      // Convention, however if migrationDir is absolute then you might want to use that instead\n      // cwd + tg_name\n      const baseDir = artifactsConfig.prismaMigration.migrationDir;\n      // cwd + tg_name + runtime_name\n      const fullPath = path.join(baseDir, runtime);\n      wit_utils.unpackTarb64(migrations, fullPath);\n      console.log(`Unpacked migrations at ${fullPath}`);\n    });\n  } else {\n    throw new Error(JSON.stringify(typegate));\n  }\n})\n  .catch(console.error);\n\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"undeploy-typegraphs",children:"Undeploy typegraphs"}),"\n",(0,r.jsxs)(n.p,{children:["Similarly to the above, you can undeploy typegraphs using the ",(0,r.jsx)(n.code,{children:"tgRemove"}),"/",(0,r.jsx)(n.code,{children:"tg_remove"})," function."]}),"\n",(0,r.jsxs)(i.Ay,{children:[(0,r.jsx)(o.A,{value:"python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# ..\nfrom typegraph.graph.tg_deploy import BasicAuth, TypegraphRemoveParams, tg_remove\n\n# Your typegraph\n@typegraph()\ndef example(g: Graph):\n    # ..\n\ntg = example()\nres = tg_remove(tg, TypegraphRemoveParams(\n    base_url="<TYPEGATE_URL>",\n    auth=BasicAuth(username="<USERNAME>", password="<PASSWORD>"),\n))\n\n# Response from typegate\nprint(res.typegate)\n'})})}),(0,r.jsx)(o.A,{value:"typescript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// ..\nimport { BasicAuth, tgDeploy } from "@typegraph/sdk/tg_deploy.js";\n\n// Your typegraph\nconst tg = await typegraph("example", (g) => {\n // ..\n});\n\nconst { typegate } = await tgRemove(tg, {\n  baseUrl: "<TYPEGATE_URL>",\n  auth: new BasicAuth("<USERNAME>", "<PASSWORD>"),\n});\n\n// Response from typegate\nconsole.log(typegate);\n'})})})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},86671:(e,n,t)=>{t.d(n,{Ay:()=>o,gc:()=>s});t(79474);var r=t(82192),a=t(2222),i=t(13274);function o(e){let{children:n}=e;const[t,o]=(0,r.e)();return(0,i.jsx)(a.mS,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,onChange:o,children:n})}function s(e){let{children:n}=e;const[t]=(0,r.e)();return(0,i.jsx)(a.q9,{choices:{typescript:"Typescript SDK",python:"Python SDK"},choice:t,children:n})}}}]);