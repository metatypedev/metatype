// This file was @generated by metagen and is intended
// to be generated again on subsequent metagen runs.
#![cfg_attr(rustfmt, rustfmt_skip)]

// gen-static-start
#![allow(dead_code)]

pub mod wit {
    wit_bindgen::generate!({
        pub_export_macro: true,
        

        inline: "package metatype:wit-wire;

interface typegate-wire {
  hostcall: func(op-name: string, json: string) -> result<string, string>;
}

interface mat-wire {
  type json-str = string;

  record mat-info {
    op-name: string,
    mat-title: string,
    mat-hash: string,
    mat-data-json: string,
  }

  record init-args {
    metatype-version: string,
    expected-ops: list<mat-info>
  }

  record init-response {
    ok: bool
  }

  variant init-error {
    version-mismatch(string),
    unexpected-mat(mat-info),
    other(string)
  }

  init: func(args: init-args) -> result<init-response, init-error>;

  record handle-req {
    op-name: string,
    in-json: json-str,
  }

  variant handle-err {
    no-handler,
    in-json-err(string),
    handler-err(string),
  }

  handle: func(req: handle-req) -> result<json-str, handle-err>;
}

world wit-wire {
  import typegate-wire;

  export mat-wire;
}
"
    });
}

use std::cell::RefCell;
use std::collections::HashMap;

use wit::exports::metatype::wit_wire::mat_wire::*;
use wit::metatype::wit_wire::typegate_wire::hostcall;

pub type HandlerFn = Box<dyn Fn(&str, Ctx) -> Result<String, HandleErr>>;

pub struct ErasedHandler {
    mat_id: String,
    mat_trait: String,
    mat_title: String,
    handler_fn: HandlerFn,
}

pub struct MatBuilder {
    handlers: HashMap<String, ErasedHandler>,
}

impl Default for MatBuilder {
    fn default() -> Self {
        Self::new()
    }
}

impl MatBuilder {
    pub fn new() -> Self {
        Self {
            handlers: Default::default(),
        }
    }

    pub fn register_handler(mut self, handler: ErasedHandler) -> Self {
        self.handlers.insert(handler.mat_trait.clone(), handler);
        self
    }
}

pub struct Router {
    handlers: HashMap<String, ErasedHandler>,
}

impl Router {
    pub fn from_builder(builder: MatBuilder) -> Self {
        Self {
            handlers: builder.handlers,
        }
    }

    pub fn init(&self, args: InitArgs) -> Result<InitResponse, InitError> {
        static MT_VERSION: &str = "0.5.1-rc.3";
        if args.metatype_version != MT_VERSION {
            return Err(InitError::VersionMismatch(MT_VERSION.into()));
        }
        for info in args.expected_ops {
            let mat_trait = stubs::op_to_trait_name(&info.op_name);
            if !self.handlers.contains_key(mat_trait) {
                return Err(InitError::UnexpectedMat(info));
            }
        }
        Ok(InitResponse { ok: true })
    }

    pub fn handle(&self, req: HandleReq) -> Result<String, HandleErr> {
        let mat_trait = stubs::op_to_trait_name(&req.op_name);
        let Some(handler) = self.handlers.get(mat_trait) else {
            return Err(HandleErr::NoHandler);
        };
        let qg = query_graph();
        let cx = Ctx {
            host: transports::hostcall(&qg),
            qg,
        };
        (handler.handler_fn)(&req.in_json, cx)
    }
}

pub type InitCallback = fn() -> anyhow::Result<MatBuilder>;

thread_local! {
    pub static MAT_STATE: RefCell<Router> = panic!("MAT_STATE has not been initialized");
}


pub struct Ctx {
    pub qg: QueryGraph,
    pub host: metagen_client::hostcall::HostcallTransport,
}

impl Ctx {
    pub fn gql<O>(
        &self,
        query: &str,
        variables: impl Into<serde_json::Value>,
    ) -> Result<O, GraphqlRunError>
    where
        O: serde::de::DeserializeOwned,
    {
        match hostcall(
            "gql",
            &serde_json::to_string(&serde_json::json!({
                "query": query,
                "variables": variables.into(),
            }))?,
        ) {
            Ok(json) => Ok(serde_json::from_str(&json[..])?),
            Err(json) => Err(GraphqlRunError::HostError(serde_json::from_str(&json)?)),
        }
    }
}

#[derive(Debug)]
pub enum GraphqlRunError {
    JsonError(serde_json::Error),
    HostError(serde_json::Value),
}

impl std::error::Error for GraphqlRunError {}

impl From<serde_json::Error> for GraphqlRunError {
    fn from(value: serde_json::Error) -> Self {
        Self::JsonError(value)
    }
}

impl std::fmt::Display for GraphqlRunError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GraphqlRunError::JsonError(msg) => write!(f, "json error: {msg}"),
            GraphqlRunError::HostError(serde_json::Value::Object(map))
                if map.contains_key("message") =>
            {
                write!(f, "host error: {}", map["message"])
            }
            GraphqlRunError::HostError(val) => write!(f, "host error: {val:?}"),
        }
    }
}

#[macro_export]
macro_rules! init_mat {
    (hook: $init_hook:expr) => {
        struct MatWireGuest;
        use wit::exports::metatype::wit_wire::mat_wire::*;
        wit::export!(MatWireGuest with_types_in wit);

        #[allow(unused)]
        impl Guest for MatWireGuest {
            fn handle(req: HandleReq) -> Result<String, HandleErr> {
                MAT_STATE.with(|router| {
                    let router = router.borrow();
                    router.handle(req)
                })
            }

            fn init(args: InitArgs) -> Result<InitResponse, InitError> {
                let hook = $init_hook;
                let router = Router::from_builder(hook());
                let resp = router.init(args)?;
                MAT_STATE.set(router);
                Ok(resp)
            }
        }
    };
}
// gen-static-end
use core::marker::PhantomData;
use metagen_client::prelude::*;

/// Contains constructors for the different transports supported
/// by the typegate. Namely:
/// - GraphQl transports ([sync](transports::graphql)/[async](transports::graphql_sync)): reqwest
///   based transports that talk to the typegate using GraphQl over HTTP.
/// - [Hostcall transport](transports::hostcall): used by custom functions running in the typegate to access typegraphs.
pub mod transports {
    use super::*;



    pub fn hostcall(qg: &QueryGraph) -> metagen_client::hostcall::HostcallTransport {
        metagen_client::hostcall::HostcallTransport::new(
            std::sync::Arc::new(super::hostcall),
            qg.ty_to_gql_ty_map.clone(),
        )
    }
}

//
// --- --- QueryGraph types --- --- //
//

#[derive(Clone)]
pub struct QueryGraph {
    ty_to_gql_ty_map: TyToGqlTyMap,
}

//
// --- --- Typegraph types --- --- //
//

#[allow(non_snake_case)]
mod node_metas {
    use super::*;
    pub fn scalar() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            sub_nodes: None,
            variants: None,
            input_files: None,
        }
    }    
    pub fn RemixTrack() -> NodeMeta {
        NodeMeta {
            arg_types: Some(
                [
                    ("artist".into(), "idv3_title_string".into()),
                    ("mp3Url".into(), "idv3_mp3Url_string_uri".into()),
                    ("releaseTime".into(), "idv3_releaseTime_string_datetime".into()),
                    ("title".into(), "idv3_title_string".into()),
                ].into()
            ),
            ..Idv3()
        }
    }
    pub fn Idv3() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("title".into(), scalar as NodeMetaFn),
                    ("artist".into(), scalar as NodeMetaFn),
                    ("releaseTime".into(), scalar as NodeMetaFn),
                    ("mp3Url".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }

}
use types::*;
#[allow(unused)]
pub mod types {
    // input types
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Idv3 {
        pub title: Idv3TitleString,
        pub artist: Idv3TitleString,
        #[serde(rename = "releaseTime")]
        pub release_time: Idv3ReleaseTimeStringDatetime,
        #[serde(rename = "mp3Url")]
        pub mp3_url: Idv3Mp3UrlStringUri,
    }
    pub type Idv3TitleString = String;
    pub type Idv3ReleaseTimeStringDatetime = String;
    pub type Idv3Mp3UrlStringUri = String;
    // partial output types
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Idv3Partial {
        pub title: Option<Idv3TitleString>,
        pub artist: Option<Idv3TitleString>,
        #[serde(rename = "releaseTime")]
        pub release_time: Option<Idv3ReleaseTimeStringDatetime>,
        #[serde(rename = "mp3Url")]
        pub mp3_url: Option<Idv3Mp3UrlStringUri>,
    }
    // output types
}
#[derive(Default, Debug)]
pub struct Idv3Selections<ATy = NoAlias> {
    pub title: ScalarSelect<ATy>,
    pub artist: ScalarSelect<ATy>,
    pub release_time: ScalarSelect<ATy>,
    pub mp3_url: ScalarSelect<ATy>,
}
impl_selection_traits!(Idv3Selections, title, artist, release_time, mp3_url);

pub fn query_graph() -> QueryGraph {
    QueryGraph {
        ty_to_gql_ty_map: std::sync::Arc::new([
            ("idv3_title_string".into(), "String!".into()),
            ("idv3_releaseTime_string_datetime".into(), "String!".into()),
            ("idv3_mp3Url_string_uri".into(), "String!".into()),
        ].into()),
    }
}
    impl QueryGraph{

    pub fn remix(
        &self,
        args: impl Into<NodeArgs<Idv3>>
    ) -> UnselectedNode<Idv3Selections, Idv3Selections<HasAlias>, QueryMarker, Idv3Partial>
    {
        UnselectedNode {
            root_name: "remix".into(),
            root_meta: node_metas::RemixTrack,
            args: args.into().into(),
            _marker: PhantomData,
        }
    }
}
pub mod stubs {
    use super::*;
    pub trait RemixTrack: Sized + 'static {
        fn erased(self) -> ErasedHandler {
            ErasedHandler {
                mat_id: "remix_track".into(),
                mat_title: "remix_track".into(),
                mat_trait: "RemixTrack".into(),
                handler_fn: Box::new(move |req, cx| {
                    let req = serde_json::from_str(req)
                        .map_err(|err| HandleErr::InJsonErr(format!("{err}")))?;
                    let res = self
                        .handle(req, cx)
                        .map_err(|err| HandleErr::HandlerErr(format!("{err}")))?;
                    serde_json::to_string(&res)
                        .map_err(|err| HandleErr::HandlerErr(format!("{err}")))
                }),
            }
        }

        fn handle(&self, input: Idv3, cx: Ctx) -> anyhow::Result<Idv3>;
    }
    pub fn op_to_trait_name(op_name: &str) -> &'static str {
        match op_name {
            "remix_track" => "RemixTrack",
            _ => panic!("unrecognized op_name: {op_name}"),
        }
    }
}
