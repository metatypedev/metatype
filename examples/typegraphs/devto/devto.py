from typegraph import policies
from typegraph import t
from typegraph import TypeGraph
from typegraph.importers.base.importer import Import
from typegraph.importers.openapi import OpenApiImporter
from typegraph.runtimes.http import HTTPRuntime


OpenApiImporter(
    "devto",
    url="https://raw.githubusercontent.com/APIs-guru/openapi-directory/main/APIs/dev.to/0.9.7/openapi.yaml",
    keep_names=["Listing", "ListingCategory"],
).imp(False)


# Function generated by OpenApiImporter. Do not change.
def import_devto():
    devto = HTTPRuntime("https://dev.to/api")

    renames = {
        "APIError": "_devto_1_APIError",
        "ArticleCreate": "_devto_2_ArticleCreate",
        "ArticleFlareTag": "_devto_3_ArticleFlareTag",
        "ArticleIndex": "_devto_4_ArticleIndex",
        "ArticleMe": "_devto_5_ArticleMe",
        "ArticleShow": "_devto_6_ArticleShow",
        "ArticleUpdate": "_devto_7_ArticleUpdate",
        "ArticleVideo": "_devto_8_ArticleVideo",
        "Comment": "_devto_9_Comment",
        "FollowedTag": "_devto_10_FollowedTag",
        "Follower": "_devto_11_Follower",
        "Listing": "Listing",
        "ListingCategory": "ListingCategory",
        "ListingCreate": "_devto_14_ListingCreate",
        "ListingUpdate": "_devto_15_ListingUpdate",
        "Organization": "_devto_16_Organization",
        "PodcastEpisode": "_devto_17_PodcastEpisode",
        "ProfileImage": "_devto_18_ProfileImage",
        "ReadingList": "_devto_19_ReadingList",
        "SharedOrganization": "_devto_20_SharedOrganization",
        "SharedUser": "_devto_21_SharedUser",
        "Tag": "_devto_22_Tag",
        "User": "_devto_23_User",
        "WebhookCreate": "_devto_24_WebhookCreate",
        "WebhookIndex": "_devto_25_WebhookIndex",
        "WebhookShow": "_devto_26_WebhookShow",
    }

    types = {}
    types["APIError"] = t.struct({"error": t.string(), "status": t.integer()}).named(
        renames["APIError"]
    )
    types["ArticleCreate"] = t.struct(
        {
            "article": t.struct(
                {
                    "body_markdown": t.string().optional(),
                    "canonical_url": t.string().optional(),
                    "description": t.string().optional(),
                    "main_image": t.string().optional(),
                    "organization_id": t.integer().optional(),
                    "published": t.boolean().optional(),
                    "series": t.string().optional(),
                    "tags": t.array(t.string()).optional(),
                    "title": t.string().optional(),
                }
            ).optional()
        }
    ).named(renames["ArticleCreate"])
    types["ArticleFlareTag"] = t.struct(
        {
            "bg_color_hex": t.string().optional(),
            "name": t.string().optional(),
            "text_color_hex": t.string().optional(),
        }
    ).named(renames["ArticleFlareTag"])
    types["ArticleIndex"] = t.struct(
        {
            "canonical_url": t.string(),
            "comments_count": t.integer(),
            "cover_image": t.string(),
            "created_at": t.string(),
            "crossposted_at": t.string(),
            "description": t.string(),
            "edited_at": t.string(),
            "flare_tag": t.proxy(renames["ArticleFlareTag"]).optional(),
            "id": t.integer(),
            "last_comment_at": t.string(),
            "organization": t.proxy(renames["SharedOrganization"]).optional(),
            "path": t.string(),
            "positive_reactions_count": t.integer(),
            "public_reactions_count": t.integer(),
            "published_at": t.string(),
            "published_timestamp": t.string(),
            "readable_publish_date": t.string(),
            "reading_time_minutes": t.integer(),
            "slug": t.string(),
            "social_image": t.string(),
            "tag_list": t.array(t.string()),
            "tags": t.string(),
            "title": t.string(),
            "type_of": t.string(),
            "url": t.string(),
            "user": t.proxy(renames["SharedUser"]),
        }
    ).named(renames["ArticleIndex"])
    types["ArticleMe"] = t.struct(
        {
            "body_markdown": t.string(),
            "canonical_url": t.string(),
            "comments_count": t.integer(),
            "cover_image": t.string(),
            "description": t.string(),
            "flare_tag": t.proxy(renames["ArticleFlareTag"]).optional(),
            "id": t.integer(),
            "organization": t.proxy(renames["SharedOrganization"]).optional(),
            "page_views_count": t.integer(),
            "path": t.string(),
            "positive_reactions_count": t.integer(),
            "public_reactions_count": t.integer(),
            "published": t.boolean(),
            "published_at": t.string(),
            "published_timestamp": t.string(),
            "reading_time_minutes": t.integer(),
            "slug": t.string(),
            "tag_list": t.array(t.string()),
            "title": t.string(),
            "type_of": t.string(),
            "url": t.string(),
            "user": t.proxy(renames["SharedUser"]),
        }
    ).named(renames["ArticleMe"])
    types["ArticleShow"] = t.struct(
        {
            "body_html": t.string(),
            "body_markdown": t.string(),
            "canonical_url": t.string(),
            "comments_count": t.integer(),
            "cover_image": t.string(),
            "created_at": t.string(),
            "crossposted_at": t.string(),
            "description": t.string(),
            "edited_at": t.string(),
            "flare_tag": t.proxy(renames["ArticleFlareTag"]).optional(),
            "id": t.integer(),
            "last_comment_at": t.string(),
            "organization": t.proxy(renames["SharedOrganization"]).optional(),
            "path": t.string(),
            "positive_reactions_count": t.integer(),
            "public_reactions_count": t.integer(),
            "published_at": t.string(),
            "published_timestamp": t.string(),
            "readable_publish_date": t.string(),
            "reading_time_minutes": t.integer(),
            "slug": t.string(),
            "social_image": t.string(),
            "tag_list": t.string(),
            "tags": t.array(t.string()),
            "title": t.string(),
            "type_of": t.string(),
            "url": t.string(),
            "user": t.proxy(renames["SharedUser"]),
        }
    ).named(renames["ArticleShow"])
    types["ArticleUpdate"] = t.struct(
        {
            "article": t.struct(
                {
                    "body_markdown": t.string().optional(),
                    "canonical_url": t.string().optional(),
                    "description": t.string().optional(),
                    "main_image": t.string().optional(),
                    "organization_id": t.integer().optional(),
                    "published": t.boolean().optional(),
                    "series": t.string().optional(),
                    "tags": t.array(t.string()).optional(),
                    "title": t.string().optional(),
                }
            ).optional()
        }
    ).named(renames["ArticleUpdate"])
    types["ArticleVideo"] = t.struct(
        {
            "cloudinary_video_url": t.string(),
            "id": t.integer(),
            "path": t.string(),
            "title": t.string(),
            "type_of": t.string(),
            "user": t.struct({"name": t.string().optional()}),
            "user_id": t.integer(),
            "video_duration_in_minutes": t.string(),
            "video_source_url": t.string(),
        }
    ).named(renames["ArticleVideo"])
    types["Comment"] = t.struct(
        {
            "body_html": t.string(),
            "children": t.array(t.proxy(renames["Comment"])),
            "created_at": t.string(),
            "id_code": t.string(),
            "type_of": t.string(),
            "user": t.proxy(renames["SharedUser"]),
        }
    ).named(renames["Comment"])
    types["FollowedTag"] = t.struct(
        {"id": t.integer(), "name": t.string(), "points": t.number()}
    ).named(renames["FollowedTag"])
    types["Follower"] = t.struct(
        {
            "created_at": t.string(),
            "id": t.integer(),
            "name": t.string(),
            "path": t.string(),
            "profile_image": t.string(),
            "type_of": t.string(),
            "username": t.string(),
        }
    ).named(renames["Follower"])
    types["Listing"] = t.struct(
        {
            "body_markdown": t.string(),
            "category": t.proxy(renames["ListingCategory"]),
            "id": t.integer(),
            "organization": t.proxy(renames["SharedOrganization"]).optional(),
            "processed_html": t.string(),
            "published": t.boolean(),
            "slug": t.string(),
            "tag_list": t.string(),
            "tags": t.array(t.string()),
            "title": t.string(),
            "type_of": t.string(),
            "user": t.proxy(renames["SharedUser"]),
        }
    ).named(renames["Listing"])
    types["ListingCategory"] = t.string().named(renames["ListingCategory"])
    types["ListingCreate"] = t.struct(
        {
            "listing": t.struct(
                {
                    "action": t.string().optional(),
                    "body_markdown": t.string(),
                    "category": t.proxy(renames["ListingCategory"]),
                    "contact_via_connect": t.boolean().optional(),
                    "expires_at": t.string().optional(),
                    "location": t.string().optional(),
                    "organization_id": t.integer().optional(),
                    "tag_list": t.string().optional(),
                    "tags": t.array(t.string()).optional(),
                    "title": t.string(),
                }
            ).optional()
        }
    ).named(renames["ListingCreate"])
    types["ListingUpdate"] = t.struct(
        {
            "listing": t.struct(
                {
                    "action": t.string().optional(),
                    "body_markdown": t.string().optional(),
                    "category": t.proxy(renames["ListingCategory"]).optional(),
                    "contact_via_connect": t.boolean().optional(),
                    "expires_at": t.string().optional(),
                    "location": t.string().optional(),
                    "tag_list": t.string().optional(),
                    "tags": t.array(t.string()).optional(),
                    "title": t.string().optional(),
                }
            ).optional()
        }
    ).named(renames["ListingUpdate"])
    types["Organization"] = t.struct(
        {
            "github_username": t.string().optional(),
            "joined_at": t.string().optional(),
            "location": t.string().optional(),
            "name": t.string().optional(),
            "profile_image": t.string().optional(),
            "story": t.string().optional(),
            "summary": t.string().optional(),
            "tag_line": t.string().optional(),
            "tech_stack": t.string().optional(),
            "twitter_username": t.string().optional(),
            "type_of": t.string().optional(),
            "url": t.string().optional(),
            "username": t.string().optional(),
        }
    ).named(renames["Organization"])
    types["PodcastEpisode"] = t.struct(
        {
            "id": t.integer(),
            "image_url": t.string(),
            "path": t.string(),
            "podcast": t.struct(
                {
                    "image_url": t.string().optional(),
                    "slug": t.string().optional(),
                    "title": t.string().optional(),
                }
            ),
            "title": t.string(),
            "type_of": t.string(),
        }
    ).named(renames["PodcastEpisode"])
    types["ProfileImage"] = t.struct(
        {
            "image_of": t.string().optional(),
            "profile_image": t.string().optional(),
            "profile_image_90": t.string().optional(),
            "type_of": t.string().optional(),
        }
    ).named(renames["ProfileImage"])
    types["ReadingList"] = t.struct(
        {
            "article": t.proxy(renames["ArticleIndex"]),
            "created_at": t.string(),
            "id": t.integer(),
            "status": t.string(),
            "type_of": t.string(),
        }
    ).named(renames["ReadingList"])
    types["SharedOrganization"] = t.struct(
        {
            "name": t.string().optional(),
            "profile_image": t.string().optional(),
            "profile_image_90": t.string().optional(),
            "slug": t.string().optional(),
            "username": t.string().optional(),
        }
    ).named(renames["SharedOrganization"])
    types["SharedUser"] = t.struct(
        {
            "github_username": t.string().optional(),
            "name": t.string().optional(),
            "profile_image": t.string().optional(),
            "profile_image_90": t.string().optional(),
            "twitter_username": t.string().optional(),
            "username": t.string().optional(),
            "website_url": t.string().optional(),
        }
    ).named(renames["SharedUser"])
    types["Tag"] = t.struct(
        {
            "bg_color_hex": t.string(),
            "id": t.integer(),
            "name": t.string(),
            "text_color_hex": t.string(),
        }
    ).named(renames["Tag"])
    types["User"] = t.struct(
        {
            "github_username": t.string(),
            "id": t.integer(),
            "joined_at": t.string(),
            "location": t.string(),
            "name": t.string(),
            "profile_image": t.string(),
            "summary": t.string(),
            "twitter_username": t.string(),
            "type_of": t.string(),
            "username": t.string(),
            "website_url": t.string(),
        }
    ).named(renames["User"])
    types["WebhookCreate"] = t.struct(
        {
            "webhook_endpoint": t.struct(
                {
                    "events": t.array(t.string()),
                    "source": t.string(),
                    "target_url": t.string(),
                }
            ).optional()
        }
    ).named(renames["WebhookCreate"])
    types["WebhookIndex"] = t.struct(
        {
            "created_at": t.string().optional(),
            "events": t.array(t.string()).optional(),
            "id": t.integer().optional(),
            "source": t.string().optional(),
            "target_url": t.string().optional(),
            "type_of": t.string().optional(),
        }
    ).named(renames["WebhookIndex"])
    types["WebhookShow"] = t.struct(
        {
            "created_at": t.string().optional(),
            "events": t.array(t.string()).optional(),
            "id": t.integer().optional(),
            "source": t.string().optional(),
            "target_url": t.string().optional(),
            "type_of": t.string().optional(),
            "user": t.proxy(renames["SharedUser"]).optional(),
        }
    ).named(renames["WebhookShow"])

    functions = {}
    functions["getArticles"] = devto.get(
        "/articles",
        t.struct(
            {
                "page": t.integer(),
                "per_page": t.integer(),
                "tag": t.string(),
                "tags": t.string(),
                "tags_exclude": t.string(),
                "username": t.string(),
                "state": t.string(),
                "top": t.integer(),
                "collection_id": t.integer(),
            }
        ),
        t.array(t.proxy(renames["ArticleIndex"])),
    )
    functions["createArticle"] = devto.post(
        "/articles",
        t.struct(
            {
                "article": t.struct(
                    {
                        "body_markdown": t.string().optional(),
                        "canonical_url": t.string().optional(),
                        "description": t.string().optional(),
                        "main_image": t.string().optional(),
                        "organization_id": t.integer().optional(),
                        "published": t.boolean().optional(),
                        "series": t.string().optional(),
                        "tags": t.array(t.string()).optional(),
                        "title": t.string().optional(),
                    }
                ).optional()
            }
        ),
        t.proxy(renames["ArticleShow"]),
        content_type="application/json",
        body_fields=("article",),
    )
    functions["getLatestArticles"] = devto.get(
        "/articles/latest",
        t.struct({"page": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["ArticleIndex"])),
    )
    functions["getUserArticles"] = devto.get(
        "/articles/me",
        t.struct({"page": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["ArticleMe"])),
    )
    functions["getUserAllArticles"] = devto.get(
        "/articles/me/all",
        t.struct({"page": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["ArticleMe"])),
    )
    functions["getUserPublishedArticles"] = devto.get(
        "/articles/me/published",
        t.struct({"page": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["ArticleMe"])),
    )
    functions["getUserUnpublishedArticles"] = devto.get(
        "/articles/me/unpublished",
        t.struct({"page": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["ArticleMe"])),
    )
    functions["getArticleById"] = devto.get(
        "/articles/{id}",
        t.struct({"id": t.integer()}),
        t.proxy(renames["ArticleShow"]).optional(),
    )
    functions["updateArticle"] = devto.put(
        "/articles/{id}",
        t.struct(
            {
                "id": t.integer(),
                "article": t.struct(
                    {
                        "body_markdown": t.string().optional(),
                        "canonical_url": t.string().optional(),
                        "description": t.string().optional(),
                        "main_image": t.string().optional(),
                        "organization_id": t.integer().optional(),
                        "published": t.boolean().optional(),
                        "series": t.string().optional(),
                        "tags": t.array(t.string()).optional(),
                        "title": t.string().optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["ArticleShow"]),
        content_type="application/json",
        body_fields=("article",),
    )
    functions["getArticleByPath"] = devto.get(
        "/articles/{username}/{slug}",
        t.struct({"username": t.string(), "slug": t.string()}),
        t.proxy(renames["ArticleShow"]).optional(),
    )
    functions["getCommentsByArticleId"] = devto.get(
        "/comments",
        t.struct({"a_id": t.integer(), "p_id": t.integer()}),
        t.array(t.proxy(renames["Comment"])).optional(),
    )
    functions["getCommentById"] = devto.get(
        "/comments/{id}",
        t.struct({"id": t.string()}),
        t.proxy(renames["Comment"]).optional(),
    )
    functions["getFollowers"] = devto.get(
        "/followers/users",
        t.struct({"page": t.integer(), "per_page": t.integer(), "sort": t.string()}),
        t.array(t.proxy(renames["Follower"])),
    )
    functions["getFollowedTags"] = devto.get(
        "/follows/tags",
        t.struct({}),
        t.array(t.proxy(renames["FollowedTag"])),
    )
    functions["getListings"] = devto.get(
        "/listings",
        t.struct(
            {"page": t.integer(), "per_page": t.integer(), "category": t.string()}
        ),
        t.array(t.proxy(renames["Listing"])),
    )
    functions["createListing"] = devto.post(
        "/listings",
        t.struct(
            {
                "listing": t.struct(
                    {
                        "action": t.string().optional(),
                        "body_markdown": t.string(),
                        "category": t.proxy(renames["ListingCategory"]),
                        "contact_via_connect": t.boolean().optional(),
                        "expires_at": t.string().optional(),
                        "location": t.string().optional(),
                        "organization_id": t.integer().optional(),
                        "tag_list": t.string().optional(),
                        "tags": t.array(t.string()).optional(),
                        "title": t.string(),
                    }
                ).optional()
            }
        ),
        t.proxy(renames["Listing"]),
        content_type="application/json",
        body_fields=("listing",),
    )
    functions["getListingsByCategory"] = devto.get(
        "/listings/category/{category}",
        t.struct(
            {
                "category": t.proxy(renames["ListingCategory"]),
                "page": t.integer(),
                "per_page": t.integer(),
            }
        ),
        t.array(t.proxy(renames["Listing"])),
    )
    functions["getListingById"] = devto.get(
        "/listings/{id}",
        t.struct({"id": t.integer()}),
        t.proxy(renames["Listing"]).optional(),
    )
    functions["updateListing"] = devto.put(
        "/listings/{id}",
        t.struct(
            {
                "id": t.integer(),
                "listing": t.struct(
                    {
                        "action": t.string().optional(),
                        "body_markdown": t.string().optional(),
                        "category": t.proxy(renames["ListingCategory"]).optional(),
                        "contact_via_connect": t.boolean().optional(),
                        "expires_at": t.string().optional(),
                        "location": t.string().optional(),
                        "tag_list": t.string().optional(),
                        "tags": t.array(t.string()).optional(),
                        "title": t.string().optional(),
                    }
                ).optional(),
            }
        ),
        t.proxy(renames["ArticleShow"]),
        content_type="application/json",
        body_fields=("listing",),
    )
    functions["getOrganization"] = devto.get(
        "/organizations/{username}",
        t.struct({"username": t.string()}),
        t.proxy(renames["Organization"]).optional(),
    )
    functions["getOrgArticles"] = devto.get(
        "/organizations/{username}/articles",
        t.struct(
            {"username": t.string(), "page": t.integer(), "per_page": t.integer()}
        ),
        t.array(t.proxy(renames["ArticleIndex"])).optional(),
    )
    functions["getOrgListings"] = devto.get(
        "/organizations/{username}/listings",
        t.struct(
            {
                "username": t.string(),
                "page": t.integer(),
                "per_page": t.integer(),
                "category": t.string(),
            }
        ),
        t.array(
            t.struct(
                {
                    "body_markdown": t.string(),
                    "category": t.proxy(renames["ListingCategory"]),
                    "id": t.integer(),
                    "organization": t.proxy(renames["SharedOrganization"]),
                    "processed_html": t.string(),
                    "published": t.boolean(),
                    "slug": t.string(),
                    "tag_list": t.string(),
                    "tags": t.array(t.string()),
                    "title": t.string(),
                    "type_of": t.string(),
                    "user": t.proxy(renames["SharedUser"]),
                }
            )
        ).optional(),
    )
    functions["getOrgUsers"] = devto.get(
        "/organizations/{username}/users",
        t.struct(
            {"username": t.string(), "page": t.integer(), "per_page": t.integer()}
        ),
        t.array(t.proxy(renames["User"])).optional(),
    )
    functions["getPodcastEpisodes"] = devto.get(
        "/podcast_episodes",
        t.struct(
            {"page": t.integer(), "per_page": t.integer(), "username": t.string()}
        ),
        t.array(t.proxy(renames["PodcastEpisode"])).optional(),
    )
    functions["getProfileImage"] = devto.get(
        "/profile_images/{username}",
        t.struct({"username": t.string()}),
        t.proxy(renames["ProfileImage"]).optional(),
    )
    functions["getReadinglist"] = devto.get(
        "/readinglist",
        t.struct({"page": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["ReadingList"])),
    )
    functions["getTags"] = devto.get(
        "/tags",
        t.struct({"page": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["Tag"])),
    )
    functions["getUserMe"] = devto.get(
        "/users/me",
        t.struct({}),
        t.proxy(renames["User"]),
    )
    functions["getUser"] = devto.get(
        "/users/{id}",
        t.struct({"id": t.string(), "url": t.string()}),
        t.proxy(renames["User"]).optional(),
    )
    functions["getArticlesWithVideo"] = devto.get(
        "/videos",
        t.struct({"page": t.integer(), "per_page": t.integer()}),
        t.array(t.proxy(renames["ArticleVideo"])),
    )
    functions["getWebhooks"] = devto.get(
        "/webhooks",
        t.struct({}),
        t.array(t.proxy(renames["WebhookIndex"])),
    )
    functions["createWebhook"] = devto.post(
        "/webhooks",
        t.struct(
            {
                "webhook_endpoint": t.struct(
                    {
                        "events": t.array(t.string()),
                        "source": t.string(),
                        "target_url": t.string(),
                    }
                ).optional()
            }
        ),
        t.proxy(renames["WebhookShow"]),
        content_type="application/json",
        body_fields=("webhook_endpoint",),
    )
    functions["deleteWebhook"] = devto.delete(
        "/webhooks/{id}",
        t.struct({"id": t.integer()}),
        t.boolean().optional(),
    )
    functions["getWebhookById"] = devto.get(
        "/webhooks/{id}",
        t.struct({"id": t.integer()}),
        t.proxy(renames["WebhookShow"]).optional(),
    )

    return Import(importer="devto", renames=renames, types=types, functions=functions)


with TypeGraph(name="devto") as g:
    devto = import_devto()

    public = policies.public()

    g.expose(getListings=devto.func("getListings").add_policy(public))
