    test = HTTPRuntime('https://fcm.googleapis.com/')

    renames = {'ErrorResponse': '_test_1_ErrorResponse', 'WebpushFcmOptionsIn': '_test_2_WebpushFcmOptionsIn', 'WebpushFcmOptionsOut': '_test_3_WebpushFcmOptionsOut', 'ApnsConfigIn': '_test_4_ApnsConfigIn', 'ApnsConfigOut': '_test_5_ApnsConfigOut', 'AndroidNotificationIn': '_test_6_AndroidNotificationIn', 'AndroidNotificationOut': '_test_7_AndroidNotificationOut', 'NotificationIn': '_test_8_NotificationIn', 'NotificationOut': '_test_9_NotificationOut', 'ApnsFcmOptionsIn': '_test_10_ApnsFcmOptionsIn', 'ApnsFcmOptionsOut': '_test_11_ApnsFcmOptionsOut', 'SendMessageRequestIn': '_test_12_SendMessageRequestIn', 'SendMessageRequestOut': '_test_13_SendMessageRequestOut', 'AndroidFcmOptionsIn': '_test_14_AndroidFcmOptionsIn', 'AndroidFcmOptionsOut': '_test_15_AndroidFcmOptionsOut', 'ColorIn': '_test_16_ColorIn', 'ColorOut': '_test_17_ColorOut', 'FcmOptionsIn': '_test_18_FcmOptionsIn', 'FcmOptionsOut': '_test_19_FcmOptionsOut', 'WebpushConfigIn': '_test_20_WebpushConfigIn', 'WebpushConfigOut': '_test_21_WebpushConfigOut', 'MessageIn': '_test_22_MessageIn', 'MessageOut': '_test_23_MessageOut', 'LightSettingsIn': '_test_24_LightSettingsIn', 'LightSettingsOut': '_test_25_LightSettingsOut', 'AndroidConfigIn': '_test_26_AndroidConfigIn', 'AndroidConfigOut': '_test_27_AndroidConfigOut'}

    types = {}
    types['ErrorResponse'] = t.struct({'code': t.integer(), 'message': t.string(), 'status': t.string()}).named(renames['ErrorResponse'])
    types['WebpushFcmOptionsIn'] = t.struct({'analyticsLabel': t.string().optional(), 'link': t.string().optional()}).named(renames['WebpushFcmOptionsIn'])
    types['WebpushFcmOptionsOut'] = t.struct({'analyticsLabel': t.string().optional(), 'link': t.string().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['WebpushFcmOptionsOut'])
    types['ApnsConfigIn'] = t.struct({'payload': t.struct({'_': t.string().optional()}).optional(), 'fcmOptions': t.proxy(renames['ApnsFcmOptionsIn']).optional(), 'headers': t.struct({'_': t.string().optional()}).optional()}).named(renames['ApnsConfigIn'])
    types['ApnsConfigOut'] = t.struct({'payload': t.struct({'_': t.string().optional()}).optional(), 'fcmOptions': t.proxy(renames['ApnsFcmOptionsOut']).optional(), 'headers': t.struct({'_': t.string().optional()}).optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['ApnsConfigOut'])
    types['AndroidNotificationIn'] = t.struct({'vibrateTimings': t.array(t.string()).optional(), 'localOnly': t.boolean().optional(), 'icon': t.string().optional(), 'tag': t.string().optional(), 'sound': t.string().optional(), 'visibility': t.string().optional(), 'notificationPriority': t.string().optional(), 'bodyLocKey': t.string().optional(), 'titleLocKey': t.string().optional(), 'color': t.string().optional(), 'eventTime': t.string().optional(), 'ticker': t.string().optional(), 'lightSettings': t.proxy(renames['LightSettingsIn']).optional(), 'defaultVibrateTimings': t.boolean().optional(), 'channelId': t.string().optional(), 'bypassProxyNotification': t.boolean().optional(), 'bodyLocArgs': t.array(t.string()).optional(), 'body': t.string().optional(), 'clickAction': t.string().optional(), 'notificationCount': t.integer().optional(), 'image': t.string().optional(), 'titleLocArgs': t.array(t.string()).optional(), 'defaultLightSettings': t.boolean().optional(), 'sticky': t.boolean().optional(), 'defaultSound': t.boolean().optional(), 'title': t.string().optional()}).named(renames['AndroidNotificationIn'])
    types['AndroidNotificationOut'] = t.struct({'vibrateTimings': t.array(t.string()).optional(), 'localOnly': t.boolean().optional(), 'icon': t.string().optional(), 'tag': t.string().optional(), 'sound': t.string().optional(), 'visibility': t.string().optional(), 'notificationPriority': t.string().optional(), 'bodyLocKey': t.string().optional(), 'titleLocKey': t.string().optional(), 'color': t.string().optional(), 'eventTime': t.string().optional(), 'ticker': t.string().optional(), 'lightSettings': t.proxy(renames['LightSettingsOut']).optional(), 'defaultVibrateTimings': t.boolean().optional(), 'channelId': t.string().optional(), 'bypassProxyNotification': t.boolean().optional(), 'bodyLocArgs': t.array(t.string()).optional(), 'body': t.string().optional(), 'clickAction': t.string().optional(), 'notificationCount': t.integer().optional(), 'image': t.string().optional(), 'titleLocArgs': t.array(t.string()).optional(), 'defaultLightSettings': t.boolean().optional(), 'sticky': t.boolean().optional(), 'defaultSound': t.boolean().optional(), 'title': t.string().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['AndroidNotificationOut'])
    types['NotificationIn'] = t.struct({'title': t.string().optional(), 'image': t.string().optional(), 'body': t.string().optional()}).named(renames['NotificationIn'])
    types['NotificationOut'] = t.struct({'title': t.string().optional(), 'image': t.string().optional(), 'body': t.string().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['NotificationOut'])
    types['ApnsFcmOptionsIn'] = t.struct({'image': t.string().optional(), 'analyticsLabel': t.string().optional()}).named(renames['ApnsFcmOptionsIn'])
    types['ApnsFcmOptionsOut'] = t.struct({'image': t.string().optional(), 'analyticsLabel': t.string().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['ApnsFcmOptionsOut'])
    types['SendMessageRequestIn'] = t.struct({'message': t.proxy(renames['MessageIn']), 'validateOnly': t.boolean().optional()}).named(renames['SendMessageRequestIn'])
    types['SendMessageRequestOut'] = t.struct({'message': t.proxy(renames['MessageOut']), 'validateOnly': t.boolean().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['SendMessageRequestOut'])
    types['AndroidFcmOptionsIn'] = t.struct({'analyticsLabel': t.string().optional()}).named(renames['AndroidFcmOptionsIn'])
    types['AndroidFcmOptionsOut'] = t.struct({'analyticsLabel': t.string().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['AndroidFcmOptionsOut'])
    types['ColorIn'] = t.struct({'green': t.number().optional(), 'red': t.number().optional(), 'blue': t.number().optional(), 'alpha': t.number().optional()}).named(renames['ColorIn'])
    types['ColorOut'] = t.struct({'green': t.number().optional(), 'red': t.number().optional(), 'blue': t.number().optional(), 'alpha': t.number().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['ColorOut'])
    types['FcmOptionsIn'] = t.struct({'analyticsLabel': t.string().optional()}).named(renames['FcmOptionsIn'])
    types['FcmOptionsOut'] = t.struct({'analyticsLabel': t.string().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['FcmOptionsOut'])
    types['WebpushConfigIn'] = t.struct({'data': t.struct({'_': t.string().optional()}).optional(), 'fcmOptions': t.proxy(renames['WebpushFcmOptionsIn']).optional(), 'notification': t.struct({'_': t.string().optional()}).optional(), 'headers': t.struct({'_': t.string().optional()}).optional()}).named(renames['WebpushConfigIn'])
    types['WebpushConfigOut'] = t.struct({'data': t.struct({'_': t.string().optional()}).optional(), 'fcmOptions': t.proxy(renames['WebpushFcmOptionsOut']).optional(), 'notification': t.struct({'_': t.string().optional()}).optional(), 'headers': t.struct({'_': t.string().optional()}).optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['WebpushConfigOut'])
    types['MessageIn'] = t.struct({'webpush': t.proxy(renames['WebpushConfigIn']).optional(), 'token': t.string().optional(), 'apns': t.proxy(renames['ApnsConfigIn']).optional(), 'android': t.proxy(renames['AndroidConfigIn']).optional(), 'topic': t.string().optional(), 'condition': t.string().optional(), 'notification': t.proxy(renames['NotificationIn']).optional(), 'data': t.struct({'_': t.string().optional()}).optional(), 'fcmOptions': t.proxy(renames['FcmOptionsIn']).optional(), 'name': t.string().optional()}).named(renames['MessageIn'])
    types['MessageOut'] = t.struct({'webpush': t.proxy(renames['WebpushConfigOut']).optional(), 'token': t.string().optional(), 'apns': t.proxy(renames['ApnsConfigOut']).optional(), 'android': t.proxy(renames['AndroidConfigOut']).optional(), 'topic': t.string().optional(), 'condition': t.string().optional(), 'notification': t.proxy(renames['NotificationOut']).optional(), 'data': t.struct({'_': t.string().optional()}).optional(), 'fcmOptions': t.proxy(renames['FcmOptionsOut']).optional(), 'name': t.string().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['MessageOut'])
    types['LightSettingsIn'] = t.struct({'lightOnDuration': t.string(), 'color': t.proxy(renames['ColorIn']), 'lightOffDuration': t.string()}).named(renames['LightSettingsIn'])
    types['LightSettingsOut'] = t.struct({'lightOnDuration': t.string(), 'color': t.proxy(renames['ColorOut']), 'lightOffDuration': t.string(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['LightSettingsOut'])
    types['AndroidConfigIn'] = t.struct({'data': t.struct({'_': t.string().optional()}).optional(), 'directBootOk': t.boolean().optional(), 'priority': t.string().optional(), 'fcmOptions': t.proxy(renames['AndroidFcmOptionsIn']).optional(), 'ttl': t.string().optional(), 'notification': t.proxy(renames['AndroidNotificationIn']).optional(), 'collapseKey': t.string().optional(), 'restrictedPackageName': t.string().optional()}).named(renames['AndroidConfigIn'])
    types['AndroidConfigOut'] = t.struct({'data': t.struct({'_': t.string().optional()}).optional(), 'directBootOk': t.boolean().optional(), 'priority': t.string().optional(), 'fcmOptions': t.proxy(renames['AndroidFcmOptionsOut']).optional(), 'ttl': t.string().optional(), 'notification': t.proxy(renames['AndroidNotificationOut']).optional(), 'collapseKey': t.string().optional(), 'restrictedPackageName': t.string().optional(), 'error': t.proxy(renames['ErrorResponse']).optional()}).named(renames['AndroidConfigOut'])

    functions = {}
    functions['projectsMessagesSend'] = test.post('v1/{parent}/messages:send', t.struct({'parent': t.string(), 'message': t.proxy(renames['MessageIn']), 'validateOnly': t.boolean().optional(), 'auth': t.string().optional()}), t.proxy(renames['MessageOut']), auth_token_field='auth', content_type='application/json')

    return Import(importer='test', renames=renames, types=types, functions=functions)
