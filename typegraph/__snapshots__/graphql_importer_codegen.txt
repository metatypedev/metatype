    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("FilmsEdge"))),"totalCount": t.optional(t.integer()),"films": t.optional(t.array(g("Film"))),}).named("FilmsConnection") # kind: OBJECT
    t.struct({"hasNextPage": t.boolean(),"hasPreviousPage": t.boolean(),"startCursor": t.optional(t.string()),"endCursor": t.optional(t.string()),}).named("PageInfo") # kind: OBJECT
    t.struct({"node": t.optional(g("Film")),"cursor": t.string(),}).named("FilmsEdge") # kind: OBJECT
    t.struct({"title": t.optional(t.string()),"episodeID": t.optional(t.integer()),"openingCrawl": t.optional(t.string()),"director": t.optional(t.string()),"producers": t.optional(t.array(t.string())),"releaseDate": t.optional(t.string()),"speciesConnection": t.optional(g("FilmSpeciesConnection")),"starshipConnection": t.optional(g("FilmStarshipsConnection")),"vehicleConnection": t.optional(g("FilmVehiclesConnection")),"characterConnection": t.optional(g("FilmCharactersConnection")),"planetConnection": t.optional(g("FilmPlanetsConnection")),"created": t.optional(t.string()),"edited": t.optional(t.string()),"id": t.string(),}).named("Film") # kind: OBJECT
    t.struct({"id": t.string(),}).named("Node") # kind: INTERFACE
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("FilmSpeciesEdge"))),"totalCount": t.optional(t.integer()),"species": t.optional(t.array(g("Species"))),}).named("FilmSpeciesConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Species")),"cursor": t.string(),}).named("FilmSpeciesEdge") # kind: OBJECT
    t.struct({"name": t.optional(t.string()),"classification": t.optional(t.string()),"designation": t.optional(t.string()),"averageHeight": t.optional(t.number()),"averageLifespan": t.optional(t.integer()),"eyeColors": t.optional(t.array(t.string())),"hairColors": t.optional(t.array(t.string())),"skinColors": t.optional(t.array(t.string())),"language": t.optional(t.string()),"homeworld": t.optional(g("Planet")),"personConnection": t.optional(g("SpeciesPeopleConnection")),"filmConnection": t.optional(g("SpeciesFilmsConnection")),"created": t.optional(t.string()),"edited": t.optional(t.string()),"id": t.string(),}).named("Species") # kind: OBJECT
    t.struct({"name": t.optional(t.string()),"diameter": t.optional(t.integer()),"rotationPeriod": t.optional(t.integer()),"orbitalPeriod": t.optional(t.integer()),"gravity": t.optional(t.string()),"population": t.optional(t.number()),"climates": t.optional(t.array(t.string())),"terrains": t.optional(t.array(t.string())),"surfaceWater": t.optional(t.number()),"residentConnection": t.optional(g("PlanetResidentsConnection")),"filmConnection": t.optional(g("PlanetFilmsConnection")),"created": t.optional(t.string()),"edited": t.optional(t.string()),"id": t.string(),}).named("Planet") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("PlanetResidentsEdge"))),"totalCount": t.optional(t.integer()),"residents": t.optional(t.array(g("Person"))),}).named("PlanetResidentsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Person")),"cursor": t.string(),}).named("PlanetResidentsEdge") # kind: OBJECT
    t.struct({"name": t.optional(t.string()),"birthYear": t.optional(t.string()),"eyeColor": t.optional(t.string()),"gender": t.optional(t.string()),"hairColor": t.optional(t.string()),"height": t.optional(t.integer()),"mass": t.optional(t.number()),"skinColor": t.optional(t.string()),"homeworld": t.optional(g("Planet")),"filmConnection": t.optional(g("PersonFilmsConnection")),"species": t.optional(g("Species")),"starshipConnection": t.optional(g("PersonStarshipsConnection")),"vehicleConnection": t.optional(g("PersonVehiclesConnection")),"created": t.optional(t.string()),"edited": t.optional(t.string()),"id": t.string(),}).named("Person") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("PersonFilmsEdge"))),"totalCount": t.optional(t.integer()),"films": t.optional(t.array(g("Film"))),}).named("PersonFilmsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Film")),"cursor": t.string(),}).named("PersonFilmsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("PersonStarshipsEdge"))),"totalCount": t.optional(t.integer()),"starships": t.optional(t.array(g("Starship"))),}).named("PersonStarshipsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Starship")),"cursor": t.string(),}).named("PersonStarshipsEdge") # kind: OBJECT
    t.struct({"name": t.optional(t.string()),"model": t.optional(t.string()),"starshipClass": t.optional(t.string()),"manufacturers": t.optional(t.array(t.string())),"costInCredits": t.optional(t.number()),"length": t.optional(t.number()),"crew": t.optional(t.string()),"passengers": t.optional(t.string()),"maxAtmospheringSpeed": t.optional(t.integer()),"hyperdriveRating": t.optional(t.number()),"MGLT": t.optional(t.integer()),"cargoCapacity": t.optional(t.number()),"consumables": t.optional(t.string()),"pilotConnection": t.optional(g("StarshipPilotsConnection")),"filmConnection": t.optional(g("StarshipFilmsConnection")),"created": t.optional(t.string()),"edited": t.optional(t.string()),"id": t.string(),}).named("Starship") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("StarshipPilotsEdge"))),"totalCount": t.optional(t.integer()),"pilots": t.optional(t.array(g("Person"))),}).named("StarshipPilotsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Person")),"cursor": t.string(),}).named("StarshipPilotsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("StarshipFilmsEdge"))),"totalCount": t.optional(t.integer()),"films": t.optional(t.array(g("Film"))),}).named("StarshipFilmsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Film")),"cursor": t.string(),}).named("StarshipFilmsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("PersonVehiclesEdge"))),"totalCount": t.optional(t.integer()),"vehicles": t.optional(t.array(g("Vehicle"))),}).named("PersonVehiclesConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Vehicle")),"cursor": t.string(),}).named("PersonVehiclesEdge") # kind: OBJECT
    t.struct({"name": t.optional(t.string()),"model": t.optional(t.string()),"vehicleClass": t.optional(t.string()),"manufacturers": t.optional(t.array(t.string())),"costInCredits": t.optional(t.number()),"length": t.optional(t.number()),"crew": t.optional(t.string()),"passengers": t.optional(t.string()),"maxAtmospheringSpeed": t.optional(t.integer()),"cargoCapacity": t.optional(t.number()),"consumables": t.optional(t.string()),"pilotConnection": t.optional(g("VehiclePilotsConnection")),"filmConnection": t.optional(g("VehicleFilmsConnection")),"created": t.optional(t.string()),"edited": t.optional(t.string()),"id": t.string(),}).named("Vehicle") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("VehiclePilotsEdge"))),"totalCount": t.optional(t.integer()),"pilots": t.optional(t.array(g("Person"))),}).named("VehiclePilotsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Person")),"cursor": t.string(),}).named("VehiclePilotsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("VehicleFilmsEdge"))),"totalCount": t.optional(t.integer()),"films": t.optional(t.array(g("Film"))),}).named("VehicleFilmsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Film")),"cursor": t.string(),}).named("VehicleFilmsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("PlanetFilmsEdge"))),"totalCount": t.optional(t.integer()),"films": t.optional(t.array(g("Film"))),}).named("PlanetFilmsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Film")),"cursor": t.string(),}).named("PlanetFilmsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("SpeciesPeopleEdge"))),"totalCount": t.optional(t.integer()),"people": t.optional(t.array(g("Person"))),}).named("SpeciesPeopleConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Person")),"cursor": t.string(),}).named("SpeciesPeopleEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("SpeciesFilmsEdge"))),"totalCount": t.optional(t.integer()),"films": t.optional(t.array(g("Film"))),}).named("SpeciesFilmsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Film")),"cursor": t.string(),}).named("SpeciesFilmsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("FilmStarshipsEdge"))),"totalCount": t.optional(t.integer()),"starships": t.optional(t.array(g("Starship"))),}).named("FilmStarshipsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Starship")),"cursor": t.string(),}).named("FilmStarshipsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("FilmVehiclesEdge"))),"totalCount": t.optional(t.integer()),"vehicles": t.optional(t.array(g("Vehicle"))),}).named("FilmVehiclesConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Vehicle")),"cursor": t.string(),}).named("FilmVehiclesEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("FilmCharactersEdge"))),"totalCount": t.optional(t.integer()),"characters": t.optional(t.array(g("Person"))),}).named("FilmCharactersConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Person")),"cursor": t.string(),}).named("FilmCharactersEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("FilmPlanetsEdge"))),"totalCount": t.optional(t.integer()),"planets": t.optional(t.array(g("Planet"))),}).named("FilmPlanetsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Planet")),"cursor": t.string(),}).named("FilmPlanetsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("PeopleEdge"))),"totalCount": t.optional(t.integer()),"people": t.optional(t.array(g("Person"))),}).named("PeopleConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Person")),"cursor": t.string(),}).named("PeopleEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("PlanetsEdge"))),"totalCount": t.optional(t.integer()),"planets": t.optional(t.array(g("Planet"))),}).named("PlanetsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Planet")),"cursor": t.string(),}).named("PlanetsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("SpeciesEdge"))),"totalCount": t.optional(t.integer()),"species": t.optional(t.array(g("Species"))),}).named("SpeciesConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Species")),"cursor": t.string(),}).named("SpeciesEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("StarshipsEdge"))),"totalCount": t.optional(t.integer()),"starships": t.optional(t.array(g("Starship"))),}).named("StarshipsConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Starship")),"cursor": t.string(),}).named("StarshipsEdge") # kind: OBJECT
    t.struct({"pageInfo": g("PageInfo"),"edges": t.optional(t.array(g("VehiclesEdge"))),"totalCount": t.optional(t.integer()),"vehicles": t.optional(t.array(g("Vehicle"))),}).named("VehiclesConnection") # kind: OBJECT
    t.struct({"node": t.optional(g("Vehicle")),"cursor": t.string(),}).named("VehiclesEdge") # kind: OBJECT
    g.expose(allFilms=remote.query(t.struct({"after": t.optional(t.string()),"first": t.optional(t.integer()),"before": t.optional(t.string()),"last": t.optional(t.integer()),}), t.optional(g("FilmsConnection"))),film=remote.query(t.struct({"id": t.optional(t.string()),"filmID": t.optional(t.string()),}), t.optional(g("Film"))),allPeople=remote.query(t.struct({"after": t.optional(t.string()),"first": t.optional(t.integer()),"before": t.optional(t.string()),"last": t.optional(t.integer()),}), t.optional(g("PeopleConnection"))),person=remote.query(t.struct({"id": t.optional(t.string()),"personID": t.optional(t.string()),}), t.optional(g("Person"))),allPlanets=remote.query(t.struct({"after": t.optional(t.string()),"first": t.optional(t.integer()),"before": t.optional(t.string()),"last": t.optional(t.integer()),}), t.optional(g("PlanetsConnection"))),planet=remote.query(t.struct({"id": t.optional(t.string()),"planetID": t.optional(t.string()),}), t.optional(g("Planet"))),allSpecies=remote.query(t.struct({"after": t.optional(t.string()),"first": t.optional(t.integer()),"before": t.optional(t.string()),"last": t.optional(t.integer()),}), t.optional(g("SpeciesConnection"))),species=remote.query(t.struct({"id": t.optional(t.string()),"speciesID": t.optional(t.string()),}), t.optional(g("Species"))),allStarships=remote.query(t.struct({"after": t.optional(t.string()),"first": t.optional(t.integer()),"before": t.optional(t.string()),"last": t.optional(t.integer()),}), t.optional(g("StarshipsConnection"))),starship=remote.query(t.struct({"id": t.optional(t.string()),"starshipID": t.optional(t.string()),}), t.optional(g("Starship"))),allVehicles=remote.query(t.struct({"after": t.optional(t.string()),"first": t.optional(t.integer()),"before": t.optional(t.string()),"last": t.optional(t.integer()),}), t.optional(g("VehiclesConnection"))),vehicle=remote.query(t.struct({"id": t.optional(t.string()),"vehicleID": t.optional(t.string()),}), t.optional(g("Vehicle"))),node=remote.query(t.struct({"id": t.string(),}), t.optional(g("Node"))),)
