---
source: typegraph/core/src/runtimes/prisma/type_generation/mod.rs
expression: "tree::print(inp)"
---
root: struct '_Record_QueryInput_group_by' #77
├─ [where]: optional '_42_QueryRecordWhereInput?' #42
│  └─ item: struct 'QueryRecordWhereInput' #41
│     ├─ [id]: optional '_21__string_filter_c?' #21
│     │  └─ item: optional '_string_filter_c' #20
│     │     └─ item: union #19
│     │        ├─ variant_0: union '_string_filter' #17
│     │        │  ├─ variant_0: string #5
│     │        │  ├─ variant_1: struct #8
│     │        │  │  └─ [equals]: string #5
│     │        │  ├─ variant_2: struct #9
│     │        │  │  └─ [not]: string #5
│     │        │  ├─ variant_3: struct #10
│     │        │  │  └─ [in]: array #7
│     │        │  │     └─ item: string #5
│     │        │  ├─ variant_4: struct #11
│     │        │  │  └─ [notIn]: array #7
│     │        │  │     └─ item: string #5
│     │        │  ├─ variant_5: struct #14
│     │        │  │  ├─ [contains]: string #5
│     │        │  │  └─ [mode]: optional #13
│     │        │  │     └─ item: string #12 enum{ '"insensitive"' }
│     │        │  ├─ variant_6: struct #15
│     │        │  │  └─ [search]: string #5
│     │        │  └─ variant_7: struct #16
│     │        │     ├─ [startsWith]: optional #6
│     │        │     │  └─ item: string #5
│     │        │     └─ [endsWith]: optional #6
│     │        │        └─ item: string #5
│     │        └─ variant_1: struct #18
│     │           └─ [not]: union '_string_filter' #17
│     │              ├─ variant_0: string #5
│     │              ├─ variant_1: struct #8
│     │              │  └─ [equals]: string #5
│     │              ├─ variant_2: struct #9
│     │              │  └─ [not]: string #5
│     │              ├─ variant_3: struct #10
│     │              │  └─ [in]: array #7
│     │              │     └─ item: string #5
│     │              ├─ variant_4: struct #11
│     │              │  └─ [notIn]: array #7
│     │              │     └─ item: string #5
│     │              ├─ variant_5: struct #14
│     │              │  ├─ [contains]: string #5
│     │              │  └─ [mode]: optional #13
│     │              │     └─ item: string #12 enum{ '"insensitive"' }
│     │              ├─ variant_6: struct #15
│     │              │  └─ [search]: string #5
│     │              └─ variant_7: struct #16
│     │                 ├─ [startsWith]: optional #6
│     │                 │  └─ item: string #5
│     │                 └─ [endsWith]: optional #6
│     │                    └─ item: string #5
│     ├─ [name]: optional '_22__string_filter_c?' #22
│     │  └─ item: optional '_string_filter_c' #20
│     │     └─ item: union #19
│     │        ├─ variant_0: union '_string_filter' #17
│     │        │  ├─ variant_0: string #5
│     │        │  ├─ variant_1: struct #8
│     │        │  │  └─ [equals]: string #5
│     │        │  ├─ variant_2: struct #9
│     │        │  │  └─ [not]: string #5
│     │        │  ├─ variant_3: struct #10
│     │        │  │  └─ [in]: array #7
│     │        │  │     └─ item: string #5
│     │        │  ├─ variant_4: struct #11
│     │        │  │  └─ [notIn]: array #7
│     │        │  │     └─ item: string #5
│     │        │  ├─ variant_5: struct #14
│     │        │  │  ├─ [contains]: string #5
│     │        │  │  └─ [mode]: optional #13
│     │        │  │     └─ item: string #12 enum{ '"insensitive"' }
│     │        │  ├─ variant_6: struct #15
│     │        │  │  └─ [search]: string #5
│     │        │  └─ variant_7: struct #16
│     │        │     ├─ [startsWith]: optional #6
│     │        │     │  └─ item: string #5
│     │        │     └─ [endsWith]: optional #6
│     │        │        └─ item: string #5
│     │        └─ variant_1: struct #18
│     │           └─ [not]: union '_string_filter' #17
│     │              ├─ variant_0: string #5
│     │              ├─ variant_1: struct #8
│     │              │  └─ [equals]: string #5
│     │              ├─ variant_2: struct #9
│     │              │  └─ [not]: string #5
│     │              ├─ variant_3: struct #10
│     │              │  └─ [in]: array #7
│     │              │     └─ item: string #5
│     │              ├─ variant_4: struct #11
│     │              │  └─ [notIn]: array #7
│     │              │     └─ item: string #5
│     │              ├─ variant_5: struct #14
│     │              │  ├─ [contains]: string #5
│     │              │  └─ [mode]: optional #13
│     │              │     └─ item: string #12 enum{ '"insensitive"' }
│     │              ├─ variant_6: struct #15
│     │              │  └─ [search]: string #5
│     │              └─ variant_7: struct #16
│     │                 ├─ [startsWith]: optional #6
│     │                 │  └─ item: string #5
│     │                 └─ [endsWith]: optional #6
│     │                    └─ item: string #5
│     ├─ [age]: optional '_35__integer_filter_c?' #35
│     │  └─ item: optional '_integer_filter_c' #34
│     │     └─ item: union #33
│     │        ├─ variant_0: either '_integer_filter' #31
│     │        │  ├─ variant_0: integer #23
│     │        │  ├─ variant_1: struct #26
│     │        │  │  └─ [equals]: integer #23
│     │        │  ├─ variant_2: struct #27
│     │        │  │  └─ [not]: integer #23
│     │        │  ├─ variant_3: struct #28
│     │        │  │  ├─ [lt]: optional #24
│     │        │  │  │  └─ item: integer #23
│     │        │  │  ├─ [gt]: optional #24
│     │        │  │  │  └─ item: integer #23
│     │        │  │  ├─ [lte]: optional #24
│     │        │  │  │  └─ item: integer #23
│     │        │  │  └─ [gte]: optional #24
│     │        │  │     └─ item: integer #23
│     │        │  ├─ variant_4: struct #29
│     │        │  │  └─ [in]: array #25
│     │        │  │     └─ item: integer #23
│     │        │  └─ variant_5: struct #30
│     │        │     └─ [notIn]: array #25
│     │        │        └─ item: integer #23
│     │        └─ variant_1: struct #32
│     │           └─ [not]: either '_integer_filter' #31
│     │              ├─ variant_0: integer #23
│     │              ├─ variant_1: struct #26
│     │              │  └─ [equals]: integer #23
│     │              ├─ variant_2: struct #27
│     │              │  └─ [not]: integer #23
│     │              ├─ variant_3: struct #28
│     │              │  ├─ [lt]: optional #24
│     │              │  │  └─ item: integer #23
│     │              │  ├─ [gt]: optional #24
│     │              │  │  └─ item: integer #23
│     │              │  ├─ [lte]: optional #24
│     │              │  │  └─ item: integer #23
│     │              │  └─ [gte]: optional #24
│     │              │     └─ item: integer #23
│     │              ├─ variant_4: struct #29
│     │              │  └─ [in]: array #25
│     │              │     └─ item: integer #23
│     │              └─ variant_5: struct #30
│     │                 └─ [notIn]: array #25
│     │                    └─ item: integer #23
│     ├─ [AND]: optional '_39__38_QueryRecordWhereInput[]?' #39
│     │  └─ item: array '_38_QueryRecordWhereInput[]' #38
│     │     └─ item: &QueryRecordWhereInput #37
│     ├─ [OR]: optional '_39__38_QueryRecordWhereInput[]?' #39
│     │  └─ item: array '_38_QueryRecordWhereInput[]' #38
│     │     └─ item: &QueryRecordWhereInput #37
│     └─ [NOT]: optional '_40_QueryRecordWhereInput?' #40
│        └─ item: &QueryRecordWhereInput #37
├─ [orderBy]: optional '_58__Record_OrderBy_with_aggregates?' #58
│  └─ item: array '_Record_OrderBy_with_aggregates' #57
│     └─ item: struct #56
│        ├─ [_count]: optional #52
│        │  └─ item: struct #51
│        │     ├─ [id]: optional '_Sort' #47
│        │     │  └─ item: union #46
│        │     │     ├─ variant_0: struct #45
│        │     │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     ├─ [name]: optional '_Sort' #47
│        │     │  └─ item: union #46
│        │     │     ├─ variant_0: struct #45
│        │     │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     └─ [age]: optional '_Sort_nullable' #50
│        │        └─ item: union #49
│        │           ├─ variant_0: struct #48
│        │           │  ├─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           │  └─ [nulls]: string '_NullsOrder' #44 enum{ '"first"', '"last"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [_avg]: optional #54
│        │  └─ item: struct #53
│        │     └─ [age]: optional '_Sort_nullable' #50
│        │        └─ item: union #49
│        │           ├─ variant_0: struct #48
│        │           │  ├─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           │  └─ [nulls]: string '_NullsOrder' #44 enum{ '"first"', '"last"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [_sum]: optional #54
│        │  └─ item: struct #53
│        │     └─ [age]: optional '_Sort_nullable' #50
│        │        └─ item: union #49
│        │           ├─ variant_0: struct #48
│        │           │  ├─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           │  └─ [nulls]: string '_NullsOrder' #44 enum{ '"first"', '"last"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [_min]: optional #54
│        │  └─ item: struct #53
│        │     └─ [age]: optional '_Sort_nullable' #50
│        │        └─ item: union #49
│        │           ├─ variant_0: struct #48
│        │           │  ├─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           │  └─ [nulls]: string '_NullsOrder' #44 enum{ '"first"', '"last"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [_max]: optional #54
│        │  └─ item: struct #53
│        │     └─ [age]: optional '_Sort_nullable' #50
│        │        └─ item: union #49
│        │           ├─ variant_0: struct #48
│        │           │  ├─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           │  └─ [nulls]: string '_NullsOrder' #44 enum{ '"first"', '"last"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [id]: optional '_Sort' #47
│        │  └─ item: union #46
│        │     ├─ variant_0: struct #45
│        │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [name]: optional '_Sort' #47
│        │  └─ item: union #46
│        │     ├─ variant_0: struct #45
│        │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        └─ [age]: optional '_Sort_nullable' #50
│           └─ item: union #49
│              ├─ variant_0: struct #48
│              │  ├─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│              │  └─ [nulls]: string '_NullsOrder' #44 enum{ '"first"', '"last"' }
│              └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
├─ [take]: optional '_60__Take?' #60
│  └─ item: integer '_Take' #59
├─ [skip]: optional '_62__Skip?' #62
│  └─ item: integer '_Skip' #61
├─ [by]: array '_Record_GroupingFields' #64
│  └─ item: string #63 enum{ '"id"', '"name"', '"age"' }
└─ [having]: optional '_76__Record_Having?' #76
   └─ item: union '_Record_Having' #75
      ├─ variant_0: struct 'RecordWhere__agg' #68
      │  ├─ [id]: optional '_65__string_filter_c?' #65
      │  │  └─ item: optional '_string_filter_c' #20
      │  │     └─ item: union #19
      │  │        ├─ variant_0: union '_string_filter' #17
      │  │        │  ├─ variant_0: string #5
      │  │        │  ├─ variant_1: struct #8
      │  │        │  │  └─ [equals]: string #5
      │  │        │  ├─ variant_2: struct #9
      │  │        │  │  └─ [not]: string #5
      │  │        │  ├─ variant_3: struct #10
      │  │        │  │  └─ [in]: array #7
      │  │        │  │     └─ item: string #5
      │  │        │  ├─ variant_4: struct #11
      │  │        │  │  └─ [notIn]: array #7
      │  │        │  │     └─ item: string #5
      │  │        │  ├─ variant_5: struct #14
      │  │        │  │  ├─ [contains]: string #5
      │  │        │  │  └─ [mode]: optional #13
      │  │        │  │     └─ item: string #12 enum{ '"insensitive"' }
      │  │        │  ├─ variant_6: struct #15
      │  │        │  │  └─ [search]: string #5
      │  │        │  └─ variant_7: struct #16
      │  │        │     ├─ [startsWith]: optional #6
      │  │        │     │  └─ item: string #5
      │  │        │     └─ [endsWith]: optional #6
      │  │        │        └─ item: string #5
      │  │        └─ variant_1: struct #18
      │  │           └─ [not]: union '_string_filter' #17
      │  │              ├─ variant_0: string #5
      │  │              ├─ variant_1: struct #8
      │  │              │  └─ [equals]: string #5
      │  │              ├─ variant_2: struct #9
      │  │              │  └─ [not]: string #5
      │  │              ├─ variant_3: struct #10
      │  │              │  └─ [in]: array #7
      │  │              │     └─ item: string #5
      │  │              ├─ variant_4: struct #11
      │  │              │  └─ [notIn]: array #7
      │  │              │     └─ item: string #5
      │  │              ├─ variant_5: struct #14
      │  │              │  ├─ [contains]: string #5
      │  │              │  └─ [mode]: optional #13
      │  │              │     └─ item: string #12 enum{ '"insensitive"' }
      │  │              ├─ variant_6: struct #15
      │  │              │  └─ [search]: string #5
      │  │              └─ variant_7: struct #16
      │  │                 ├─ [startsWith]: optional #6
      │  │                 │  └─ item: string #5
      │  │                 └─ [endsWith]: optional #6
      │  │                    └─ item: string #5
      │  ├─ [name]: optional '_66__string_filter_c?' #66
      │  │  └─ item: optional '_string_filter_c' #20
      │  │     └─ item: union #19
      │  │        ├─ variant_0: union '_string_filter' #17
      │  │        │  ├─ variant_0: string #5
      │  │        │  ├─ variant_1: struct #8
      │  │        │  │  └─ [equals]: string #5
      │  │        │  ├─ variant_2: struct #9
      │  │        │  │  └─ [not]: string #5
      │  │        │  ├─ variant_3: struct #10
      │  │        │  │  └─ [in]: array #7
      │  │        │  │     └─ item: string #5
      │  │        │  ├─ variant_4: struct #11
      │  │        │  │  └─ [notIn]: array #7
      │  │        │  │     └─ item: string #5
      │  │        │  ├─ variant_5: struct #14
      │  │        │  │  ├─ [contains]: string #5
      │  │        │  │  └─ [mode]: optional #13
      │  │        │  │     └─ item: string #12 enum{ '"insensitive"' }
      │  │        │  ├─ variant_6: struct #15
      │  │        │  │  └─ [search]: string #5
      │  │        │  └─ variant_7: struct #16
      │  │        │     ├─ [startsWith]: optional #6
      │  │        │     │  └─ item: string #5
      │  │        │     └─ [endsWith]: optional #6
      │  │        │        └─ item: string #5
      │  │        └─ variant_1: struct #18
      │  │           └─ [not]: union '_string_filter' #17
      │  │              ├─ variant_0: string #5
      │  │              ├─ variant_1: struct #8
      │  │              │  └─ [equals]: string #5
      │  │              ├─ variant_2: struct #9
      │  │              │  └─ [not]: string #5
      │  │              ├─ variant_3: struct #10
      │  │              │  └─ [in]: array #7
      │  │              │     └─ item: string #5
      │  │              ├─ variant_4: struct #11
      │  │              │  └─ [notIn]: array #7
      │  │              │     └─ item: string #5
      │  │              ├─ variant_5: struct #14
      │  │              │  ├─ [contains]: string #5
      │  │              │  └─ [mode]: optional #13
      │  │              │     └─ item: string #12 enum{ '"insensitive"' }
      │  │              ├─ variant_6: struct #15
      │  │              │  └─ [search]: string #5
      │  │              └─ variant_7: struct #16
      │  │                 ├─ [startsWith]: optional #6
      │  │                 │  └─ item: string #5
      │  │                 └─ [endsWith]: optional #6
      │  │                    └─ item: string #5
      │  └─ [age]: optional '_67__integer_filter_c?' #67
      │     └─ item: optional '_integer_filter_c' #34
      │        └─ item: union #33
      │           ├─ variant_0: either '_integer_filter' #31
      │           │  ├─ variant_0: integer #23
      │           │  ├─ variant_1: struct #26
      │           │  │  └─ [equals]: integer #23
      │           │  ├─ variant_2: struct #27
      │           │  │  └─ [not]: integer #23
      │           │  ├─ variant_3: struct #28
      │           │  │  ├─ [lt]: optional #24
      │           │  │  │  └─ item: integer #23
      │           │  │  ├─ [gt]: optional #24
      │           │  │  │  └─ item: integer #23
      │           │  │  ├─ [lte]: optional #24
      │           │  │  │  └─ item: integer #23
      │           │  │  └─ [gte]: optional #24
      │           │  │     └─ item: integer #23
      │           │  ├─ variant_4: struct #29
      │           │  │  └─ [in]: array #25
      │           │  │     └─ item: integer #23
      │           │  └─ variant_5: struct #30
      │           │     └─ [notIn]: array #25
      │           │        └─ item: integer #23
      │           └─ variant_1: struct #32
      │              └─ [not]: either '_integer_filter' #31
      │                 ├─ variant_0: integer #23
      │                 ├─ variant_1: struct #26
      │                 │  └─ [equals]: integer #23
      │                 ├─ variant_2: struct #27
      │                 │  └─ [not]: integer #23
      │                 ├─ variant_3: struct #28
      │                 │  ├─ [lt]: optional #24
      │                 │  │  └─ item: integer #23
      │                 │  ├─ [gt]: optional #24
      │                 │  │  └─ item: integer #23
      │                 │  ├─ [lte]: optional #24
      │                 │  │  └─ item: integer #23
      │                 │  └─ [gte]: optional #24
      │                 │     └─ item: integer #23
      │                 ├─ variant_4: struct #29
      │                 │  └─ [in]: array #25
      │                 │     └─ item: integer #23
      │                 └─ variant_5: struct #30
      │                    └─ [notIn]: array #25
      │                       └─ item: integer #23
      ├─ variant_1: struct #71
      │  └─ [AND]: array '_70__Record_Having[]' #70
      │     └─ item: &_Record_Having #69
      ├─ variant_2: struct #73
      │  └─ [OR]: array '_72__Record_Having[]' #72
      │     └─ item: &_Record_Having #69
      └─ variant_3: struct #74
         └─ [NOT]: &_Record_Having #69

