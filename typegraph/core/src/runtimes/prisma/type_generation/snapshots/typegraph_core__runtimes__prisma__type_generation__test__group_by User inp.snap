---
source: typegraph/core/src/runtimes/prisma/type_generation/mod.rs
expression: "tree::print(inp)"
---
root: struct '_User_QueryInput_group_by' #146
├─ [where]: optional '_114_QueryUserWhereInput?' #114
│  └─ item: struct 'QueryUserWhereInput' #113
│     ├─ [id]: optional '_100__integer_filter_c?' #100
│     │  └─ item: optional '_integer_filter_c' #34
│     │     └─ item: union #33
│     │        ├─ variant_0: either '_integer_filter' #31
│     │        │  ├─ variant_0: integer #23
│     │        │  ├─ variant_1: struct #26
│     │        │  │  └─ [equals]: integer #23
│     │        │  ├─ variant_2: struct #27
│     │        │  │  └─ [not]: integer #23
│     │        │  ├─ variant_3: struct #28
│     │        │  │  ├─ [lt]: optional #24
│     │        │  │  │  └─ item: integer #23
│     │        │  │  ├─ [gt]: optional #24
│     │        │  │  │  └─ item: integer #23
│     │        │  │  ├─ [lte]: optional #24
│     │        │  │  │  └─ item: integer #23
│     │        │  │  └─ [gte]: optional #24
│     │        │  │     └─ item: integer #23
│     │        │  ├─ variant_4: struct #29
│     │        │  │  └─ [in]: array #25
│     │        │  │     └─ item: integer #23
│     │        │  └─ variant_5: struct #30
│     │        │     └─ [notIn]: array #25
│     │        │        └─ item: integer #23
│     │        └─ variant_1: struct #32
│     │           └─ [not]: either '_integer_filter' #31
│     │              ├─ variant_0: integer #23
│     │              ├─ variant_1: struct #26
│     │              │  └─ [equals]: integer #23
│     │              ├─ variant_2: struct #27
│     │              │  └─ [not]: integer #23
│     │              ├─ variant_3: struct #28
│     │              │  ├─ [lt]: optional #24
│     │              │  │  └─ item: integer #23
│     │              │  ├─ [gt]: optional #24
│     │              │  │  └─ item: integer #23
│     │              │  ├─ [lte]: optional #24
│     │              │  │  └─ item: integer #23
│     │              │  └─ [gte]: optional #24
│     │              │     └─ item: integer #23
│     │              ├─ variant_4: struct #29
│     │              │  └─ [in]: array #25
│     │              │     └─ item: integer #23
│     │              └─ variant_5: struct #30
│     │                 └─ [notIn]: array #25
│     │                    └─ item: integer #23
│     ├─ [name]: optional '_101__string_filter_c?' #101
│     │  └─ item: optional '_string_filter_c' #20
│     │     └─ item: union #19
│     │        ├─ variant_0: union '_string_filter' #17
│     │        │  ├─ variant_0: string #5
│     │        │  ├─ variant_1: struct #8
│     │        │  │  └─ [equals]: string #5
│     │        │  ├─ variant_2: struct #9
│     │        │  │  └─ [not]: string #5
│     │        │  ├─ variant_3: struct #10
│     │        │  │  └─ [in]: array #7
│     │        │  │     └─ item: string #5
│     │        │  ├─ variant_4: struct #11
│     │        │  │  └─ [notIn]: array #7
│     │        │  │     └─ item: string #5
│     │        │  ├─ variant_5: struct #14
│     │        │  │  ├─ [contains]: string #5
│     │        │  │  └─ [mode]: optional #13
│     │        │  │     └─ item: string #12 enum{ '"insensitive"' }
│     │        │  ├─ variant_6: struct #15
│     │        │  │  └─ [search]: string #5
│     │        │  └─ variant_7: struct #16
│     │        │     ├─ [startsWith]: optional #6
│     │        │     │  └─ item: string #5
│     │        │     └─ [endsWith]: optional #6
│     │        │        └─ item: string #5
│     │        └─ variant_1: struct #18
│     │           └─ [not]: union '_string_filter' #17
│     │              ├─ variant_0: string #5
│     │              ├─ variant_1: struct #8
│     │              │  └─ [equals]: string #5
│     │              ├─ variant_2: struct #9
│     │              │  └─ [not]: string #5
│     │              ├─ variant_3: struct #10
│     │              │  └─ [in]: array #7
│     │              │     └─ item: string #5
│     │              ├─ variant_4: struct #11
│     │              │  └─ [notIn]: array #7
│     │              │     └─ item: string #5
│     │              ├─ variant_5: struct #14
│     │              │  ├─ [contains]: string #5
│     │              │  └─ [mode]: optional #13
│     │              │     └─ item: string #12 enum{ '"insensitive"' }
│     │              ├─ variant_6: struct #15
│     │              │  └─ [search]: string #5
│     │              └─ variant_7: struct #16
│     │                 ├─ [startsWith]: optional #6
│     │                 │  └─ item: string #5
│     │                 └─ [endsWith]: optional #6
│     │                    └─ item: string #5
│     ├─ [posts]: optional '_107_PostWhere__skip_95_UserWhere?' #107
│     │  └─ item: struct 'PostWhere__skip_95_UserWhere' #106
│     │     ├─ [id]: optional '_102__integer_filter_c?' #102
│     │     │  └─ item: optional '_integer_filter_c' #34
│     │     │     └─ item: union #33
│     │     │        ├─ variant_0: either '_integer_filter' #31
│     │     │        │  ├─ variant_0: integer #23
│     │     │        │  ├─ variant_1: struct #26
│     │     │        │  │  └─ [equals]: integer #23
│     │     │        │  ├─ variant_2: struct #27
│     │     │        │  │  └─ [not]: integer #23
│     │     │        │  ├─ variant_3: struct #28
│     │     │        │  │  ├─ [lt]: optional #24
│     │     │        │  │  │  └─ item: integer #23
│     │     │        │  │  ├─ [gt]: optional #24
│     │     │        │  │  │  └─ item: integer #23
│     │     │        │  │  ├─ [lte]: optional #24
│     │     │        │  │  │  └─ item: integer #23
│     │     │        │  │  └─ [gte]: optional #24
│     │     │        │  │     └─ item: integer #23
│     │     │        │  ├─ variant_4: struct #29
│     │     │        │  │  └─ [in]: array #25
│     │     │        │  │     └─ item: integer #23
│     │     │        │  └─ variant_5: struct #30
│     │     │        │     └─ [notIn]: array #25
│     │     │        │        └─ item: integer #23
│     │     │        └─ variant_1: struct #32
│     │     │           └─ [not]: either '_integer_filter' #31
│     │     │              ├─ variant_0: integer #23
│     │     │              ├─ variant_1: struct #26
│     │     │              │  └─ [equals]: integer #23
│     │     │              ├─ variant_2: struct #27
│     │     │              │  └─ [not]: integer #23
│     │     │              ├─ variant_3: struct #28
│     │     │              │  ├─ [lt]: optional #24
│     │     │              │  │  └─ item: integer #23
│     │     │              │  ├─ [gt]: optional #24
│     │     │              │  │  └─ item: integer #23
│     │     │              │  ├─ [lte]: optional #24
│     │     │              │  │  └─ item: integer #23
│     │     │              │  └─ [gte]: optional #24
│     │     │              │     └─ item: integer #23
│     │     │              ├─ variant_4: struct #29
│     │     │              │  └─ [in]: array #25
│     │     │              │     └─ item: integer #23
│     │     │              └─ variant_5: struct #30
│     │     │                 └─ [notIn]: array #25
│     │     │                    └─ item: integer #23
│     │     ├─ [title]: optional '_103__string_filter_c?' #103
│     │     │  └─ item: optional '_string_filter_c' #20
│     │     │     └─ item: union #19
│     │     │        ├─ variant_0: union '_string_filter' #17
│     │     │        │  ├─ variant_0: string #5
│     │     │        │  ├─ variant_1: struct #8
│     │     │        │  │  └─ [equals]: string #5
│     │     │        │  ├─ variant_2: struct #9
│     │     │        │  │  └─ [not]: string #5
│     │     │        │  ├─ variant_3: struct #10
│     │     │        │  │  └─ [in]: array #7
│     │     │        │  │     └─ item: string #5
│     │     │        │  ├─ variant_4: struct #11
│     │     │        │  │  └─ [notIn]: array #7
│     │     │        │  │     └─ item: string #5
│     │     │        │  ├─ variant_5: struct #14
│     │     │        │  │  ├─ [contains]: string #5
│     │     │        │  │  └─ [mode]: optional #13
│     │     │        │  │     └─ item: string #12 enum{ '"insensitive"' }
│     │     │        │  ├─ variant_6: struct #15
│     │     │        │  │  └─ [search]: string #5
│     │     │        │  └─ variant_7: struct #16
│     │     │        │     ├─ [startsWith]: optional #6
│     │     │        │     │  └─ item: string #5
│     │     │        │     └─ [endsWith]: optional #6
│     │     │        │        └─ item: string #5
│     │     │        └─ variant_1: struct #18
│     │     │           └─ [not]: union '_string_filter' #17
│     │     │              ├─ variant_0: string #5
│     │     │              ├─ variant_1: struct #8
│     │     │              │  └─ [equals]: string #5
│     │     │              ├─ variant_2: struct #9
│     │     │              │  └─ [not]: string #5
│     │     │              ├─ variant_3: struct #10
│     │     │              │  └─ [in]: array #7
│     │     │              │     └─ item: string #5
│     │     │              ├─ variant_4: struct #11
│     │     │              │  └─ [notIn]: array #7
│     │     │              │     └─ item: string #5
│     │     │              ├─ variant_5: struct #14
│     │     │              │  ├─ [contains]: string #5
│     │     │              │  └─ [mode]: optional #13
│     │     │              │     └─ item: string #12 enum{ '"insensitive"' }
│     │     │              ├─ variant_6: struct #15
│     │     │              │  └─ [search]: string #5
│     │     │              └─ variant_7: struct #16
│     │     │                 ├─ [startsWith]: optional #6
│     │     │                 │  └─ item: string #5
│     │     │                 └─ [endsWith]: optional #6
│     │     │                    └─ item: string #5
│     │     └─ [author]: optional '_105_UserWhere?' #105
│     │        └─ item: &UserWhere #104
│     ├─ [AND]: optional '_111__110_QueryUserWhereInput[]?' #111
│     │  └─ item: array '_110_QueryUserWhereInput[]' #110
│     │     └─ item: &QueryUserWhereInput #109
│     ├─ [OR]: optional '_111__110_QueryUserWhereInput[]?' #111
│     │  └─ item: array '_110_QueryUserWhereInput[]' #110
│     │     └─ item: &QueryUserWhereInput #109
│     └─ [NOT]: optional '_112_QueryUserWhereInput?' #112
│        └─ item: &QueryUserWhereInput #109
├─ [orderBy]: optional '_124__User_OrderBy_with_aggregates?' #124
│  └─ item: array '_User_OrderBy_with_aggregates' #123
│     └─ item: struct #122
│        ├─ [_count]: optional #116
│        │  └─ item: struct #115
│        │     ├─ [id]: optional '_Sort' #47
│        │     │  └─ item: union #46
│        │     │     ├─ variant_0: struct #45
│        │     │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     ├─ [name]: optional '_Sort' #47
│        │     │  └─ item: union #46
│        │     │     ├─ variant_0: struct #45
│        │     │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     └─ [posts]: optional '_Sort' #47
│        │        └─ item: union #46
│        │           ├─ variant_0: struct #45
│        │           │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [_avg]: optional #118
│        │  └─ item: struct #117
│        │     └─ [id]: optional '_Sort' #47
│        │        └─ item: union #46
│        │           ├─ variant_0: struct #45
│        │           │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [_sum]: optional #118
│        │  └─ item: struct #117
│        │     └─ [id]: optional '_Sort' #47
│        │        └─ item: union #46
│        │           ├─ variant_0: struct #45
│        │           │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [_min]: optional #118
│        │  └─ item: struct #117
│        │     └─ [id]: optional '_Sort' #47
│        │        └─ item: union #46
│        │           ├─ variant_0: struct #45
│        │           │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [_max]: optional #118
│        │  └─ item: struct #117
│        │     └─ [id]: optional '_Sort' #47
│        │        └─ item: union #46
│        │           ├─ variant_0: struct #45
│        │           │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │           └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [id]: optional '_Sort' #47
│        │  └─ item: union #46
│        │     ├─ variant_0: struct #45
│        │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        ├─ [name]: optional '_Sort' #47
│        │  └─ item: union #46
│        │     ├─ variant_0: struct #45
│        │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│        └─ [posts]: optional '_SortByAggregates' #121
│           └─ item: struct #120
│              ├─ [_count]: optional '_Sort' #47
│              │  └─ item: union #46
│              │     ├─ variant_0: struct #45
│              │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│              │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│              ├─ [_avg]: optional '_Sort' #47
│              │  └─ item: union #46
│              │     ├─ variant_0: struct #45
│              │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│              │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│              ├─ [_sum]: optional '_Sort' #47
│              │  └─ item: union #46
│              │     ├─ variant_0: struct #45
│              │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│              │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│              ├─ [_min]: optional '_Sort' #47
│              │  └─ item: union #46
│              │     ├─ variant_0: struct #45
│              │     │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│              │     └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│              └─ [_max]: optional '_Sort' #47
│                 └─ item: union #46
│                    ├─ variant_0: struct #45
│                    │  └─ [sort]: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
│                    └─ variant_1: string '_SortOrder' #43 enum{ '"asc"', '"desc"' }
├─ [take]: optional '_125__Take?' #125
│  └─ item: integer '_Take' #59
├─ [skip]: optional '_126__Skip?' #126
│  └─ item: integer '_Skip' #61
├─ [by]: array '_User_GroupingFields' #128
│  └─ item: string #127 enum{ '"id"', '"name"' }
└─ [having]: optional '_145__User_Having?' #145
   └─ item: union '_User_Having' #144
      ├─ variant_0: struct 'UserWhere__agg' #137
      │  ├─ [id]: optional '_129__integer_filter_c?' #129
      │  │  └─ item: optional '_integer_filter_c' #34
      │  │     └─ item: union #33
      │  │        ├─ variant_0: either '_integer_filter' #31
      │  │        │  ├─ variant_0: integer #23
      │  │        │  ├─ variant_1: struct #26
      │  │        │  │  └─ [equals]: integer #23
      │  │        │  ├─ variant_2: struct #27
      │  │        │  │  └─ [not]: integer #23
      │  │        │  ├─ variant_3: struct #28
      │  │        │  │  ├─ [lt]: optional #24
      │  │        │  │  │  └─ item: integer #23
      │  │        │  │  ├─ [gt]: optional #24
      │  │        │  │  │  └─ item: integer #23
      │  │        │  │  ├─ [lte]: optional #24
      │  │        │  │  │  └─ item: integer #23
      │  │        │  │  └─ [gte]: optional #24
      │  │        │  │     └─ item: integer #23
      │  │        │  ├─ variant_4: struct #29
      │  │        │  │  └─ [in]: array #25
      │  │        │  │     └─ item: integer #23
      │  │        │  └─ variant_5: struct #30
      │  │        │     └─ [notIn]: array #25
      │  │        │        └─ item: integer #23
      │  │        └─ variant_1: struct #32
      │  │           └─ [not]: either '_integer_filter' #31
      │  │              ├─ variant_0: integer #23
      │  │              ├─ variant_1: struct #26
      │  │              │  └─ [equals]: integer #23
      │  │              ├─ variant_2: struct #27
      │  │              │  └─ [not]: integer #23
      │  │              ├─ variant_3: struct #28
      │  │              │  ├─ [lt]: optional #24
      │  │              │  │  └─ item: integer #23
      │  │              │  ├─ [gt]: optional #24
      │  │              │  │  └─ item: integer #23
      │  │              │  ├─ [lte]: optional #24
      │  │              │  │  └─ item: integer #23
      │  │              │  └─ [gte]: optional #24
      │  │              │     └─ item: integer #23
      │  │              ├─ variant_4: struct #29
      │  │              │  └─ [in]: array #25
      │  │              │     └─ item: integer #23
      │  │              └─ variant_5: struct #30
      │  │                 └─ [notIn]: array #25
      │  │                    └─ item: integer #23
      │  ├─ [name]: optional '_130__string_filter_c?' #130
      │  │  └─ item: optional '_string_filter_c' #20
      │  │     └─ item: union #19
      │  │        ├─ variant_0: union '_string_filter' #17
      │  │        │  ├─ variant_0: string #5
      │  │        │  ├─ variant_1: struct #8
      │  │        │  │  └─ [equals]: string #5
      │  │        │  ├─ variant_2: struct #9
      │  │        │  │  └─ [not]: string #5
      │  │        │  ├─ variant_3: struct #10
      │  │        │  │  └─ [in]: array #7
      │  │        │  │     └─ item: string #5
      │  │        │  ├─ variant_4: struct #11
      │  │        │  │  └─ [notIn]: array #7
      │  │        │  │     └─ item: string #5
      │  │        │  ├─ variant_5: struct #14
      │  │        │  │  ├─ [contains]: string #5
      │  │        │  │  └─ [mode]: optional #13
      │  │        │  │     └─ item: string #12 enum{ '"insensitive"' }
      │  │        │  ├─ variant_6: struct #15
      │  │        │  │  └─ [search]: string #5
      │  │        │  └─ variant_7: struct #16
      │  │        │     ├─ [startsWith]: optional #6
      │  │        │     │  └─ item: string #5
      │  │        │     └─ [endsWith]: optional #6
      │  │        │        └─ item: string #5
      │  │        └─ variant_1: struct #18
      │  │           └─ [not]: union '_string_filter' #17
      │  │              ├─ variant_0: string #5
      │  │              ├─ variant_1: struct #8
      │  │              │  └─ [equals]: string #5
      │  │              ├─ variant_2: struct #9
      │  │              │  └─ [not]: string #5
      │  │              ├─ variant_3: struct #10
      │  │              │  └─ [in]: array #7
      │  │              │     └─ item: string #5
      │  │              ├─ variant_4: struct #11
      │  │              │  └─ [notIn]: array #7
      │  │              │     └─ item: string #5
      │  │              ├─ variant_5: struct #14
      │  │              │  ├─ [contains]: string #5
      │  │              │  └─ [mode]: optional #13
      │  │              │     └─ item: string #12 enum{ '"insensitive"' }
      │  │              ├─ variant_6: struct #15
      │  │              │  └─ [search]: string #5
      │  │              └─ variant_7: struct #16
      │  │                 ├─ [startsWith]: optional #6
      │  │                 │  └─ item: string #5
      │  │                 └─ [endsWith]: optional #6
      │  │                    └─ item: string #5
      │  └─ [posts]: optional '_136_PostWhere__agg__skip_95_UserWhere__agg?' #136
      │     └─ item: struct 'PostWhere__agg__skip_95_UserWhere__agg' #135
      │        ├─ [id]: optional '_131__integer_filter_c?' #131
      │        │  └─ item: optional '_integer_filter_c' #34
      │        │     └─ item: union #33
      │        │        ├─ variant_0: either '_integer_filter' #31
      │        │        │  ├─ variant_0: integer #23
      │        │        │  ├─ variant_1: struct #26
      │        │        │  │  └─ [equals]: integer #23
      │        │        │  ├─ variant_2: struct #27
      │        │        │  │  └─ [not]: integer #23
      │        │        │  ├─ variant_3: struct #28
      │        │        │  │  ├─ [lt]: optional #24
      │        │        │  │  │  └─ item: integer #23
      │        │        │  │  ├─ [gt]: optional #24
      │        │        │  │  │  └─ item: integer #23
      │        │        │  │  ├─ [lte]: optional #24
      │        │        │  │  │  └─ item: integer #23
      │        │        │  │  └─ [gte]: optional #24
      │        │        │  │     └─ item: integer #23
      │        │        │  ├─ variant_4: struct #29
      │        │        │  │  └─ [in]: array #25
      │        │        │  │     └─ item: integer #23
      │        │        │  └─ variant_5: struct #30
      │        │        │     └─ [notIn]: array #25
      │        │        │        └─ item: integer #23
      │        │        └─ variant_1: struct #32
      │        │           └─ [not]: either '_integer_filter' #31
      │        │              ├─ variant_0: integer #23
      │        │              ├─ variant_1: struct #26
      │        │              │  └─ [equals]: integer #23
      │        │              ├─ variant_2: struct #27
      │        │              │  └─ [not]: integer #23
      │        │              ├─ variant_3: struct #28
      │        │              │  ├─ [lt]: optional #24
      │        │              │  │  └─ item: integer #23
      │        │              │  ├─ [gt]: optional #24
      │        │              │  │  └─ item: integer #23
      │        │              │  ├─ [lte]: optional #24
      │        │              │  │  └─ item: integer #23
      │        │              │  └─ [gte]: optional #24
      │        │              │     └─ item: integer #23
      │        │              ├─ variant_4: struct #29
      │        │              │  └─ [in]: array #25
      │        │              │     └─ item: integer #23
      │        │              └─ variant_5: struct #30
      │        │                 └─ [notIn]: array #25
      │        │                    └─ item: integer #23
      │        ├─ [title]: optional '_132__string_filter_c?' #132
      │        │  └─ item: optional '_string_filter_c' #20
      │        │     └─ item: union #19
      │        │        ├─ variant_0: union '_string_filter' #17
      │        │        │  ├─ variant_0: string #5
      │        │        │  ├─ variant_1: struct #8
      │        │        │  │  └─ [equals]: string #5
      │        │        │  ├─ variant_2: struct #9
      │        │        │  │  └─ [not]: string #5
      │        │        │  ├─ variant_3: struct #10
      │        │        │  │  └─ [in]: array #7
      │        │        │  │     └─ item: string #5
      │        │        │  ├─ variant_4: struct #11
      │        │        │  │  └─ [notIn]: array #7
      │        │        │  │     └─ item: string #5
      │        │        │  ├─ variant_5: struct #14
      │        │        │  │  ├─ [contains]: string #5
      │        │        │  │  └─ [mode]: optional #13
      │        │        │  │     └─ item: string #12 enum{ '"insensitive"' }
      │        │        │  ├─ variant_6: struct #15
      │        │        │  │  └─ [search]: string #5
      │        │        │  └─ variant_7: struct #16
      │        │        │     ├─ [startsWith]: optional #6
      │        │        │     │  └─ item: string #5
      │        │        │     └─ [endsWith]: optional #6
      │        │        │        └─ item: string #5
      │        │        └─ variant_1: struct #18
      │        │           └─ [not]: union '_string_filter' #17
      │        │              ├─ variant_0: string #5
      │        │              ├─ variant_1: struct #8
      │        │              │  └─ [equals]: string #5
      │        │              ├─ variant_2: struct #9
      │        │              │  └─ [not]: string #5
      │        │              ├─ variant_3: struct #10
      │        │              │  └─ [in]: array #7
      │        │              │     └─ item: string #5
      │        │              ├─ variant_4: struct #11
      │        │              │  └─ [notIn]: array #7
      │        │              │     └─ item: string #5
      │        │              ├─ variant_5: struct #14
      │        │              │  ├─ [contains]: string #5
      │        │              │  └─ [mode]: optional #13
      │        │              │     └─ item: string #12 enum{ '"insensitive"' }
      │        │              ├─ variant_6: struct #15
      │        │              │  └─ [search]: string #5
      │        │              └─ variant_7: struct #16
      │        │                 ├─ [startsWith]: optional #6
      │        │                 │  └─ item: string #5
      │        │                 └─ [endsWith]: optional #6
      │        │                    └─ item: string #5
      │        └─ [author]: optional '_134_UserWhere__agg?' #134
      │           └─ item: &UserWhere__agg #133
      ├─ variant_1: struct #140
      │  └─ [AND]: array '_139__User_Having[]' #139
      │     └─ item: &_User_Having #138
      ├─ variant_2: struct #142
      │  └─ [OR]: array '_141__User_Having[]' #141
      │     └─ item: &_User_Having #138
      └─ variant_3: struct #143
         └─ [NOT]: &_User_Having #138

