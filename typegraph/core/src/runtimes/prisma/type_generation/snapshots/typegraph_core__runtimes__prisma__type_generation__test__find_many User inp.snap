---
source: typegraph/core/src/runtimes/prisma/type_generation/mod.rs
expression: "tree::print(inp)"
---
root: struct '_User_QueryInput' #109
├─ [where]: optional '_98_QueryUserWhereInput?' #98
│  └─ item: struct 'QueryUserWhereInput' #97
│     ├─ [id]: optional '_86__integer_filter_c?' #86
│     │  └─ item: optional '_integer_filter_c' #38
│     │     └─ item: union #37
│     │        ├─ variant_0: either '_integer_filter' #35
│     │        │  ├─ variant_0: integer #27
│     │        │  ├─ variant_1: struct #30
│     │        │  │  └─ [equals]: integer #27
│     │        │  ├─ variant_2: struct #31
│     │        │  │  └─ [not]: integer #27
│     │        │  ├─ variant_3: struct #32
│     │        │  │  ├─ [lt]: optional #28
│     │        │  │  │  └─ item: integer #27
│     │        │  │  ├─ [gt]: optional #28
│     │        │  │  │  └─ item: integer #27
│     │        │  │  ├─ [lte]: optional #28
│     │        │  │  │  └─ item: integer #27
│     │        │  │  └─ [gte]: optional #28
│     │        │  │     └─ item: integer #27
│     │        │  ├─ variant_4: struct #33
│     │        │  │  └─ [in]: array #29
│     │        │  │     └─ item: integer #27
│     │        │  └─ variant_5: struct #34
│     │        │     └─ [notIn]: array #29
│     │        │        └─ item: integer #27
│     │        └─ variant_1: struct #36
│     │           └─ [not]: either '_integer_filter' #35
│     │              ├─ variant_0: integer #27
│     │              ├─ variant_1: struct #30
│     │              │  └─ [equals]: integer #27
│     │              ├─ variant_2: struct #31
│     │              │  └─ [not]: integer #27
│     │              ├─ variant_3: struct #32
│     │              │  ├─ [lt]: optional #28
│     │              │  │  └─ item: integer #27
│     │              │  ├─ [gt]: optional #28
│     │              │  │  └─ item: integer #27
│     │              │  ├─ [lte]: optional #28
│     │              │  │  └─ item: integer #27
│     │              │  └─ [gte]: optional #28
│     │              │     └─ item: integer #27
│     │              ├─ variant_4: struct #33
│     │              │  └─ [in]: array #29
│     │              │     └─ item: integer #27
│     │              └─ variant_5: struct #34
│     │                 └─ [notIn]: array #29
│     │                    └─ item: integer #27
│     ├─ [name]: optional '_87__string_filter_c?' #87
│     │  └─ item: optional '_string_filter_c' #24
│     │     └─ item: union #23
│     │        ├─ variant_0: union '_string_filter' #21
│     │        │  ├─ variant_0: string #9
│     │        │  ├─ variant_1: struct #12
│     │        │  │  └─ [equals]: string #9
│     │        │  ├─ variant_2: struct #13
│     │        │  │  └─ [not]: string #9
│     │        │  ├─ variant_3: struct #14
│     │        │  │  └─ [in]: array #11
│     │        │  │     └─ item: string #9
│     │        │  ├─ variant_4: struct #15
│     │        │  │  └─ [notIn]: array #11
│     │        │  │     └─ item: string #9
│     │        │  ├─ variant_5: struct #18
│     │        │  │  ├─ [contains]: string #9
│     │        │  │  └─ [mode]: optional #17
│     │        │  │     └─ item: string #16 enum{ '"insensitive"' }
│     │        │  ├─ variant_6: struct #19
│     │        │  │  └─ [search]: string #9
│     │        │  └─ variant_7: struct #20
│     │        │     ├─ [startsWith]: optional #10
│     │        │     │  └─ item: string #9
│     │        │     └─ [endsWith]: optional #10
│     │        │        └─ item: string #9
│     │        └─ variant_1: struct #22
│     │           └─ [not]: union '_string_filter' #21
│     │              ├─ variant_0: string #9
│     │              ├─ variant_1: struct #12
│     │              │  └─ [equals]: string #9
│     │              ├─ variant_2: struct #13
│     │              │  └─ [not]: string #9
│     │              ├─ variant_3: struct #14
│     │              │  └─ [in]: array #11
│     │              │     └─ item: string #9
│     │              ├─ variant_4: struct #15
│     │              │  └─ [notIn]: array #11
│     │              │     └─ item: string #9
│     │              ├─ variant_5: struct #18
│     │              │  ├─ [contains]: string #9
│     │              │  └─ [mode]: optional #17
│     │              │     └─ item: string #16 enum{ '"insensitive"' }
│     │              ├─ variant_6: struct #19
│     │              │  └─ [search]: string #9
│     │              └─ variant_7: struct #20
│     │                 ├─ [startsWith]: optional #10
│     │                 │  └─ item: string #9
│     │                 └─ [endsWith]: optional #10
│     │                    └─ item: string #9
│     ├─ [posts]: optional '_91__76WithFilters_norel?' #91
│     │  └─ item: struct '_76WithFilters_norel' #90
│     │     ├─ [id]: optional '_88__integer_filter_c?' #88
│     │     │  └─ item: optional '_integer_filter_c' #38
│     │     │     └─ item: union #37
│     │     │        ├─ variant_0: either '_integer_filter' #35
│     │     │        │  ├─ variant_0: integer #27
│     │     │        │  ├─ variant_1: struct #30
│     │     │        │  │  └─ [equals]: integer #27
│     │     │        │  ├─ variant_2: struct #31
│     │     │        │  │  └─ [not]: integer #27
│     │     │        │  ├─ variant_3: struct #32
│     │     │        │  │  ├─ [lt]: optional #28
│     │     │        │  │  │  └─ item: integer #27
│     │     │        │  │  ├─ [gt]: optional #28
│     │     │        │  │  │  └─ item: integer #27
│     │     │        │  │  ├─ [lte]: optional #28
│     │     │        │  │  │  └─ item: integer #27
│     │     │        │  │  └─ [gte]: optional #28
│     │     │        │  │     └─ item: integer #27
│     │     │        │  ├─ variant_4: struct #33
│     │     │        │  │  └─ [in]: array #29
│     │     │        │  │     └─ item: integer #27
│     │     │        │  └─ variant_5: struct #34
│     │     │        │     └─ [notIn]: array #29
│     │     │        │        └─ item: integer #27
│     │     │        └─ variant_1: struct #36
│     │     │           └─ [not]: either '_integer_filter' #35
│     │     │              ├─ variant_0: integer #27
│     │     │              ├─ variant_1: struct #30
│     │     │              │  └─ [equals]: integer #27
│     │     │              ├─ variant_2: struct #31
│     │     │              │  └─ [not]: integer #27
│     │     │              ├─ variant_3: struct #32
│     │     │              │  ├─ [lt]: optional #28
│     │     │              │  │  └─ item: integer #27
│     │     │              │  ├─ [gt]: optional #28
│     │     │              │  │  └─ item: integer #27
│     │     │              │  ├─ [lte]: optional #28
│     │     │              │  │  └─ item: integer #27
│     │     │              │  └─ [gte]: optional #28
│     │     │              │     └─ item: integer #27
│     │     │              ├─ variant_4: struct #33
│     │     │              │  └─ [in]: array #29
│     │     │              │     └─ item: integer #27
│     │     │              └─ variant_5: struct #34
│     │     │                 └─ [notIn]: array #29
│     │     │                    └─ item: integer #27
│     │     └─ [title]: optional '_89__string_filter_c?' #89
│     │        └─ item: optional '_string_filter_c' #24
│     │           └─ item: union #23
│     │              ├─ variant_0: union '_string_filter' #21
│     │              │  ├─ variant_0: string #9
│     │              │  ├─ variant_1: struct #12
│     │              │  │  └─ [equals]: string #9
│     │              │  ├─ variant_2: struct #13
│     │              │  │  └─ [not]: string #9
│     │              │  ├─ variant_3: struct #14
│     │              │  │  └─ [in]: array #11
│     │              │  │     └─ item: string #9
│     │              │  ├─ variant_4: struct #15
│     │              │  │  └─ [notIn]: array #11
│     │              │  │     └─ item: string #9
│     │              │  ├─ variant_5: struct #18
│     │              │  │  ├─ [contains]: string #9
│     │              │  │  └─ [mode]: optional #17
│     │              │  │     └─ item: string #16 enum{ '"insensitive"' }
│     │              │  ├─ variant_6: struct #19
│     │              │  │  └─ [search]: string #9
│     │              │  └─ variant_7: struct #20
│     │              │     ├─ [startsWith]: optional #10
│     │              │     │  └─ item: string #9
│     │              │     └─ [endsWith]: optional #10
│     │              │        └─ item: string #9
│     │              └─ variant_1: struct #22
│     │                 └─ [not]: union '_string_filter' #21
│     │                    ├─ variant_0: string #9
│     │                    ├─ variant_1: struct #12
│     │                    │  └─ [equals]: string #9
│     │                    ├─ variant_2: struct #13
│     │                    │  └─ [not]: string #9
│     │                    ├─ variant_3: struct #14
│     │                    │  └─ [in]: array #11
│     │                    │     └─ item: string #9
│     │                    ├─ variant_4: struct #15
│     │                    │  └─ [notIn]: array #11
│     │                    │     └─ item: string #9
│     │                    ├─ variant_5: struct #18
│     │                    │  ├─ [contains]: string #9
│     │                    │  └─ [mode]: optional #17
│     │                    │     └─ item: string #16 enum{ '"insensitive"' }
│     │                    ├─ variant_6: struct #19
│     │                    │  └─ [search]: string #9
│     │                    └─ variant_7: struct #20
│     │                       ├─ [startsWith]: optional #10
│     │                       │  └─ item: string #9
│     │                       └─ [endsWith]: optional #10
│     │                          └─ item: string #9
│     ├─ [AND]: optional '_95__94_QueryUserWhereInput[]?' #95
│     │  └─ item: array '_94_QueryUserWhereInput[]' #94
│     │     └─ item: &QueryUserWhereInput #93
│     ├─ [OR]: optional '_95__94_QueryUserWhereInput[]?' #95
│     │  └─ item: array '_94_QueryUserWhereInput[]' #94
│     │     └─ item: &QueryUserWhereInput #93
│     └─ [NOT]: optional '_96_QueryUserWhereInput?' #96
│        └─ item: &QueryUserWhereInput #93
├─ [orderBy]: optional '_103__User_OrderBy?' #103
│  └─ item: array '_User_OrderBy' #102
│     └─ item: struct #101
│        ├─ [id]: optional '_Sort' #51
│        │  └─ item: union #50
│        │     ├─ variant_0: struct #49
│        │     │  └─ [sort]: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│        ├─ [name]: optional '_Sort' #51
│        │  └─ item: union #50
│        │     ├─ variant_0: struct #49
│        │     │  └─ [sort]: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│        └─ [posts]: optional '_SortByAggregates' #100
│           └─ item: struct #99
│              ├─ [_count]: optional '_Sort' #51
│              │  └─ item: union #50
│              │     ├─ variant_0: struct #49
│              │     │  └─ [sort]: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│              │     └─ variant_1: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│              ├─ [_avg]: optional '_Sort' #51
│              │  └─ item: union #50
│              │     ├─ variant_0: struct #49
│              │     │  └─ [sort]: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│              │     └─ variant_1: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│              ├─ [_sum]: optional '_Sort' #51
│              │  └─ item: union #50
│              │     ├─ variant_0: struct #49
│              │     │  └─ [sort]: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│              │     └─ variant_1: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│              ├─ [_min]: optional '_Sort' #51
│              │  └─ item: union #50
│              │     ├─ variant_0: struct #49
│              │     │  └─ [sort]: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│              │     └─ variant_1: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│              └─ [_max]: optional '_Sort' #51
│                 └─ item: union #50
│                    ├─ variant_0: struct #49
│                    │  └─ [sort]: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
│                    └─ variant_1: string '_SortOrder' #47 enum{ '"asc"', '"desc"' }
├─ [take]: optional '_104__Take?' #104
│  └─ item: integer '_Take' #58
├─ [skip]: optional '_105__Skip?' #105
│  └─ item: integer '_Skip' #60
└─ [distinct]: optional '_108__KeysOf_User?' #108
   └─ item: array '_KeysOf_User' #107
      └─ item: string #106 enum{ '"id"', '"name"', '"posts"' }

