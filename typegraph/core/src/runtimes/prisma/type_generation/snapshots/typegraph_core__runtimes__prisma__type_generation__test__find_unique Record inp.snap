---
source: typegraph/core/src/runtimes/prisma/type_generation/mod.rs
expression: tp.print(inp)
---
root: struct #43
└─ [where]: optional '_42_QueryRecordWhereUniqueInput?' #42
   └─ item: struct 'QueryRecordWhereUniqueInput' #41
      ├─ [AND]: optional '_39__38_QueryRecordWhereUniqueInput[]?' #39
      │  └─ item: list '_38_QueryRecordWhereUniqueInput[]' #38
      │     └─ item: &QueryRecordWhereUniqueInput #37
      ├─ [NOT]: optional '_40_QueryRecordWhereUniqueInput?' #40
      │  └─ item: &QueryRecordWhereUniqueInput #37
      ├─ [OR]: optional '_39__38_QueryRecordWhereUniqueInput[]?' #39
      │  └─ item: list '_38_QueryRecordWhereUniqueInput[]' #38
      │     └─ item: &QueryRecordWhereUniqueInput #37
      ├─ [age]: optional '_35__integer_filter_c?' #35
      │  └─ item: optional '_integer_filter_c' #34
      │     └─ item: union #33
      │        ├─ variant_0: either '_integer_filter' #31
      │        │  ├─ variant_0: integer #23
      │        │  ├─ variant_1: struct #26
      │        │  │  └─ [equals]: integer #23
      │        │  ├─ variant_2: struct #27
      │        │  │  └─ [not]: integer #23
      │        │  ├─ variant_3: struct #28
      │        │  │  ├─ [gt]: optional #24
      │        │  │  │  └─ item: integer #23
      │        │  │  ├─ [gte]: optional #24
      │        │  │  │  └─ item: integer #23
      │        │  │  ├─ [lt]: optional #24
      │        │  │  │  └─ item: integer #23
      │        │  │  └─ [lte]: optional #24
      │        │  │     └─ item: integer #23
      │        │  ├─ variant_4: struct #29
      │        │  │  └─ [in]: list #25
      │        │  │     └─ item: integer #23
      │        │  └─ variant_5: struct #30
      │        │     └─ [notIn]: list #25
      │        │        └─ item: integer #23
      │        └─ variant_1: struct #32
      │           └─ [not]: either '_integer_filter' #31
      │              ├─ variant_0: integer #23
      │              ├─ variant_1: struct #26
      │              │  └─ [equals]: integer #23
      │              ├─ variant_2: struct #27
      │              │  └─ [not]: integer #23
      │              ├─ variant_3: struct #28
      │              │  ├─ [gt]: optional #24
      │              │  │  └─ item: integer #23
      │              │  ├─ [gte]: optional #24
      │              │  │  └─ item: integer #23
      │              │  ├─ [lt]: optional #24
      │              │  │  └─ item: integer #23
      │              │  └─ [lte]: optional #24
      │              │     └─ item: integer #23
      │              ├─ variant_4: struct #29
      │              │  └─ [in]: list #25
      │              │     └─ item: integer #23
      │              └─ variant_5: struct #30
      │                 └─ [notIn]: list #25
      │                    └─ item: integer #23
      ├─ [id]: optional '_21__string_filter_c?' #21
      │  └─ item: optional '_string_filter_c' #20
      │     └─ item: union #19
      │        ├─ variant_0: union '_string_filter' #17
      │        │  ├─ variant_0: string #5
      │        │  ├─ variant_1: struct #8
      │        │  │  └─ [equals]: string #5
      │        │  ├─ variant_2: struct #9
      │        │  │  └─ [not]: string #5
      │        │  ├─ variant_3: struct #10
      │        │  │  └─ [in]: list #7
      │        │  │     └─ item: string #5
      │        │  ├─ variant_4: struct #11
      │        │  │  └─ [notIn]: list #7
      │        │  │     └─ item: string #5
      │        │  ├─ variant_5: struct #14
      │        │  │  ├─ [contains]: string #5
      │        │  │  └─ [mode]: optional #13
      │        │  │     └─ item: string #12 enum{ '"insensitive"' }
      │        │  ├─ variant_6: struct #15
      │        │  │  └─ [search]: string #5
      │        │  └─ variant_7: struct #16
      │        │     ├─ [endsWith]: optional #6
      │        │     │  └─ item: string #5
      │        │     └─ [startsWith]: optional #6
      │        │        └─ item: string #5
      │        └─ variant_1: struct #18
      │           └─ [not]: union '_string_filter' #17
      │              ├─ variant_0: string #5
      │              ├─ variant_1: struct #8
      │              │  └─ [equals]: string #5
      │              ├─ variant_2: struct #9
      │              │  └─ [not]: string #5
      │              ├─ variant_3: struct #10
      │              │  └─ [in]: list #7
      │              │     └─ item: string #5
      │              ├─ variant_4: struct #11
      │              │  └─ [notIn]: list #7
      │              │     └─ item: string #5
      │              ├─ variant_5: struct #14
      │              │  ├─ [contains]: string #5
      │              │  └─ [mode]: optional #13
      │              │     └─ item: string #12 enum{ '"insensitive"' }
      │              ├─ variant_6: struct #15
      │              │  └─ [search]: string #5
      │              └─ variant_7: struct #16
      │                 ├─ [endsWith]: optional #6
      │                 │  └─ item: string #5
      │                 └─ [startsWith]: optional #6
      │                    └─ item: string #5
      └─ [name]: optional '_22__string_filter_c?' #22
         └─ item: optional '_string_filter_c' #20
            └─ item: union #19
               ├─ variant_0: union '_string_filter' #17
               │  ├─ variant_0: string #5
               │  ├─ variant_1: struct #8
               │  │  └─ [equals]: string #5
               │  ├─ variant_2: struct #9
               │  │  └─ [not]: string #5
               │  ├─ variant_3: struct #10
               │  │  └─ [in]: list #7
               │  │     └─ item: string #5
               │  ├─ variant_4: struct #11
               │  │  └─ [notIn]: list #7
               │  │     └─ item: string #5
               │  ├─ variant_5: struct #14
               │  │  ├─ [contains]: string #5
               │  │  └─ [mode]: optional #13
               │  │     └─ item: string #12 enum{ '"insensitive"' }
               │  ├─ variant_6: struct #15
               │  │  └─ [search]: string #5
               │  └─ variant_7: struct #16
               │     ├─ [endsWith]: optional #6
               │     │  └─ item: string #5
               │     └─ [startsWith]: optional #6
               │        └─ item: string #5
               └─ variant_1: struct #18
                  └─ [not]: union '_string_filter' #17
                     ├─ variant_0: string #5
                     ├─ variant_1: struct #8
                     │  └─ [equals]: string #5
                     ├─ variant_2: struct #9
                     │  └─ [not]: string #5
                     ├─ variant_3: struct #10
                     │  └─ [in]: list #7
                     │     └─ item: string #5
                     ├─ variant_4: struct #11
                     │  └─ [notIn]: list #7
                     │     └─ item: string #5
                     ├─ variant_5: struct #14
                     │  ├─ [contains]: string #5
                     │  └─ [mode]: optional #13
                     │     └─ item: string #12 enum{ '"insensitive"' }
                     ├─ variant_6: struct #15
                     │  └─ [search]: string #5
                     └─ variant_7: struct #16
                        ├─ [endsWith]: optional #6
                        │  └─ item: string #5
                        └─ [startsWith]: optional #6
                           └─ item: string #5

