---
source: typegraph/core/src/runtimes/prisma/type_generation/mod.rs
expression: "tree::print(inp)"
---
root: struct #63
├─ [where]: optional #44
│  └─ item: struct 'QueryRecordWhereInput' #43
│     ├─ [id]: optional #24
│     │  └─ item: optional '_string_filter_c' #23
│     │     └─ item: union #22
│     │        ├─ variant_0: union '_string_filter' #20
│     │        │  ├─ variant_0: string #9
│     │        │  ├─ variant_1: struct #12
│     │        │  │  └─ [equals]: string #9
│     │        │  ├─ variant_2: struct #13
│     │        │  │  └─ [in]: array #11
│     │        │  │     └─ item: string #9
│     │        │  ├─ variant_3: struct #14
│     │        │  │  └─ [notIn]: array #11
│     │        │  │     └─ item: string #9
│     │        │  ├─ variant_4: struct #17
│     │        │  │  ├─ [contains]: string #9
│     │        │  │  └─ [mode]: optional #16
│     │        │  │     └─ item: string #15 enum{ '"insensitive"' }
│     │        │  ├─ variant_5: struct #18
│     │        │  │  └─ [search]: string #9
│     │        │  └─ variant_6: struct #19
│     │        │     ├─ [startsWith]: optional #10
│     │        │     │  └─ item: string #9
│     │        │     └─ [endsWith]: optional #10
│     │        │        └─ item: string #9
│     │        └─ variant_1: struct #21
│     │           └─ [not]: union '_string_filter' #20
│     │              ├─ variant_0: string #9
│     │              ├─ variant_1: struct #12
│     │              │  └─ [equals]: string #9
│     │              ├─ variant_2: struct #13
│     │              │  └─ [in]: array #11
│     │              │     └─ item: string #9
│     │              ├─ variant_3: struct #14
│     │              │  └─ [notIn]: array #11
│     │              │     └─ item: string #9
│     │              ├─ variant_4: struct #17
│     │              │  ├─ [contains]: string #9
│     │              │  └─ [mode]: optional #16
│     │              │     └─ item: string #15 enum{ '"insensitive"' }
│     │              ├─ variant_5: struct #18
│     │              │  └─ [search]: string #9
│     │              └─ variant_6: struct #19
│     │                 ├─ [startsWith]: optional #10
│     │                 │  └─ item: string #9
│     │                 └─ [endsWith]: optional #10
│     │                    └─ item: string #9
│     ├─ [name]: optional #25
│     │  └─ item: optional '_string_filter_c' #23
│     │     └─ item: union #22
│     │        ├─ variant_0: union '_string_filter' #20
│     │        │  ├─ variant_0: string #9
│     │        │  ├─ variant_1: struct #12
│     │        │  │  └─ [equals]: string #9
│     │        │  ├─ variant_2: struct #13
│     │        │  │  └─ [in]: array #11
│     │        │  │     └─ item: string #9
│     │        │  ├─ variant_3: struct #14
│     │        │  │  └─ [notIn]: array #11
│     │        │  │     └─ item: string #9
│     │        │  ├─ variant_4: struct #17
│     │        │  │  ├─ [contains]: string #9
│     │        │  │  └─ [mode]: optional #16
│     │        │  │     └─ item: string #15 enum{ '"insensitive"' }
│     │        │  ├─ variant_5: struct #18
│     │        │  │  └─ [search]: string #9
│     │        │  └─ variant_6: struct #19
│     │        │     ├─ [startsWith]: optional #10
│     │        │     │  └─ item: string #9
│     │        │     └─ [endsWith]: optional #10
│     │        │        └─ item: string #9
│     │        └─ variant_1: struct #21
│     │           └─ [not]: union '_string_filter' #20
│     │              ├─ variant_0: string #9
│     │              ├─ variant_1: struct #12
│     │              │  └─ [equals]: string #9
│     │              ├─ variant_2: struct #13
│     │              │  └─ [in]: array #11
│     │              │     └─ item: string #9
│     │              ├─ variant_3: struct #14
│     │              │  └─ [notIn]: array #11
│     │              │     └─ item: string #9
│     │              ├─ variant_4: struct #17
│     │              │  ├─ [contains]: string #9
│     │              │  └─ [mode]: optional #16
│     │              │     └─ item: string #15 enum{ '"insensitive"' }
│     │              ├─ variant_5: struct #18
│     │              │  └─ [search]: string #9
│     │              └─ variant_6: struct #19
│     │                 ├─ [startsWith]: optional #10
│     │                 │  └─ item: string #9
│     │                 └─ [endsWith]: optional #10
│     │                    └─ item: string #9
│     ├─ [age]: optional #37
│     │  └─ item: optional '_integer_filter_c' #36
│     │     └─ item: union #35
│     │        ├─ variant_0: union '_integer_filter' #33
│     │        │  ├─ variant_0: integer #26
│     │        │  ├─ variant_1: struct #29
│     │        │  │  └─ [equals]: integer #26
│     │        │  ├─ variant_2: struct #30
│     │        │  │  ├─ [lt]: optional #27
│     │        │  │  │  └─ item: integer #26
│     │        │  │  ├─ [gt]: optional #27
│     │        │  │  │  └─ item: integer #26
│     │        │  │  ├─ [lte]: optional #27
│     │        │  │  │  └─ item: integer #26
│     │        │  │  └─ [gte]: optional #27
│     │        │  │     └─ item: integer #26
│     │        │  ├─ variant_3: struct #31
│     │        │  │  └─ [in]: array #28
│     │        │  │     └─ item: integer #26
│     │        │  └─ variant_4: struct #32
│     │        │     └─ [notIn]: array #28
│     │        │        └─ item: integer #26
│     │        └─ variant_1: struct #34
│     │           └─ [not]: union '_integer_filter' #33
│     │              ├─ variant_0: integer #26
│     │              ├─ variant_1: struct #29
│     │              │  └─ [equals]: integer #26
│     │              ├─ variant_2: struct #30
│     │              │  ├─ [lt]: optional #27
│     │              │  │  └─ item: integer #26
│     │              │  ├─ [gt]: optional #27
│     │              │  │  └─ item: integer #26
│     │              │  ├─ [lte]: optional #27
│     │              │  │  └─ item: integer #26
│     │              │  └─ [gte]: optional #27
│     │              │     └─ item: integer #26
│     │              ├─ variant_3: struct #31
│     │              │  └─ [in]: array #28
│     │              │     └─ item: integer #26
│     │              └─ variant_4: struct #32
│     │                 └─ [notIn]: array #28
│     │                    └─ item: integer #26
│     ├─ [AND]: optional #41
│     │  └─ item: array 'QueryRecordWhereInput[]' #40
│     │     └─ item: &QueryRecordWhereInput #39
│     ├─ [OR]: optional #41
│     │  └─ item: array 'QueryRecordWhereInput[]' #40
│     │     └─ item: &QueryRecordWhereInput #39
│     └─ [NOT]: optional #42
│        └─ item: &QueryRecordWhereInput #39
├─ [orderBy]: optional #55
│  └─ item: array '_4_OrderBy' #54
│     └─ item: struct #53
│        ├─ [id]: optional '_Sort' #49
│        │  └─ item: union #48
│        │     ├─ variant_0: struct #47
│        │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│        ├─ [name]: optional '_Sort' #49
│        │  └─ item: union #48
│        │     ├─ variant_0: struct #47
│        │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│        └─ [age]: optional '_Sort_nullable' #52
│           └─ item: union #51
│              ├─ variant_0: struct #50
│              │  ├─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│              │  └─ [nulls]: string '_NullsOrder' #46 enum{ '"first"', '"last"' }
│              └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
├─ [take]: optional #57
│  └─ item: integer '_Take' #56
├─ [skip]: optional #59
│  └─ item: integer '_Skip' #58
└─ [distinct]: optional #62
   └─ item: array '_KeysOf_Record[]' #61
      └─ item: string '_KeysOf_Record' #60 enum{ '"id"', '"name"', '"age"' }

