---
source: typegraph/core/src/runtimes/prisma/type_generation/mod.rs
expression: "tree::print(inp)"
---
root: struct #122
├─ [where]: optional #112
│  └─ item: struct 'QueryPostWhereInput' #111
│     ├─ [id]: optional #104
│     │  └─ item: optional '_integer_filter_c' #36
│     │     └─ item: union #35
│     │        ├─ variant_0: union '_integer_filter' #33
│     │        │  ├─ variant_0: integer #26
│     │        │  ├─ variant_1: struct #29
│     │        │  │  └─ [equals]: integer #26
│     │        │  ├─ variant_2: struct #30
│     │        │  │  ├─ [lt]: optional #27
│     │        │  │  │  └─ item: integer #26
│     │        │  │  ├─ [gt]: optional #27
│     │        │  │  │  └─ item: integer #26
│     │        │  │  ├─ [lte]: optional #27
│     │        │  │  │  └─ item: integer #26
│     │        │  │  └─ [gte]: optional #27
│     │        │  │     └─ item: integer #26
│     │        │  ├─ variant_3: struct #31
│     │        │  │  └─ [in]: array #28
│     │        │  │     └─ item: integer #26
│     │        │  └─ variant_4: struct #32
│     │        │     └─ [notIn]: array #28
│     │        │        └─ item: integer #26
│     │        └─ variant_1: struct #34
│     │           └─ [not]: union '_integer_filter' #33
│     │              ├─ variant_0: integer #26
│     │              ├─ variant_1: struct #29
│     │              │  └─ [equals]: integer #26
│     │              ├─ variant_2: struct #30
│     │              │  ├─ [lt]: optional #27
│     │              │  │  └─ item: integer #26
│     │              │  ├─ [gt]: optional #27
│     │              │  │  └─ item: integer #26
│     │              │  ├─ [lte]: optional #27
│     │              │  │  └─ item: integer #26
│     │              │  └─ [gte]: optional #27
│     │              │     └─ item: integer #26
│     │              ├─ variant_3: struct #31
│     │              │  └─ [in]: array #28
│     │              │     └─ item: integer #26
│     │              └─ variant_4: struct #32
│     │                 └─ [notIn]: array #28
│     │                    └─ item: integer #26
│     ├─ [title]: optional #105
│     │  └─ item: optional '_string_filter_c' #23
│     │     └─ item: union #22
│     │        ├─ variant_0: union '_string_filter' #20
│     │        │  ├─ variant_0: string #9
│     │        │  ├─ variant_1: struct #12
│     │        │  │  └─ [equals]: string #9
│     │        │  ├─ variant_2: struct #13
│     │        │  │  └─ [in]: array #11
│     │        │  │     └─ item: string #9
│     │        │  ├─ variant_3: struct #14
│     │        │  │  └─ [notIn]: array #11
│     │        │  │     └─ item: string #9
│     │        │  ├─ variant_4: struct #17
│     │        │  │  ├─ [contains]: string #9
│     │        │  │  └─ [mode]: optional #16
│     │        │  │     └─ item: string #15 enum{ '"insensitive"' }
│     │        │  ├─ variant_5: struct #18
│     │        │  │  └─ [search]: string #9
│     │        │  └─ variant_6: struct #19
│     │        │     ├─ [startsWith]: optional #10
│     │        │     │  └─ item: string #9
│     │        │     └─ [endsWith]: optional #10
│     │        │        └─ item: string #9
│     │        └─ variant_1: struct #21
│     │           └─ [not]: union '_string_filter' #20
│     │              ├─ variant_0: string #9
│     │              ├─ variant_1: struct #12
│     │              │  └─ [equals]: string #9
│     │              ├─ variant_2: struct #13
│     │              │  └─ [in]: array #11
│     │              │     └─ item: string #9
│     │              ├─ variant_3: struct #14
│     │              │  └─ [notIn]: array #11
│     │              │     └─ item: string #9
│     │              ├─ variant_4: struct #17
│     │              │  ├─ [contains]: string #9
│     │              │  └─ [mode]: optional #16
│     │              │     └─ item: string #15 enum{ '"insensitive"' }
│     │              ├─ variant_5: struct #18
│     │              │  └─ [search]: string #9
│     │              └─ variant_6: struct #19
│     │                 ├─ [startsWith]: optional #10
│     │                 │  └─ item: string #9
│     │                 └─ [endsWith]: optional #10
│     │                    └─ item: string #9
│     ├─ [AND]: optional #109
│     │  └─ item: array 'QueryPostWhereInput[]' #108
│     │     └─ item: &QueryPostWhereInput #107
│     ├─ [OR]: optional #109
│     │  └─ item: array 'QueryPostWhereInput[]' #108
│     │     └─ item: &QueryPostWhereInput #107
│     └─ [NOT]: optional #110
│        └─ item: &QueryPostWhereInput #107
├─ [orderBy]: optional #116
│  └─ item: array '_73_OrderBy' #115
│     └─ item: struct #114
│        ├─ [id]: optional '_Sort' #49
│        │  └─ item: union #48
│        │     ├─ variant_0: struct #47
│        │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│        ├─ [title]: optional '_Sort' #49
│        │  └─ item: union #48
│        │     ├─ variant_0: struct #47
│        │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│        │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│        └─ [author]: optional #113
│           └─ item: array '_70_OrderBy' #89
│              └─ item: struct #88
│                 ├─ [id]: optional '_Sort' #49
│                 │  └─ item: union #48
│                 │     ├─ variant_0: struct #47
│                 │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                 │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                 ├─ [name]: optional '_Sort' #49
│                 │  └─ item: union #48
│                 │     ├─ variant_0: struct #47
│                 │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                 │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                 └─ [posts]: optional '_SortByAggregates' #87
│                    └─ item: struct #86
│                       ├─ [_count]: optional '_Sort' #49
│                       │  └─ item: union #48
│                       │     ├─ variant_0: struct #47
│                       │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                       │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                       ├─ [_avg]: optional '_Sort' #49
│                       │  └─ item: union #48
│                       │     ├─ variant_0: struct #47
│                       │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                       │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                       ├─ [_sum]: optional '_Sort' #49
│                       │  └─ item: union #48
│                       │     ├─ variant_0: struct #47
│                       │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                       │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                       ├─ [_min]: optional '_Sort' #49
│                       │  └─ item: union #48
│                       │     ├─ variant_0: struct #47
│                       │     │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                       │     └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                       └─ [_max]: optional '_Sort' #49
│                          └─ item: union #48
│                             ├─ variant_0: struct #47
│                             │  └─ [sort]: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
│                             └─ variant_1: string '_SortOrder' #45 enum{ '"asc"', '"desc"' }
├─ [take]: optional #117
│  └─ item: integer '_Take' #56
├─ [skip]: optional #118
│  └─ item: integer '_Skip' #58
└─ [distinct]: optional #121
   └─ item: array '_KeysOf_Post[]' #120
      └─ item: string '_KeysOf_Post' #119 enum{ '"id"', '"title"', '"author"' }

