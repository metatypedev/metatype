---
source: typegraph/core/src/runtimes/prisma/type_generation/mod.rs
expression: "tree::print(inp)"
---
root: struct #107
└─ [where]: optional '_106_QueryPostWhereUniqueInput?' #106
   └─ item: struct 'QueryPostWhereUniqueInput' #105
      ├─ [id]: optional '_85__integer_filter_c?' #85
      │  └─ item: optional '_integer_filter_c' #34
      │     └─ item: union #33
      │        ├─ variant_0: either '_integer_filter' #31
      │        │  ├─ variant_0: integer #23
      │        │  ├─ variant_1: struct #26
      │        │  │  └─ [equals]: integer #23
      │        │  ├─ variant_2: struct #27
      │        │  │  └─ [not]: integer #23
      │        │  ├─ variant_3: struct #28
      │        │  │  ├─ [lt]: optional #24
      │        │  │  │  └─ item: integer #23
      │        │  │  ├─ [gt]: optional #24
      │        │  │  │  └─ item: integer #23
      │        │  │  ├─ [lte]: optional #24
      │        │  │  │  └─ item: integer #23
      │        │  │  └─ [gte]: optional #24
      │        │  │     └─ item: integer #23
      │        │  ├─ variant_4: struct #29
      │        │  │  └─ [in]: list #25
      │        │  │     └─ item: integer #23
      │        │  └─ variant_5: struct #30
      │        │     └─ [notIn]: list #25
      │        │        └─ item: integer #23
      │        └─ variant_1: struct #32
      │           └─ [not]: either '_integer_filter' #31
      │              ├─ variant_0: integer #23
      │              ├─ variant_1: struct #26
      │              │  └─ [equals]: integer #23
      │              ├─ variant_2: struct #27
      │              │  └─ [not]: integer #23
      │              ├─ variant_3: struct #28
      │              │  ├─ [lt]: optional #24
      │              │  │  └─ item: integer #23
      │              │  ├─ [gt]: optional #24
      │              │  │  └─ item: integer #23
      │              │  ├─ [lte]: optional #24
      │              │  │  └─ item: integer #23
      │              │  └─ [gte]: optional #24
      │              │     └─ item: integer #23
      │              ├─ variant_4: struct #29
      │              │  └─ [in]: list #25
      │              │     └─ item: integer #23
      │              └─ variant_5: struct #30
      │                 └─ [notIn]: list #25
      │                    └─ item: integer #23
      ├─ [title]: optional '_86__string_filter_c?' #86
      │  └─ item: optional '_string_filter_c' #20
      │     └─ item: union #19
      │        ├─ variant_0: union '_string_filter' #17
      │        │  ├─ variant_0: string #5
      │        │  ├─ variant_1: struct #8
      │        │  │  └─ [equals]: string #5
      │        │  ├─ variant_2: struct #9
      │        │  │  └─ [not]: string #5
      │        │  ├─ variant_3: struct #10
      │        │  │  └─ [in]: list #7
      │        │  │     └─ item: string #5
      │        │  ├─ variant_4: struct #11
      │        │  │  └─ [notIn]: list #7
      │        │  │     └─ item: string #5
      │        │  ├─ variant_5: struct #14
      │        │  │  ├─ [contains]: string #5
      │        │  │  └─ [mode]: optional #13
      │        │  │     └─ item: string #12 enum{ '"insensitive"' }
      │        │  ├─ variant_6: struct #15
      │        │  │  └─ [search]: string #5
      │        │  └─ variant_7: struct #16
      │        │     ├─ [startsWith]: optional #6
      │        │     │  └─ item: string #5
      │        │     └─ [endsWith]: optional #6
      │        │        └─ item: string #5
      │        └─ variant_1: struct #18
      │           └─ [not]: union '_string_filter' #17
      │              ├─ variant_0: string #5
      │              ├─ variant_1: struct #8
      │              │  └─ [equals]: string #5
      │              ├─ variant_2: struct #9
      │              │  └─ [not]: string #5
      │              ├─ variant_3: struct #10
      │              │  └─ [in]: list #7
      │              │     └─ item: string #5
      │              ├─ variant_4: struct #11
      │              │  └─ [notIn]: list #7
      │              │     └─ item: string #5
      │              ├─ variant_5: struct #14
      │              │  ├─ [contains]: string #5
      │              │  └─ [mode]: optional #13
      │              │     └─ item: string #12 enum{ '"insensitive"' }
      │              ├─ variant_6: struct #15
      │              │  └─ [search]: string #5
      │              └─ variant_7: struct #16
      │                 ├─ [startsWith]: optional #6
      │                 │  └─ item: string #5
      │                 └─ [endsWith]: optional #6
      │                    └─ item: string #5
      ├─ [author]: optional '_99_UserWhere__skip_54_PostWhere?' #99
      │  └─ item: struct 'UserWhere__skip_54_PostWhere' #98
      │     ├─ [id]: optional '_87__integer_filter_c?' #87
      │     │  └─ item: optional '_integer_filter_c' #34
      │     │     └─ item: union #33
      │     │        ├─ variant_0: either '_integer_filter' #31
      │     │        │  ├─ variant_0: integer #23
      │     │        │  ├─ variant_1: struct #26
      │     │        │  │  └─ [equals]: integer #23
      │     │        │  ├─ variant_2: struct #27
      │     │        │  │  └─ [not]: integer #23
      │     │        │  ├─ variant_3: struct #28
      │     │        │  │  ├─ [lt]: optional #24
      │     │        │  │  │  └─ item: integer #23
      │     │        │  │  ├─ [gt]: optional #24
      │     │        │  │  │  └─ item: integer #23
      │     │        │  │  ├─ [lte]: optional #24
      │     │        │  │  │  └─ item: integer #23
      │     │        │  │  └─ [gte]: optional #24
      │     │        │  │     └─ item: integer #23
      │     │        │  ├─ variant_4: struct #29
      │     │        │  │  └─ [in]: list #25
      │     │        │  │     └─ item: integer #23
      │     │        │  └─ variant_5: struct #30
      │     │        │     └─ [notIn]: list #25
      │     │        │        └─ item: integer #23
      │     │        └─ variant_1: struct #32
      │     │           └─ [not]: either '_integer_filter' #31
      │     │              ├─ variant_0: integer #23
      │     │              ├─ variant_1: struct #26
      │     │              │  └─ [equals]: integer #23
      │     │              ├─ variant_2: struct #27
      │     │              │  └─ [not]: integer #23
      │     │              ├─ variant_3: struct #28
      │     │              │  ├─ [lt]: optional #24
      │     │              │  │  └─ item: integer #23
      │     │              │  ├─ [gt]: optional #24
      │     │              │  │  └─ item: integer #23
      │     │              │  ├─ [lte]: optional #24
      │     │              │  │  └─ item: integer #23
      │     │              │  └─ [gte]: optional #24
      │     │              │     └─ item: integer #23
      │     │              ├─ variant_4: struct #29
      │     │              │  └─ [in]: list #25
      │     │              │     └─ item: integer #23
      │     │              └─ variant_5: struct #30
      │     │                 └─ [notIn]: list #25
      │     │                    └─ item: integer #23
      │     ├─ [name]: optional '_88__string_filter_c?' #88
      │     │  └─ item: optional '_string_filter_c' #20
      │     │     └─ item: union #19
      │     │        ├─ variant_0: union '_string_filter' #17
      │     │        │  ├─ variant_0: string #5
      │     │        │  ├─ variant_1: struct #8
      │     │        │  │  └─ [equals]: string #5
      │     │        │  ├─ variant_2: struct #9
      │     │        │  │  └─ [not]: string #5
      │     │        │  ├─ variant_3: struct #10
      │     │        │  │  └─ [in]: list #7
      │     │        │  │     └─ item: string #5
      │     │        │  ├─ variant_4: struct #11
      │     │        │  │  └─ [notIn]: list #7
      │     │        │  │     └─ item: string #5
      │     │        │  ├─ variant_5: struct #14
      │     │        │  │  ├─ [contains]: string #5
      │     │        │  │  └─ [mode]: optional #13
      │     │        │  │     └─ item: string #12 enum{ '"insensitive"' }
      │     │        │  ├─ variant_6: struct #15
      │     │        │  │  └─ [search]: string #5
      │     │        │  └─ variant_7: struct #16
      │     │        │     ├─ [startsWith]: optional #6
      │     │        │     │  └─ item: string #5
      │     │        │     └─ [endsWith]: optional #6
      │     │        │        └─ item: string #5
      │     │        └─ variant_1: struct #18
      │     │           └─ [not]: union '_string_filter' #17
      │     │              ├─ variant_0: string #5
      │     │              ├─ variant_1: struct #8
      │     │              │  └─ [equals]: string #5
      │     │              ├─ variant_2: struct #9
      │     │              │  └─ [not]: string #5
      │     │              ├─ variant_3: struct #10
      │     │              │  └─ [in]: list #7
      │     │              │     └─ item: string #5
      │     │              ├─ variant_4: struct #11
      │     │              │  └─ [notIn]: list #7
      │     │              │     └─ item: string #5
      │     │              ├─ variant_5: struct #14
      │     │              │  ├─ [contains]: string #5
      │     │              │  └─ [mode]: optional #13
      │     │              │     └─ item: string #12 enum{ '"insensitive"' }
      │     │              ├─ variant_6: struct #15
      │     │              │  └─ [search]: string #5
      │     │              └─ variant_7: struct #16
      │     │                 ├─ [startsWith]: optional #6
      │     │                 │  └─ item: string #5
      │     │                 └─ [endsWith]: optional #6
      │     │                    └─ item: string #5
      │     └─ [posts]: optional #97
      │        └─ item: union #96
      │           ├─ variant_0: struct #91
      │           │  └─ [every]: optional '_90_PostWhere?' #90
      │           │     └─ item: &PostWhere #89
      │           ├─ variant_1: struct #93
      │           │  └─ [some]: optional '_92_PostWhere?' #92
      │           │     └─ item: &PostWhere #89
      │           └─ variant_2: struct #95
      │              └─ [none]: optional '_94_PostWhere?' #94
      │                 └─ item: &PostWhere #89
      ├─ [AND]: optional '_103__102_QueryPostWhereUniqueInput[]?' #103
      │  └─ item: list '_102_QueryPostWhereUniqueInput[]' #102
      │     └─ item: &QueryPostWhereUniqueInput #101
      ├─ [OR]: optional '_103__102_QueryPostWhereUniqueInput[]?' #103
      │  └─ item: list '_102_QueryPostWhereUniqueInput[]' #102
      │     └─ item: &QueryPostWhereUniqueInput #101
      └─ [NOT]: optional '_104_QueryPostWhereUniqueInput?' #104
         └─ item: &QueryPostWhereUniqueInput #101

