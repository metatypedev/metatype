package metatype:typegraph

interface core {

    type error = string

    record typegraph-init-params {
        name: string,
        dynamic: option<bool>,
        folder: option<string>,
        path: string,
    }

    init-typegraph: func(params: typegraph-init-params) -> result<_, error>
    finalize-typegraph: func() -> result<string, error>

    type type-id = u32

    record type-base {
        name: option<string>,
    }

    record type-proxy {
        name: string,
    }
    proxyb: func(data: type-proxy) -> result<type-id, error>

    record type-integer {
        min: option<s32>,
        max: option<s32>,
        exclusive-minimum: option<s32>,
        exclusive-maximum: option<s32>,
        multiple-of: option<s32>,
        enumeration: option<list<s32>>
    }
    integerb: func(data: type-integer, base: type-base) -> result<type-id, error>

    record type-number {
        min: option<float64>,
        max: option<float64>,
        exclusive-minimum: option<float64>,
        exclusive-maximum: option<float64>,
        multiple-of: option<float64>,
        enumeration: option<list<float64>>
    }
    numberb: func(data: type-number, base: type-base) -> result<type-id, error>

    booleanb: func(base: type-base) -> result<type-id, error>

    record type-string {
        min: option<u32>,
        max: option<u32>,
        format: option<string>,
        pattern: option<string>,
        enumeration: option<list<string>>
    }
    stringb: func(data: type-string, base: type-base) -> result<type-id, error>

    record type-array {
        of: type-id,
        min: option<u32>,
        max: option<u32>,
        unique-items: option<bool>
    }
    arrayb: func(data: type-array, base: type-base) -> result<type-id, error>

    record type-optional {
        of: type-id,
        default-item: option<string>
    }
    optionalb: func(data: type-optional, base: type-base) -> result<type-id, error>

    record type-union {
        variants: list<type-id>,
    }
    unionb: func(data: type-union, base: type-base) -> result<type-id, error>

    record type-either {
        variants: list<type-id>,
    }
    eitherb: func(data: type-either, base: type-base) -> result<type-id, error>

    record type-struct {
        props: list<tuple<string, type-id>>,
    }
    structb: func(data: type-struct, base: type-base) -> result<type-id, error>

    get-type-repr: func(id: type-id) -> result<string, error>

    record type-func {
        inp: type-id,
        out: type-id,
        mat: materializer-id,
    }
    funcb: func(data: type-func) -> result<type-id, error>


    type policy-id = u32

    record policy {
        name: string,
        materializer: materializer-id,
    }

    record policy-per-effect {
        none: option<policy-id>,
        create: option<policy-id>,
        update: option<policy-id>,
        delete: option<policy-id>,
    }

    variant policy-spec {
        simple(policy-id),
        per-effect(policy-per-effect),
    }

    record type-policy {
        tpe: type-id,
        chain: list<policy-spec>,
    }

    register-policy: func(pol: policy) -> result<policy-id, error>

    with-policy: func(data: type-policy) -> result<type-id, error>

    variant context-check {
        value(string),
        pattern(string),
    }
    register-context-policy: func(key: string, check: context-check) -> result<tuple<policy-id, string>, error>

    expose: func(fns: list<tuple<string, type-id>>, namespace: list<string>) -> result<_, error>
    
    type runtime-id = u32
    type materializer-id = u32
}

interface runtimes {
    use core.{error, runtime-id, materializer-id}
    
    get-deno-runtime: func() -> runtime-id

    type idempotency = bool

    variant effect {
        none,
        create(idempotency),
        update(idempotency),
        delete(idempotency),
    }

    record base-materializer {
        runtime: runtime-id,
        effect: effect,
    }

    record materializer-deno-func {
        code: string,
        secrets: list<string>,
    }

    record materializer-deno-predefined {
        name: string,
    }

    record materializer-deno-import {
        func-name: string,
        module: string,
        secrets: list<string>,
    }

    register-deno-func: func(data: materializer-deno-func, effect: effect) -> result<materializer-id, error>
    get-predefined-deno-func: func(data: materializer-deno-predefined) -> result<materializer-id, error>
    import-deno-function: func(data: materializer-deno-import, effect: effect) -> result<materializer-id, error>

    record graphql-runtime-data {
        endpoint: string,
    }

    record materializer-graphql-query {
        path: list<string>,
    }

    register-graphql-runtime: func(data: graphql-runtime-data) -> result<runtime-id, error>
    graphql-query: func(base: base-materializer, data: materializer-graphql-query) -> result<materializer-id, error>
    graphql-mutation: func(base: base-materializer, data: materializer-graphql-query) -> result<materializer-id, error>
}

world typegraph {
    export core
    export runtimes
}
