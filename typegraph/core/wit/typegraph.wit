package metatype:typegraph

interface core {

    type error = string

    // typegraph description
    record cors {
        allow-origin: list<string>,
        allow-headers: list<string>,
        expose-headers: list<string>,
        allow-methods: list<string>,
        allow-credentials: bool,
        max-age-sec: option<u32>
    }

    variant auth-protocol {
        oauth2,
        jwt,
        basic,
    }

    record auth {
        name: string,
        protocol: auth-protocol,
        // string => json string
        auth-data: list<tuple<string, string>>,
    }

    record rate {
        window-limit: u32,
        window-sec: u32,
        query-limit: u32,
        context-identifier: option<string>,
        local-excess: u32,
    }

    record typegraph-init-params {
        name: string,
        dynamic: option<bool>,
        folder: option<string>,
        path: string,
        // TypeMeta
        prefix: option<string>,
        secrets: list<string>,
        cors: cors,
        auths: list<auth>,
        rate: option<rate>,
    }

    init-typegraph: func(params: typegraph-init-params) -> result<_, error>
    finalize-typegraph: func() -> result<string, error>

    type type-id = u32
    record type-base {
        name: option<string>,
        // string => json string
        runtime-config: option<list<tuple<string, string>>>,
        as-id: bool,
    }

    record type-with-injection {
        tpe: type-id,
        injection: string
    }

    with-injection: func(data: type-with-injection) -> result<type-id, error>

    record type-proxy {
        name: string,
        extras: list<tuple<string, string>>,
    }
    proxyb: func(data: type-proxy) -> result<type-id, error>

    record type-integer {
        min: option<s32>,
        max: option<s32>,
        exclusive-minimum: option<s32>,
        exclusive-maximum: option<s32>,
        multiple-of: option<s32>,
        enumeration: option<list<s32>>
    }
    integerb: func(data: type-integer, base: type-base) -> result<type-id, error>

    record type-float {
        min: option<float64>,
        max: option<float64>,
        exclusive-minimum: option<float64>,
        exclusive-maximum: option<float64>,
        multiple-of: option<float64>,
        enumeration: option<list<float64>>
    }
    floatb: func(data: type-float, base: type-base) -> result<type-id, error>

    booleanb: func(base: type-base) -> result<type-id, error>

    record type-string {
        min: option<u32>,
        max: option<u32>,
        format: option<string>,
        pattern: option<string>,
        enumeration: option<list<string>>
    }
    stringb: func(data: type-string, base: type-base) -> result<type-id, error>

    record type-array {
        of: type-id,
        min: option<u32>,
        max: option<u32>,
        unique-items: option<bool>
    }
    arrayb: func(data: type-array, base: type-base) -> result<type-id, error>

    record type-optional {
        of: type-id,
        default-item: option<string>
    }
    optionalb: func(data: type-optional, base: type-base) -> result<type-id, error>

    record type-union {
        variants: list<type-id>,
    }
    unionb: func(data: type-union, base: type-base) -> result<type-id, error>

    record type-either {
        variants: list<type-id>,
    }
    eitherb: func(data: type-either, base: type-base) -> result<type-id, error>

    record type-struct {
        props: list<tuple<string, type-id>>,
        additional-props: bool,
        min: option<u32>,
        max: option<u32>,
    }
    structb: func(data: type-struct, base: type-base) -> result<type-id, error>

    get-type-repr: func(id: type-id) -> result<string, error>

    record type-func {
        inp: type-id,
        out: type-id,
        mat: materializer-id,
    }
    funcb: func(data: type-func) -> result<type-id, error>

    type policy-id = u32

    record policy {
        name: string,
        materializer: materializer-id,
    }

    record policy-per-effect {
        none: option<policy-id>,
        create: option<policy-id>,
        update: option<policy-id>,
        delete: option<policy-id>,
    }

    variant policy-spec {
        simple(policy-id),
        per-effect(policy-per-effect),
    }

    record type-policy {
        tpe: type-id,
        chain: list<policy-spec>,
    }

    register-policy: func(pol: policy) -> result<policy-id, error>

    with-policy: func(data: type-policy) -> result<type-id, error>

    variant context-check {
        value(string),
        pattern(string),
    }
    register-context-policy: func(key: string, check: context-check) -> result<tuple<policy-id, string>, error>

    expose: func(fns: list<tuple<string, type-id>>, namespace: list<string>, default-policy: option<list<policy-spec>>) -> result<_, error>
    
    type runtime-id = u32
    type materializer-id = u32
}

interface runtimes {
    use core.{error, type-id, type-func, runtime-id, materializer-id}
    
    get-deno-runtime: func() -> runtime-id

    type idempotency = bool

    variant effect {
        none,
        create(idempotency),
        update(idempotency),
        delete(idempotency),
    }

    record base-materializer {
        runtime: runtime-id,
        effect: effect,
    }


    // deno
    record materializer-deno-func {
        code: string,
        secrets: list<string>,
    }

    record materializer-deno-predefined {
        name: string,
    }

    record materializer-deno-import {
        func-name: string,
        module: string,
        secrets: list<string>,
    }

    register-deno-func: func(data: materializer-deno-func, effect: effect) -> result<materializer-id, error>


    get-predefined-deno-func: func(data: materializer-deno-predefined) -> result<materializer-id, error>
    import-deno-function: func(data: materializer-deno-import, effect: effect) -> result<materializer-id, error>


    // graphql
    record graphql-runtime-data {
        endpoint: string,
    }

    record materializer-graphql-query {
        path: option<list<string>>,
    }

    register-graphql-runtime: func(data: graphql-runtime-data) -> result<runtime-id, error>
    graphql-query: func(base: base-materializer, data: materializer-graphql-query) -> result<materializer-id, error>
    graphql-mutation: func(base: base-materializer, data: materializer-graphql-query) -> result<materializer-id, error>

    record http-runtime-data {
        endpoint: string,
        cert-secret: option<string>,
        basic-auth-secret: option<string>,
    }

    enum http-method {
        get,
        post,
        put,
        patch,
        delete,
    }

    record materializer-http-request {
        method: http-method,
        path: string,
        content-type: option<string>,
        header-prefix: option<string>,
        query-fields: option<list<string>>,
        rename-fields: option<list<tuple<string, string>>>,
        body-fields: option<list<string>>,
        auth-token-field: option<string>,
    }

    register-http-runtime: func(data: http-runtime-data) -> result<runtime-id, error>
    http-request: func(base: base-materializer, data: materializer-http-request) -> result<materializer-id, error>

    // python
    record materializer-python-def {
        runtime: runtime-id,
        name: string,
        fn: string,
    }

    record materializer-python-lambda {
        runtime: runtime-id,
        fn: string,
    }

    record materializer-python-module {
        runtime: runtime-id,
        file: string,
    }

    record materializer-python-import {
        module: u32,
        func-name: string,
        secrets: list<string>
    }

    register-python-runtime: func() -> result<runtime-id, error>
    from-python-lambda: func(base: base-materializer, data: materializer-python-lambda) -> result<materializer-id, error>
    from-python-def: func(base: base-materializer, data: materializer-python-def) -> result<materializer-id, error>
    from-python-module: func(base: base-materializer, data: materializer-python-module) -> result<materializer-id, error>
    from-python-import: func(base: base-materializer, data: materializer-python-import) -> result<materializer-id, error>

    // random
    record random-runtime-data {
        seed: u32,
        reset: option<string>,
    }

    record materializer-random {
        runtime: runtime-id,
    }

    register-random-runtime: func(data: random-runtime-data) -> result<materializer-id, error>
    create-random-mat: func(base: base-materializer, data: materializer-random) -> result<materializer-id, error>

    // wasmedge
    record materializer-wasi {
        func-name: string,
        module: string,
    }

    register-wasmedge-runtime: func() -> result<runtime-id, error>
    from-wasi-module: func(base: base-materializer, data: materializer-wasi) -> result<materializer-id, error>

    // prisma
    record prisma-runtime-data {
        name: string,
        connection-string-secret: string,
    }

    record prisma-link-data {
        target-type: type-id,
        relationship-name: option<string>,
        foreign-key: option<bool>,
        target-field: option<string>,
        unique: option<bool>,
    }

    register-prisma-runtime: func(data: prisma-runtime-data) -> result<runtime-id, error>
    prisma-find-unique: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-find-many: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-find-first: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-aggregate: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-count: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-group-by: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-create-one: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-create-many: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-update-one: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-update-many: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-upsert-one: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-delete-one: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-delete-many: func(runtime: runtime-id, model: type-id) -> result<type-func, error>
    prisma-link: func(data: prisma-link-data) -> result<type-id, error>

    // temporal
    record temporal-runtime-data {
        name: string,
        host: string,
    }

    variant temporal-operation-type {
        start-workflow,
        signal-workflow,
        query-workflow,
        describe-workflow
    }

    record temporal-operation-data {
        mat-arg: option<string>,
        func-arg: option<type-id>,
        operation: temporal-operation-type,
    }

    register-temporal-runtime: func(data: temporal-runtime-data) -> result<runtime-id, error>
    generate-temporal-operation: func(runtime: runtime-id, data: temporal-operation-data) -> result<type-func, error>
}


interface utils {
    type error = string
    type type-id = u32


    // Example:
    // apply({a: 1, { b: {c: g.inherit(), d: [1, 2, 3]}})
    // produces a list of apply-path
    // [ 
    //  { path: [a], value: { inherit: false, payload: 1 } } 
    //  { path: [a, b, c], value: { inherit: true } } 
    //  { path: [a, b, d], value: { inherit: false, payload: [1, 2, 3] } } 
    // ]
    record apply-value {
        inherit: bool,
        payload: option<string>
    }

    record apply-path {
        path: list<string>,
        value: apply-value,
    }

    record apply {
        paths: list<apply-path>
    }

    gen-applyb: func(supertype-id: type-id, data: apply) -> result<type-id, error>
}

world typegraph {
    export core
    export runtimes
    export utils
}
