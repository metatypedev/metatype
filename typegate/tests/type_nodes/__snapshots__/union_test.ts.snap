export const snapshot = {};

snapshot[`Union type 1`] = `
[
  'value: {
  "color": "hello world",
  "to": "rgb_array"
}

errors: [
  {
    "instancePath": "/color",
    "schemaPath": "#/properties/color/anyOf/0/type",
    "keyword": "type",
    "params": {
      "type": "array"
    },
    "message": "must be array"
  },
  {
    "instancePath": "/color",
    "schemaPath": "#/properties/color/anyOf/1/type",
    "keyword": "type",
    "params": {
      "type": "object"
    },
    "message": "must be object"
  },
  {
    "instancePath": "/color",
    "schemaPath": "#/properties/color/anyOf/2/pattern",
    "keyword": "pattern",
    "params": {
      "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})\$"
    },
    "message": "must match pattern \\\\"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})\$\\\\""
  },
  {
    "instancePath": "/color",
    "schemaPath": "#/properties/color/anyOf/3/enum",
    "keyword": "enum",
    "params": {
      "allowedValues": [
        "red",
        "green",
        "blue",
        "black",
        "white"
      ]
    },
    "message": "must be equal to one of the allowed values"
  },
  {
    "instancePath": "/color",
    "schemaPath": "#/properties/color/anyOf",
    "keyword": "anyOf",
    "params": {},
    "message": "must match a schema in anyOf"
  }
]

schema: {
  "type": "object",
  "title": "object_8",
  "properties": {
    "color": {
      "type": [
        "array",
        "object",
        "string"
      ],
      "anyOf": [
        {
          "type": "array",
          "title": "RGB_array",
          "items": {
            "type": "integer",
            "title": "8BitsChannel",
            "minimum": 0,
            "maximum": 255
          },
          "maxItems": 3,
          "minItems": 3
        },
        {
          "type": "object",
          "title": "RGB_struct",
          "properties": {
            "r": {
              "type": "integer",
              "title": "8BitsChannel",
              "minimum": 0,
              "maximum": 255
            },
            "g": {
              "type": "integer",
              "title": "8BitsChannel",
              "minimum": 0,
              "maximum": 255
            },
            "b": {
              "type": "integer",
              "title": "8BitsChannel",
              "minimum": 0,
              "maximum": 255
            }
          },
          "required": [
            "r",
            "g",
            "b"
          ]
        },
        {
          "type": "string",
          "title": "HEX",
          "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})\$"
        },
        {
          "type": "string",
          "title": "ColorName",
          "enum": [
            "red",
            "green",
            "blue",
            "black",
            "white"
          ]
        }
      ]
    },
    "to": {
      "type": "string",
      "title": "string_7",
      "enum": [
        "rgb_array",
        "rgb_struct",
        "hex",
        "colorName"
      ]
    }
  },
  "required": [
    "color",
    "to"
  ]
}',
]
`;

snapshot[`Union type 2`] = `
{
  __schema: {
    types: [
      {
        kind: "SCALAR",
        name: "String",
        possibleTypes: null,
      },
      {
        kind: "OBJECT",
        name: "Query",
        possibleTypes: null,
      },
      {
        kind: "UNION",
        name: "Color",
        possibleTypes: [
          {
            kind: "LIST",
            name: null,
          },
          {
            kind: "OBJECT",
            name: "RGB_struct",
          },
          {
            kind: "SCALAR",
            name: "String",
          },
          {
            kind: "SCALAR",
            name: "String",
          },
        ],
      },
      {
        kind: "UNION",
        name: "Color",
        possibleTypes: [
          {
            kind: "LIST",
            name: null,
          },
          {
            kind: "OBJECT",
            name: "RGB_struct",
          },
          {
            kind: "SCALAR",
            name: "String",
          },
          {
            kind: "SCALAR",
            name: "String",
          },
        ],
      },
    ],
  },
}
`;
