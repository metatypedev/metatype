export const snapshot = {};

snapshot[`input validator compiler 1`] = `
'function validate(value, context) {
  const { formatValidators } = context;
  const errors = [];
  if (!(typeof value === "object")) {
    errors.push([\`v\`, \`expected object, but got \${typeof value}\`]);
  } else if (!(value !== null)) {
    errors.push([\`v\`, "Expected non-null object, but got null"]);
  } else {
    if (!(typeof value["title"] === "string")) {
      errors.push([\`v.title\`, \`expected string, got \${typeof value["title"]}\`]);
    } else if (!(value["title"].length >= 10)) {
      errors.push([\`v.title\`,
        \`expected minimum length: 10, got \${value["title"].length}\`]);
    } else if (!(value["title"].length <= 200)) {
      errors.push([\`v.title\`,
        \`expected maximum length: 200, got \${value["title"].length}\`]);
    }
    if (!(typeof value["content"] === "string")) {
      errors.push([\`v.content\`,
        \`expected string, got \${typeof value["content"]}\`]);
    } else if (!(value["content"].length >= 100)) {
      errors.push([\`v.content\`,
        \`expected minimum length: 100, got \${value["content"].length}\`]);
    }
    if (!(typeof value["authorId"] === "string")) {
      errors.push([\`v.authorId\`,
        \`expected string, got \${typeof value["authorId"]}\`]);
    } else if (!(formatValidators["uuid"](value["authorId"]))) {
      errors.push([\`v.authorId\`,
        \`string format constraint "uuid" not satisfied\`]);
    }
    if (value["tags"] == null) {
    } else {
      if (!(Array.isArray(value["tags"]))) {
        errors.push([\`v.tags\`,
          \`expected array, but got \${typeof value["tags"]}\`]);
      } else if (!(value["tags"].length >= 2)) {
        errors.push([\`v.tags\`,
          \`expected minimum item count: 2, got \${value["tags"].length}\`]);
      } else {
        for (let _a0 = 0; _a0 < value["tags"].length; ++_a0) {
          if (!(typeof value["tags"][_a0] === "string")) {
            errors.push([\`v.tags[\${_a0}]\`,
              \`expected string, got \${typeof value["tags"][_a0]}\`]);
          } else if (!(value["tags"][_a0].length <= 10)) {
            errors.push([\`v.tags[\${_a0}]\`,
              \`expected maximum length: 10, got \${value["tags"][_a0].length}\`]);
          }
        }
      }
    }
  }
  return errors;
}
'
`;

snapshot[`input validator compiler 2`] = `
'Validation errors:
  - at v.title: expected minimum length: 10, got 6
  - at v.content: expected minimum length: 100, got 13
  - at v.authorId: string format constraint "uuid" not satisfied
  - at v.tags[2]: expected maximum length: 10, got 11'
`;

snapshot[`input validator compiler 3`] = `
'function validate(value, context) {
  const { formatValidators } = context;
  const errors = [];
  if (!(typeof value === "object")) {
    errors.push([\`v\`, \`expected object, but got \${typeof value}\`]);
  } else if (!(value !== null)) {
    errors.push([\`v\`, "Expected non-null object, but got null"]);
  } else {
    if (value["tag"] == null) {
    } else {
      let _a0 = [];
      if (!(typeof value["tag"] === "string")) {
        _a0.push([\`v.tag\`, \`expected string, got \${typeof value["tag"]}\`]);
      } else if (!(value["tag"].length <= 10)) {
        _a0.push([\`v.tag\`,
          \`expected maximum length: 10, got \${value["tag"].length}\`]);
      }
      if (_a0.length === 0) {
      } else {
        _a0 = [];
        if (!(Array.isArray(value["tag"]))) {
          _a0.push([\`v.tag\`, \`expected array, but got \${typeof value["tag"]}\`]);
        } else {
          for (let _a1 = 0; _a1 < value["tag"].length; ++_a1) {
            if (!(typeof value["tag"][_a1] === "string")) {
              _a0.push([\`v.tag[\${_a1}]\`,
                \`expected string, got \${typeof value["tag"][_a1]}\`]);
            } else if (!(value["tag"][_a1].length <= 10)) {
              _a0.push([\`v.tag[\${_a1}]\`,
                \`expected maximum length: 10, got \${
                  value["tag"][_a1].length
                }\`]);
            }
          }
        }
        if (!(_a0.length === 0)) {
          errors.push([\`v.tag\`,
            "The value matches none of the union variants"]);
        }
      }
    }
    if (value["authorId"] == null) {
    } else {
      if (!(typeof value["authorId"] === "string")) {
        errors.push([\`v.authorId\`,
          \`expected string, got \${typeof value["authorId"]}\`]);
      } else if (!(formatValidators["uuid"](value["authorId"]))) {
        errors.push([\`v.authorId\`,
          \`string format constraint "uuid" not satisfied\`]);
      }
    }
  }
  return errors;
}
'
`;

snapshot[`input validator compiler 4`] = `
'Validation errors:
  - at v.authorId: string format constraint "uuid" not satisfied'
`;

snapshot[`input validator compiler 5`] = `
"Validation errors:
  - at v.tag: The value matches none of the union variants"
`;
