export const snapshot = {};

snapshot[`input validator compiler 1`] = `
'function validate(value, context) {
  const { formatValidators } = context;
  const errors = [];
  if (!(typeof value === "object")) {
    errors.push(["value", \`expected object, but got \${typeof value}\`]);
  } else if (!(value !== null)) {
    errors.push(["value", "Expected non-null object, but got null"]);
  } else {
    if (!(typeof value["title"] === "string")) {
      errors.push(["value[\\\\"title\\\\"]",
        \`expected string, got \${typeof value["title"]}\`]);
    } else if (!(value["title"].length >= 10)) {
      errors.push(["value[\\\\"title\\\\"]",
        \`expected minimum length: 10, got \${value["title"].length}\`]);
    } else if (!(value["title"].length <= 200)) {
      errors.push(["value[\\\\"title\\\\"]",
        \`expected maximum length: 200, got \${value["title"].length}\`]);
    }
    if (!(typeof value["content"] === "string")) {
      errors.push(["value[\\\\"content\\\\"]",
        \`expected string, got \${typeof value["content"]}\`]);
    } else if (!(value["content"].length >= 100)) {
      errors.push(["value[\\\\"content\\\\"]",
        \`expected minimum length: 100, got \${value["content"].length}\`]);
    }
    if (!(typeof value["authorId"] === "string")) {
      errors.push(["value[\\\\"authorId\\\\"]",
        \`expected string, got \${typeof value["authorId"]}\`]);
    } else if (!(formatValidators["uuid"](value["authorId"]))) {
      errors.push(["value[\\\\"authorId\\\\"]",
        \`string format constraint "uuid" not satisfied\`]);
    }
  }
  return errors;
}
'
`;

snapshot[`input validator compiler 2`] = `
'Validation errors:
  - at value["title"]: expected minimum length: 10, got 6
  - at value["content"]: expected minimum length: 100, got 13
  - at value["authorId"]: string format constraint "uuid" not satisfied'
`;
