repos:
  - repo: local
    hooks:
      - id: ghjk-resolve
        name: "Resolve ghjk installs"
        always_run: true
        language: system
        entry: bash -c 'ghjk p resolve'
        pass_filenames: false
      - id: poetry-lock
        name: "Check poetry lock"
        always_run: true
        language: system
        entry: bash -c 'poetry check --lock'
        pass_filenames: false
      - id: poetry-lock-typegraph
        name: "Check typegraph poetry lock"
        always_run: true
        language: system
        entry: bash -c 'poetry -C ./typegraph/python check --lock'
        pass_filenames: false
      - id: sed-lock
        name: "Lock versions"
        always_run: true
        language: system
        entry: bash -c 'ghjk x lock-sed --check'
        pass_filenames: false
      - id: deno-fmt
        name: Deno format
        language: system
        entry: bash -c 'cd typegate && deno fmt --ignore=native,src/typegraphs,tmp,tests/e2e/nextjs,tests/metagen/typegraphs/sample/ts/client.ts && cd ../dev && deno fmt && cd ../typegraph/deno && deno fmt --ignore=node_modules,dist && cd ../../libs/metagen/src && deno fmt'
        pass_filenames: false
        types:
          - ts
        files: ^(typegate|dev|typegraph/deno)/
      - id: deno-lint
        name: Deno lint
        language: system
        entry: bash -c 'cd typegate && deno lint --rules-exclude=no-explicit-any --ignore=native,tmp,tests/e2e/nextjs && cd ../dev && deno lint && cd ../libs/metagen/src/ && deno lint'
        pass_filenames: false
        types:
          - ts
        files: ^(typegate|dev)/
      - id: es-lint
        name: Eslint website
        language: system
        entry: bash -c 'cd website && [ -f node_modules/.bin/eslint ] && pnpm lint && pnpm prettier'
        pass_filenames: false
        types_or:
          - ts
          - tsx
        files: ^website/
        exclude: ^website/typegraphs/
      - id: devtools-lint
        name: ESLint meta-lsp
        language: system
        entry: bash -c 'cd meta-lsp && pnpm lint'
        pass_filenames: false
        types:
          - ts
        files: ^meta-lsp/
      #- id: cargo-udeps
      #  name: Check for unused cargo dependencies
      #  language: system
      #  entry: bash -c '[ -z "${CI+x}" ] && cargo-udeps udeps'
      #  pass_filenames: false
      #  types:
      #    - toml
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-added-large-files
        args:
          - --maxkb=768
      - id: check-ast
      - id: check-json
        exclude: .vscode/.*\.json
      - id: check-toml
      - id: check-yaml
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-merge-conflict
      - id: end-of-file-fixer
        # exclude all generated files
        exclude: (?x)(
            .ghjk/.*|
            .*deno.lock|
            CHANGELOG.md|
            .*\.snap$|
            typegate/src/typegraphs/.*\.json|
            website/docs/reference/|
            libs/pyrt_wit_wire/pyrt|
            migration_lock.toml|
            tests/metagen/typegraphs/sample/[rs|ts|py]/client\.[rs|ts|py]
          )
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.5
    hooks:
      - id: insert-license
        name: "License MPL-2.0 python"
        args:
          #- --remove-header
          - --license-filepath=dev/license-header-MPL-2.0.txt
          - "--comment-style=#"
          - "--skip-license-insertion-comment=no-auto-license-header"
        types_or:
          - python
        files: ^typegraph/
      - id: insert-license
        name: "License Elastic-2.0 rust"
        args:
          #- --remove-header
          - --license-filepath=dev/license-header-Elastic-2.0.txt
          - "--comment-style=//"
          - "--skip-license-insertion-comment=no-auto-license-header"
          - "--skip-license-insertion-comment=@generated"
        types_or:
          - rust
        files: ^(typegate|libs!(/metagen/.*))/
      - id: insert-license
        name: "License MPL-2.0 rust"
        args:
          #- --remove-header
          - --license-filepath=dev/license-header-MPL-2.0.txt
          - "--comment-style=//"
          - "--skip-license-insertion-comment=no-auto-license-header"
        types_or:
          - rust
        files: ^(meta-cli|typegraph|libs/metagen)/
      - id: insert-license
        name: "License Elastic-2.0 deno"
        args:
          #- --remove-header
          - --license-filepath=dev/license-header-Elastic-2.0.txt
          - "--comment-style=//"
          - "--skip-license-insertion-comment=no-auto-license-header"
          - "--skip-license-insertion-comment=@generated"
        types_or:
          - ts
        files: ^(typegate|dev)/
      - id: insert-license
        name: "License MPL-2.0 deno"
        args:
          #- --remove-header
          - --license-filepath=dev/license-header-MPL-2.0.txt
          - "--comment-style=//"
          - "--skip-license-insertion-comment=no-auto-license-header"
        types_or:
          - ts
        files: ^typegraph/
      - id: insert-license
        name: "License Elastic-2.0 typescript"
        args:
          #- --remove-header
          - --license-filepath=dev/license-header-Elastic-2.0.txt
          - "--comment-style=//"
          - "--skip-license-insertion-comment=no-auto-license-header"
        types_or:
          - ts
          - tsx
        files: ^website/
        exclude: website/typegraphs
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.28.6
    hooks:
      - id: check-dependabot
      - id: check-github-workflows
  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: "v0.5.1"
    hooks:
      - id: ruff
      - id: ruff-format
        exclude: "tests/metagen/typegraphs/sample/py/client.py"
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.27.0
    hooks:
      - id: commitizen
        stages:
          - commit-msg
  - repo: https://github.com/doublify/pre-commit-rust
    rev: v1.0
    hooks:
      - id: fmt
        exclude: tests/metagen/typegraphs/sample/rs/client.rs
      - id: clippy
        args:
          - "--locked"
          - "--all-features"
          - "--all-targets"
          - "--"
          - "--deny"
          - "warnings"
