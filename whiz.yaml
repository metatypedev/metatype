env:
  TYPEGRAPH_VERSION: "0.0.3"
  RUST_LOG: "info,swc_ecma_codegen=off,tracing::span=off"

typegate1: &tp
  watch: 
    - "typegate/src/**/*.ts"
    - "typegate/core/**/*.rs"
    - "libs/{xtask,deno}/**/*.rs"
  env: &tpenv
    TG_PORT: "7891"
    PACKAGED: "false"
    LOG_LEVEL: "DEBUG"
    DYLD_LIBRARY_PATH: "$HOME/.wasmedge/lib:$DYLD_LIBRARY_PATH" # macOS
    LD_LIBRARY_PATH: "$HOME/.wasmedge/lib:$LD_LIBRARY_PATH" # linux
    DEBUG: "true"
    REDIS_URL: "redis://:password@localhost:6379/0"
    TG_SECRET: "a4lNi0PbEItlFZbus1oeH/+wyIxi9uH6TpL8AIqIaMBNvp7SESmuUBbfUwC0prxhGhZqHw8vMDYZAGMhSZ4fLw=="
    TG_ADMIN_PASSWORD: "password"
    CLICOLOR_FORCE: "1"
  command: "cargo --color always x typegate"
  pipe:
    "^.+DEBUG http .*$": whiz://http

typegate2:
  <<: *tp
  env:
    <<: *tpenv
    TG_PORT: "7892"

typegate3:
  <<: *tp
  env:
    <<: *tpenv
  command: "cargo --color always run -p meta-cli -F typegate -- typegate"

http:
  entrypoint: "/dev/null"

meta-cli:
  workdir: .
  watch:
    - "meta-cli/src/**/*.rs"
    - "typegate/src/**/*.ts"
    - "typegate/core/**/*.rs"
    - "libs/deno/**/*"
  command: "cargo run --color always -p meta-cli -- -C website dev --run-destructive-migrations"
  #command: "cargo run -p meta-cli -- -C website deploy --allow-dirty --gate http://localhost:7890 --username admin --password password"
  env:
    CLICOLOR_FORCE: "1"
  depends_on:
    - typegraph

typegraph:
  watch:
    - "typegraph/core/src/**/*.rs"
    - "typegraph/core/wit/*.wit"
    - "typegraph/deno/dev/fix-declarations.sh"
  env:
    WASM_FILE: target/debug/typegraph_core.wasm
  command: |
    set -e
    cargo build -p typegraph_core --target wasm32-unknown-unknown
    wasm-tools component new target/wasm32-unknown-unknown/debug/typegraph_core.wasm -o $WASM_FILE

    rm -rf typegraph/deno/src/gen
    jco transpile $WASM_FILE -o typegraph/deno/src/gen
    deno run -A typegraph/deno/dev/fix-declarations.ts

    rm -rf typegraph/python/typegraph/gen
    poetry run python -m wasmtime.bindgen $WASM_FILE --out-dir typegraph/python/typegraph/gen
  depends_on:
    - libs

system_graphs:
  watch:
    - typegate/src/typegraphs/*.py
    - typegraph/**/*.py
  command: "deno run -A dev/serialize.ts"
  depends_on:
    - libs
    - typegraph

libs:
  workdir: libs
  watch:
    - common/**/*.rs
    - typescript/**/*.rs
  command: "cargo build -p common -p typescript"

codegen:
  workdir: .
  watch:
    - "libs/xtask/src/**/*.rs"
  env:
    DYLD_LIBRARY_PATH: "$HOME/.wasmedge/lib:$DYLD_LIBRARY_PATH" # macOS
    LD_LIBRARY_PATH: "$HOME/.wasmedge/lib:$LD_LIBRARY_PATH" # linux
    TG_JSONSCHEMA_OUT: website/static/specs/$TYPEGRAPH_VERSION.json
    TG_TYPESCRIPT_OUT: typegate/src/typegraph/types.ts
  command: "cargo xtask codegen"
  depends_on:
    - libs

website:
  workdir: website
  command: "pnpm start --no-open"
  env:
    TG_URL: http://localhost:7890
  depends_on:
    - install

docgen:
  workdir: website
  watch:
    - "../typegraph/**/*.py"
  command: |
    set -v
    set -e
    poetry run pydoc-markdown
    npx docusaurus docs:generate:graphql:typegate
    npx docusaurus docs:generate:graphql:prisma-migration
    npx docusaurus docs:generate:changelog

install:
  workdir: .
  watch:
    - typegraph/python/pyproject.toml
    - website/package.json
  env:
    WASM_TOOLS_VERSION: "1.0.45"
    JCO_VERSION: "0.12.1"
    CARGO_INSTA_VERSION: "1.33.0"
    WASMEDGE_VERSION: "0.12.1"
    WASM_OPT_VERSION: "0.116.0"
    DENO_VERSION: "1.37.1"
  command: |
    set -e
    deno --version | grep -q $DENO_VERSION || (echo "require deno upgrade to $DENO_VERSION" && exit 1)
    poetry install --sync
    ~/.wasmedge/bin/wasmedge --version | grep -q $WASMEDGE_VERSION || curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -v $WASMEDGE_VERSION
    curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
    cargo binstall wasm-tools --version $WASM_TOOLS_VERSION --locked -y
    cargo binstall wasm-opt --version $WASM_OPT_VERSION --locked -y
    cargo binstall cargo-insta --version $CARGO_INSTA_VERSION --locked -y
    npm install --global @bytecodealliance/jco@$JCO_VERSION
    [ -d .venv ] || python3 -m venv .venv
    poetry install
    cd website
    pnpm install
    cd ..
