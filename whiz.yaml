env:
  TYPEGRAPH_VERSION: "0.0.2"

typegate1: &tp
  workdir: typegate
  watch: "src/**/*.ts"
  env: &tpenv
    TG_PORT: "7891"
    PACKAGED: "false"
    LOG_LEVEL: "DEBUG"
    DYLD_LIBRARY_PATH: "$HOME/.wasmedge/lib:$DYLD_LIBRARY_PATH" # macOS
    LD_LIBRARY_PATH: "$HOME/.wasmedge/lib:$LD_LIBRARY_PATH" # linux
    DEBUG: "true"
    REDIS_URL: "redis://:password@localhost:6379/0"
    TG_SECRET: "a4lNi0PbEItlFZbus1oeH/+wyIxi9uH6TpL8AIqIaMBNvp7SESmuUBbfUwC0prxhGhZqHw8vMDYZAGMhSZ4fLw=="
    TG_ADMIN_PASSWORD: "password"
  # https://github.com/denoland/deno/issues/18445
  # command: "deno task run"
  command: "deno run --config=deno.json --unstable --allow-run=hostname --allow-sys --allow-env --allow-hrtime --allow-write=tmp --allow-ffi --allow-read=. --allow-net src/main.ts"
  depends_on:
    - typegate_native
  pipe:
    "^.+DEBUG http .*$": whiz://http

typegate2:
  <<: *tp
  env:
    <<: *tpenv
    TG_PORT: "7892"

http:
  entrypoint: "/dev/null"

typegate_native:
  watch:
    - "typegate/native/src/**/*.rs"
  env:
    OUT_DIR: "target"
  command: |
    rm -rfv $(deno info --json | jq -r .denoDir)/plug/file typegate/native/bindings.json
    deno_bindgen -- -p native -F deno
  depends_on:
    - libs

meta-cli:
  workdir: .
  watch:
    - "meta-cli/src/**/*.rs"
    - "typegate/src/**/*.ts"
  command: "cargo run --color always -p meta-cli -- -C website dev --run-destructive-migrations"
  #command: "cargo run -p meta-cli -- -C website deploy --allow-dirty --gate http://localhost:7890 --username admin --password password"
  env:
    CLICOLOR_FORCE: "1"

typegraph:
  watch:
    - "typegraph/core/src/**/*.rs"
    - "typegraph/core/wit/*.wit"
    - "typegraph/deno/dev/fix-declarations.sh"
  env:
    WASM_FILE: target/debug/typegraph_core.wasm
  command: |
    set -e
    cargo build -p typegraph_core --target wasm32-unknown-unknown -F wasm
    wasm-tools component new target/wasm32-unknown-unknown/debug/typegraph_core.wasm -o $WASM_FILE

    rm -rf typegraph/deno/src/gen
    jco transpile $WASM_FILE -o typegraph/deno/src/gen --map "*=../imports.ts"
    deno run -A typegraph/deno/dev/fix-declarations.ts

    rm -rf typegraph/python/typegraph/gen
    poetry run python -m wasmtime.bindgen $WASM_FILE --out-dir typegraph/python/typegraph/gen
  depends_on:
    - libs

system_graphs:
  watch:
    - typegate/src/typegraphs/*.py
    - typegraph/**/*.py
  command: "deno run -A dev/serialize.ts"
  depends_on:
    - libs
    - typegraph

libs:
  workdir: libs
  watch:
    - common/**/*.rs
    - typescript/**/*.rs
    - macros/**/*.rs
  command: "cargo build -p common -p typescript -p macros"

codegen:
  workdir: .
  watch:
    - "libs/xtask/src/**/*.rs"
  env:
    TG_JSONSCHEMA_OUT: website/static/specs/$TYPEGRAPH_VERSION.json
    TG_TYPESCRIPT_OUT: typegate/src/typegraph/types.ts
  command: "cargo run --package xtask -- codegen"
  depends_on:
    - libs

website:
  workdir: website
  command: "pnpm start --no-open"
  env:
    TG_URL: http://localhost:7890
  depends_on:
    - install

docgen:
  workdir: website
  watch:
    - "../typegraph/**/*.py"
  command: |
    set -v
    set -e
    poetry run pydoc-markdown
    npx docusaurus docs:generate:graphql:typegate
    npx docusaurus docs:generate:graphql:prisma-migration
    npx docusaurus docs:generate:changelog
  depends_on:
    - typegate_native

install:
  workdir: .
  watch:
    - typegraph/python/pyproject.toml
    - website/package.json
  env:
    DENO_BINDGEN_URL: "https://raw.githubusercontent.com/Natoandro/deno_bindgen/main/cli.ts"
    WASM_TOOLS_VERSION: "1.0.37"
    JCO_VERSION: "0.12.1"
    CARGO_INSTA_VERSION: "1.30.0"
    WASMEDGE_VERSION: "0.12.1"
    WASM_OPT_VERSION: "0.114.1"
    DENO_VERSION: "1.37.1"
  command: |
    set -e
    deno --version | grep -q $DENO_VERSION || (echo "require deno upgrade to $DENO_VERSION" && exit 1)
    poetry install --sync
    ~/.wasmedge/bin/wasmedge --version | grep -q $WASMEDGE_VERSION || curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -v $WASMEDGE_VERSION
    cargo install wasm-tools --version $WASM_TOOLS_VERSION --locked
    cargo install wasm-opt --version $WASM_OPT_VERSION --locked
    cargo install cargo-insta --version $CARGO_INSTA_VERSION --locked
    deno install --allow-all --force -n deno_bindgen $DENO_BINDGEN_URL
    npm install --global @bytecodealliance/jco@$JCO_VERSION
    [ -d .venv ] || python3 -m venv .venv
    poetry install
    cd website
    pnpm install
    cd ..
