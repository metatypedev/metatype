env:
  TYPEGRAPH_VERSION: "0.0.3"
  CLICOLOR_FORCE: "1"
  RUST_LOG: "typegate=info,typegate_engine=info,mt_deno=info,swc_ecma_codegen=off,tracing::span=off,error"

gate1: &tp
  watch:
    - "typegate/src/**/*.ts"
    - "typegate/{engine,standalone}/**/*.rs"
    - "libs/{xtask,deno}/**/*.rs"
  env: &tpenv
    TG_PORT: "7891"
    PACKAGED: "false"
    LOG_LEVEL: "DEBUG"
    RUST_LOG: "xtask=info,error"
    DEBUG: "true"
    REDIS_URL: "redis://:password@localhost:6379/0"
    TG_SECRET: "a4lNi0PbEItlFZbus1oeH/+wyIxi9uH6TpL8AIqIaMBNvp7SESmuUBbfUwC0prxhGhZqHw8vMDYZAGMhSZ4fLw=="
    TG_ADMIN_PASSWORD: "password"
    LD_LIBRARY_PATH: /data/home/metatype/.ghjk/envs/default/shims/lib
  command: "cargo run -p typegate"
  pipe:
    "^.+DEBUG http .*$": whiz://http

gate2:
  <<: *tp
  env:
    <<: *tpenv
    TG_PORT: "7892"

http:
  entrypoint: "/dev/null"

meta-cli:
  workdir: .
  watch:
    - "meta-cli/src/**/*.rs"
    - "typegate/src/**/*.ts"
    - "typegate/core/**/*.rs"
    - "libs/deno/**/*"
  command: "cargo run -p meta-cli -- -C examples/typegraphs dev --run-destructive-migrations"
  depends_on:
    - typegraph

typegraph:
  watch:
    - "typegraph/core/src/**/*.rs"
    - "typegraph/core/wit/*.wit"
    - "typegraph/node/sdk/src/**/*.ts"
  env:
    WASM_FILE: target/debug/typegraph_core.wasm
  command: |
    set -e
    cargo build -p typegraph_core --target wasm32-unknown-unknown --target-dir target/wasm
    wasm-tools component new target/wasm/wasm32-unknown-unknown/debug/typegraph_core.wasm -o $WASM_FILE

    rm -rf typegraph/node/sdk/src/gen typegraph/node/sdk/dist
    jco transpile $WASM_FILE -o typegraph/node/sdk/src/gen --map metatype:typegraph/host=../host/host.js

    cd typegraph/node
    pnpm install
    pnpm run sdk-build
    cp ./sdk/{package.json,package-lock.json,LICENSE.md} ./sdk/dist
    cd ../..

    rm -rf typegraph/python/typegraph/gen
    poetry run python -m wasmtime.bindgen $WASM_FILE --out-dir typegraph/python/typegraph/gen
  depends_on:
    - libs

system_graphs:
  watch:
    - typegate/src/typegraphs/*.py
    - typegraph/**/*.py
  command: "deno run -A dev/serialize.ts"
  depends_on:
    - libs
    - typegraph

libs:
  workdir: libs
  watch:
    - common/**/*.rs
    - typescript/**/*.rs
  command: "cargo build -p common -p typescript"

codegen:
  workdir: .
  watch:
    - "libs/xtask/src/**/*.rs"
  env:
    DYLD_LIBRARY_PATH: "$HOME/.wasmedge/lib:$DYLD_LIBRARY_PATH" # macOS
    LD_LIBRARY_PATH: "$HOME/.wasmedge/lib:$LD_LIBRARY_PATH" # linux
    TG_JSONSCHEMA_OUT: website/static/specs/$TYPEGRAPH_VERSION.json
    TG_TYPESCRIPT_OUT: typegate/src/typegraph/types.ts
  command: "cargo x codegen"
  depends_on:
    - libs

website:
  workdir: website
  command: "pnpm start --no-open"
  env:
    TG_URL: http://localhost:7890

setup:
  workdir: .
  watch:
    - typegraph/python/pyproject.toml
    - website/package.json
  env:
    GHJK_VERSION: "f380522"
  command: |
    set -e
    curl -fsSL https://raw.githubusercontent.com/metatypedev/ghjk/$GHJK_VERSION/install.sh |  bash
    . $(ghjk print share-dir-path)/env.sh
    ghjk p sync
    echo "exec ./. to refresh env vars"
    [ -d .venv ] || python3 -m venv .venv
    poetry install --sync --no-root
    yes | pnpm install --recursive --filter ./website/... --filter ./typegraph/node/...
