dev:
  files:
    LICENSE.md:
      - typegraph/LICENSE.md
  rules:
    rust-toolchain.toml:
      (channel = ").+("): RUST_VERSION
    .github/*/*.yml:
      '(  PYTHON_VERSION: ").+(")': PYTHON_VERSION
      '(  POETRY_VERSION: ").+(")': POETRY_VERSION
      '(  RUST_VERSION: ").+(")': RUST_VERSION
      '(  DENO_BINDGEN_URL: ).+()': DENO_BINDGEN_URL
      '(  DENO_VERSION: ").+(")': DENO_VERSION
      '(  PNPM_VERSION: ").+(")': PNPM_VERSION
      '(  NODE_VERSION: ").+(")': NODE_VERSION
      '(  PROTOC_VERSION: ").+(")': PROTOC_VERSION
    typegraph/typegraph/__init__.py:
      (version = ").+("): METATYPE_VERSION
    typegraph/pyproject.toml:
      (description = ").+("): TAGLINE
      (version = ").+("): METATYPE_VERSION
    '**/*/Cargo.toml':
      (version = ").+("): METATYPE_VERSION
      (description = ").+("): TAGLINE
    dev/Dockerfile:
      (ARG DENO_VERSION=).*(): DENO_VERSION
      (ARG DENO_BINDGEN_URL=).*(): DENO_BINDGEN_URL
      (ARG RUST_VERSION=).*(): RUST_VERSION
    typegate/src/typegraph.ts:
      (const typegraphVersion = ").*(";): TYPEGRAPH_VERSION
    typegraph/typegraph/graph/typegraph.py:
      (typegraph_version = ").*("): TYPEGRAPH_VERSION
    whiz.yaml:
      '(  TYPEGRAPH_VERSION: ").+(")': TYPEGRAPH_VERSION
    website/docusaurus.config.js:
      '(  tagline: ").+(",)': TAGLINE
    examples/**/compose.yml:
      '(    image: ghcr.io/metatypedev/typegate:v).+()': METATYPE_VERSION
    examples/**/pyproject.toml:
      (version = ").+("): METATYPE_VERSION
      (typegraph = ").+("): METATYPE_VERSION
  lock:
    PYTHON_VERSION: '3.8'
    POETRY_VERSION: 1.4.1
    PROTOC_VERSION: 3.x
    RUST_VERSION: 1.68.0
    DENO_BINDGEN_URL: 'https://github.com/metatypedev/deno_bindgen/raw/main/cli.ts'
    DENO_VERSION: 1.32.4
    NODE_VERSION: 19.8.1
    PNPM_VERSION: 8.1.0
    TYPEGRAPH_VERSION: 0.0.1
    METATYPE_VERSION: 0.1.6-dev.0
    TAGLINE: >-
      Compose your data, anywhere, and build iterative API blocks with
      zero-trust and serverless deployment, no matter where and how your
      (legacy) systems are.
