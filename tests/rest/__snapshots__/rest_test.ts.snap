export const snapshot = {};

snapshot[`Rest queries in Deno 1`] = `
{
  components: {
    schemas: {
      ComplexType: {
        properties: {
          a: {
            title: "User_id_integer",
            type: "integer",
          },
          b: {
            properties: {
              c: {
                title: "User_id_integer",
                type: "integer",
              },
            },
            title: "ComplexType_b_struct",
            type: "object",
          },
          d: {
            title: "ComplexType_d_string_email",
            type: "string",
          },
          e: {
            title: "ComplexType_e_ComplexType_e_ComplexType_e_either_list_optional",
            type: [
              "null",
              "array",
            ],
          },
          f: {
            enum: [
              "1",
              "2.5",
            ],
            title: "ComplexType_f_float",
          },
        },
        title: "ComplexType",
        type: "object",
      },
      ComplexType_b_struct: {
        properties: {
          c: {
            title: "User_id_integer",
            type: "integer",
          },
        },
        title: "ComplexType_b_struct",
        type: "object",
      },
      ComplexType_d_string_email: {
        title: "ComplexType_d_string_email",
        type: "string",
      },
      ComplexType_e_ComplexType_e_ComplexType_e_either_list_optional: {
        title: "ComplexType_e_ComplexType_e_ComplexType_e_either_list_optional",
        type: [
          "null",
          "array",
        ],
      },
      ComplexType_e_ComplexType_e_either_list: {
        items: {
          oneOf: [
            {
              title: "ComplexType_e_either_t0_string",
              type: "string",
            },
            {
              title: "User_id_integer",
              type: "integer",
            },
          ],
          title: "ComplexType_e_either",
        },
        title: "ComplexType_e_ComplexType_e_either_list",
        type: "array",
      },
      ComplexType_e_either: {
        oneOf: [
          {
            title: "ComplexType_e_either_t0_string",
            type: "string",
          },
          {
            title: "User_id_integer",
            type: "integer",
          },
        ],
        title: "ComplexType_e_either",
      },
      ComplexType_e_either_t0_string: {
        title: "ComplexType_e_either_t0_string",
        type: "string",
      },
      ComplexType_f_float: {
        enum: [
          "1",
          "2.5",
        ],
        title: "ComplexType_f_float",
      },
      Error: {
        properties: {
          extensions: {
            properties: {
              timestamp: {
                type: "string",
              },
            },
            type: "object",
          },
          locations: {
            items: {
              type: "string",
            },
            type: "array",
          },
          message: {
            type: "integer",
          },
          path: {
            items: {
              type: "string",
            },
            type: "array",
          },
        },
        required: [
          "message",
          "extensions",
        ],
        type: "object",
      },
      Post: {
        properties: {
          author: {
            properties: {
              id: {
                title: "User_id_integer",
                type: "integer",
              },
            },
            title: "User",
            type: "object",
          },
          id: {
            title: "User_id_integer",
            type: "integer",
          },
        },
        title: "Post",
        type: "object",
      },
      User: {
        properties: {
          id: {
            title: "User_id_integer",
            type: "integer",
          },
        },
        title: "User",
        type: "object",
      },
      User_id_integer: {
        title: "User_id_integer",
        type: "integer",
      },
      root_readPost_fn_output: {
        title: "root_readPost_fn_output",
        type: "boolean",
      },
    },
  },
  info: {
    description: 'Rest endpoints for typegraph "rest"',
    license: {
      name: "MIT",
    },
    title: "rest",
    version: "1.0.0",
  },
  openapi: "3.0.3",
  paths: {
    "/rest/rest/get_identity": {
      get: {
        operationId: "get_rest_get_identity",
        parameters: [
          {
            in: "query",
            name: "obj",
            required: true,
            schema: {
              type: "string",
            },
          },
        ],
        responses: {
          "200": {
            content: {
              "application/json": {
                schema: {
                  properties: {
                    identity: {
                      properties: {
                        a: {
                          title: "User_id_integer",
                          type: "integer",
                        },
                        b: {
                          properties: {
                            c: {
                              title: "User_id_integer",
                              type: "integer",
                            },
                          },
                          title: "ComplexType_b_struct",
                          type: "object",
                        },
                        d: {
                          title: "ComplexType_d_string_email",
                          type: "string",
                        },
                        e: {
                          title: "ComplexType_e_ComplexType_e_ComplexType_e_either_list_optional",
                          type: [
                            "null",
                            "array",
                          ],
                        },
                        f: {
                          enum: [
                            "1",
                            "2.5",
                          ],
                          title: "ComplexType_f_float",
                        },
                      },
                      title: "ComplexType",
                      type: "object",
                    },
                  },
                  type: "object",
                },
              },
            },
            description: "Perform get_identity OK",
          },
          "400": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform get_identity: Bad Request",
          },
          "403": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform get_identity: Forbidden",
          },
          "500": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform get_identity: Service unavailable",
          },
        },
        summary: "Perform get_identity",
      },
    },
    "/rest/rest/get_post": {
      get: {
        operationId: "get_rest_get_post",
        parameters: [
          {
            in: "query",
            name: "id",
            required: true,
            schema: {
              type: "number",
            },
          },
        ],
        responses: {
          "200": {
            content: {
              "application/json": {
                schema: {
                  properties: {
                    postFromUser: {
                      properties: {
                        author: {
                          properties: {
                            id: {
                              title: "User_id_integer",
                              type: "integer",
                            },
                          },
                          title: "User",
                          type: "object",
                        },
                        id: {
                          title: "User_id_integer",
                          type: "integer",
                        },
                      },
                      title: "Post",
                      type: "object",
                    },
                  },
                  type: "object",
                },
              },
            },
            description: "Perform get_post OK",
          },
          "400": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform get_post: Bad Request",
          },
          "403": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform get_post: Forbidden",
          },
          "500": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform get_post: Service unavailable",
          },
        },
        summary: "Perform get_post",
      },
    },
    "/rest/rest/get_post_id": {
      get: {
        operationId: "get_rest_get_post_id",
        parameters: [
          {
            in: "query",
            name: "id",
            required: true,
            schema: {
              type: "number",
            },
          },
        ],
        responses: {
          "200": {
            content: {
              "application/json": {
                schema: {
                  properties: {
                    postFromUser: {
                      properties: {
                        author: {
                          properties: {
                            id: {
                              title: "User_id_integer",
                              type: "integer",
                            },
                          },
                          title: "User",
                          type: "object",
                        },
                        id: {
                          title: "User_id_integer",
                          type: "integer",
                        },
                      },
                      title: "Post",
                      type: "object",
                    },
                  },
                  type: "object",
                },
              },
            },
            description: "Perform get_post_id OK",
          },
          "400": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform get_post_id: Bad Request",
          },
          "403": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform get_post_id: Forbidden",
          },
          "500": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform get_post_id: Service unavailable",
          },
        },
        summary: "Perform get_post_id",
      },
    },
    "/rest/rest/read_post": {
      put: {
        operationId: "put_rest_read_post",
        requestBody: {
          content: {
            "application/json": {
              schema: {
                properties: {
                  read_post: {
                    type: "string",
                  },
                },
                type: "object",
              },
            },
          },
          required: true,
        },
        responses: {
          "200": {
            content: {
              "application/json": {
                schema: {
                  properties: {
                    readPost: {
                      title: "root_readPost_fn_output",
                      type: "boolean",
                    },
                  },
                  type: "object",
                },
              },
            },
            description: "Perform read_post OK",
          },
          "400": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform read_post: Bad Request",
          },
          "403": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform read_post: Forbidden",
          },
          "500": {
            content: {
              "application/json": {
                schema: {
                  "\$ref": "#/components/schemas/Error",
                },
              },
            },
            description: "Perform read_post: Service unavailable",
          },
        },
        summary: "Perform read_post",
      },
    },
  },
  servers: [
    {
      url: "http://typegate.local",
    },
  ],
}
`;

snapshot[`Rest queries in Deno 2`] = `
\`
    <!DOCTYPE html>
    <html>
      <head>
        <title>Redoc rest</title>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">
        <style>
          body {
            margin: 0;
            padding: 0;
          }
        </style>
      </head>
      <body>
        <redoc spec-url='http://typegate.local/rest/rest/__schema'></redoc>
        <script src="https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js"> </script>
      </body>
    </html>
    \`
`;

snapshot[`Rest schema generator 1`] = `
{
  refs: Map(6) {
    "ComplexType" => {
      properties: {
        a: {
          title: "ComplexType_a_integer",
          type: "integer",
        },
        b: {
          properties: {
            c: {
              title: "ComplexType_a_integer",
              type: "integer",
            },
            d: {
              "\$ref": "#/components/schemas/ComplexType",
            },
          },
          title: "ComplexType_b_struct",
          type: "object",
        },
        e: {
          "\$ref": "#/components/schemas/ComplexType",
        },
      },
      title: "ComplexType",
      type: "object",
    },
    "ComplexType_a_integer" => {
      title: "ComplexType_a_integer",
      type: "integer",
    },
    "ComplexType_b_struct" => {
      properties: {
        c: {
          title: "ComplexType_a_integer",
          type: "integer",
        },
        d: {
          "\$ref": "#/components/schemas/ComplexType",
        },
      },
      title: "ComplexType_b_struct",
      type: "object",
    },
    "Query" => {
      properties: {
        identity: {
          properties: {
            a: {
              title: "ComplexType_a_integer",
              type: "integer",
            },
            b: {
              properties: {
                c: {
                  title: "ComplexType_a_integer",
                  type: "integer",
                },
                d: {
                  "\$ref": "#/components/schemas/ComplexType",
                },
              },
              title: "ComplexType_b_struct",
              type: "object",
            },
            e: {
              "\$ref": "#/components/schemas/ComplexType",
            },
          },
          title: "ComplexType",
          type: "object",
        },
      },
      title: "Query",
      type: "object",
    },
    "rest_schema" => {
      properties: {
        query: {
          properties: {
            identity: {
              properties: {
                a: {
                  title: "ComplexType_a_integer",
                  type: "integer",
                },
                b: {
                  properties: {
                    c: {
                      title: "ComplexType_a_integer",
                      type: "integer",
                    },
                    d: {
                      "\$ref": "#/components/schemas/ComplexType",
                    },
                  },
                  title: "ComplexType_b_struct",
                  type: "object",
                },
                e: {
                  "\$ref": "#/components/schemas/ComplexType",
                },
              },
              title: "ComplexType",
              type: "object",
            },
          },
          title: "Query",
          type: "object",
        },
      },
      title: "rest_schema",
      type: "object",
    },
    "root_identity_fn_input" => {
      properties: {
        input: {
          properties: {
            a: {
              title: "ComplexType_a_integer",
              type: "integer",
            },
            b: {
              properties: {
                c: {
                  title: "ComplexType_a_integer",
                  type: "integer",
                },
                d: {
                  "\$ref": "#/components/schemas/ComplexType",
                },
              },
              title: "ComplexType_b_struct",
              type: "object",
            },
            e: {
              "\$ref": "#/components/schemas/ComplexType",
            },
          },
          title: "ComplexType",
          type: "object",
        },
      },
      title: "root_identity_fn_input",
      type: "object",
    },
  },
  schema: Map(7) {
    0 => {
      properties: {
        query: {
          properties: {
            identity: {
              properties: {
                a: {
                  title: "ComplexType_a_integer",
                  type: "integer",
                },
                b: {
                  properties: {
                    c: {
                      title: "ComplexType_a_integer",
                      type: "integer",
                    },
                    d: {
                      "\$ref": "#/components/schemas/ComplexType",
                    },
                  },
                  title: "ComplexType_b_struct",
                  type: "object",
                },
                e: {
                  "\$ref": "#/components/schemas/ComplexType",
                },
              },
              title: "ComplexType",
              type: "object",
            },
          },
          title: "Query",
          type: "object",
        },
      },
      title: "rest_schema",
      type: "object",
    },
    1 => {
      properties: {
        a: {
          title: "ComplexType_a_integer",
          type: "integer",
        },
        b: {
          properties: {
            c: {
              title: "ComplexType_a_integer",
              type: "integer",
            },
            d: {
              "\$ref": "#/components/schemas/ComplexType",
            },
          },
          title: "ComplexType_b_struct",
          type: "object",
        },
        e: {
          "\$ref": "#/components/schemas/ComplexType",
        },
      },
      title: "ComplexType",
      type: "object",
    },
    2 => {
      properties: {
        input: {
          properties: {
            a: {
              title: "ComplexType_a_integer",
              type: "integer",
            },
            b: {
              properties: {
                c: {
                  title: "ComplexType_a_integer",
                  type: "integer",
                },
                d: {
                  "\$ref": "#/components/schemas/ComplexType",
                },
              },
              title: "ComplexType_b_struct",
              type: "object",
            },
            e: {
              "\$ref": "#/components/schemas/ComplexType",
            },
          },
          title: "ComplexType",
          type: "object",
        },
      },
      title: "root_identity_fn_input",
      type: "object",
    },
    3 => {
      properties: {
        a: {
          title: "ComplexType_a_integer",
          type: "integer",
        },
        b: {
          properties: {
            c: {
              title: "ComplexType_a_integer",
              type: "integer",
            },
            d: {
              "\$ref": "#/components/schemas/ComplexType",
            },
          },
          title: "ComplexType_b_struct",
          type: "object",
        },
        e: {
          "\$ref": "#/components/schemas/ComplexType",
        },
      },
      title: "ComplexType",
      type: "object",
    },
    4 => {
      title: "ComplexType_a_integer",
      type: "integer",
    },
    5 => {
      properties: {
        c: {
          title: "ComplexType_a_integer",
          type: "integer",
        },
        d: {
          "\$ref": "#/components/schemas/ComplexType",
        },
      },
      title: "ComplexType_b_struct",
      type: "object",
    },
    6 => {
      properties: {
        identity: {
          properties: {
            a: {
              title: "ComplexType_a_integer",
              type: "integer",
            },
            b: {
              properties: {
                c: {
                  title: "ComplexType_a_integer",
                  type: "integer",
                },
                d: {
                  "\$ref": "#/components/schemas/ComplexType",
                },
              },
              title: "ComplexType_b_struct",
              type: "object",
            },
            e: {
              "\$ref": "#/components/schemas/ComplexType",
            },
          },
          title: "ComplexType",
          type: "object",
        },
      },
      title: "Query",
      type: "object",
    },
  },
}
`;
