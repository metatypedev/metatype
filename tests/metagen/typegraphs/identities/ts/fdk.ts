// This file was @generated by metagen and is intended
// to be generated again on subsequent metagen runs.

export type Ctx = {
  parent?: Record<string, unknown>;
  /**
   * Request context extracted by auth extractors.
   */
  context?: Record<string, unknown>;
  secrets: Record<string, string>;
  effect: "create" | "update" | "delete" | "read" | undefined | null;
  meta: {
    url: string;
    token: string;
  };
  headers: Record<string, string>;
};

/**
 * Access features on your typegraph deployment.
 */
export type Deployment = {
  gql: (query: readonly string[], ...args: unknown[]) => {
    run: (
      variables: Record<string, unknown>,
    ) => Promise<Record<string, unknown>>;
  };
};

export type Handler<In, Out> = (
  input: In,
  ctx: Ctx,
  tg: Deployment,
) => Out | Promise<Out>;

export type ScalarString1 = string;
export type ScalarStringEnum1 = "wan" | "tew" | "tree";
export type ScalarStringUuid1 = string;
export type ScalarStringEmail1 = string;
export type ScalarStringEan1 = string;
export type ScalarStringJson1 = string;
export type ScalarStringUri1 = string;
export type ScalarStringDate1 = string;
export type ScalarStringDatetime1 = string;
export type ScalarInteger1 = number;
export type ScalarFloat1 = number;
export type ScalarBoolean1 = boolean;
export type Primitives = {
  str: ScalarString1;
  "enum": ScalarStringEnum1;
  uuid: ScalarStringUuid1;
  email: ScalarStringEmail1;
  ean: ScalarStringEan1;
  json: ScalarStringJson1;
  uri: ScalarStringUri1;
  date: ScalarStringDate1;
  datetime: ScalarStringDatetime1;
  int: ScalarInteger1;
  float: ScalarFloat1;
  "boolean": ScalarBoolean1;
};
export type PrimitivesArgs = {
  data: Primitives;
};
export type CompositesOptScalarString1Optional = ScalarString1 | null | undefined;
export type Branch2 = {
  branch2: ScalarString1;
};
export type CompositesEitherEither =
  | (Primitives)
  | (Branch2);
export type ScalarStringEnum2 = "grey" | "beige";
export type Branch4 = Array<ScalarStringEnum2>;
export type Branch4again = string;
export type CompositesUnionUnion =
  | (Branch4)
  | (ScalarInteger1)
  | (ScalarString1)
  | (Branch4again);
export type CompositesListScalarString1List = Array<ScalarString1>;
export type Composites = {
  opt?: CompositesOptScalarString1Optional;
  either: CompositesEitherEither;
  union: CompositesUnionUnion;
  list: CompositesListScalarString1List;
};
export type CompositesArgs = {
  data: Composites;
};
export type Branch33ATo1Cycles1Optional = Cycles1 | null | undefined;
export type Branch33A = {
  phantom3a?: CompositesOptScalarString1Optional;
  to1?: Branch33ATo1Cycles1Optional;
};
export type Branch33B = {
  phantom3b?: CompositesOptScalarString1Optional;
  to2?: Cycles1To2Cycles2Optional;
};
export type Cycles3 =
  | (Branch33A)
  | (Branch33B);
export type Cycles2 =
  | (Cycles3)
  | (Cycles1);
export type Cycles1To2Cycles2Optional = Cycles2 | null | undefined;
export type Cycles1List3Cycles3List = Array<Cycles3>;
export type Cycles1List3Cycles1List3Cycles3ListOptional = Cycles1List3Cycles3List | null | undefined;
export type Cycles1 = {
  phantom1?: CompositesOptScalarString1Optional;
  to2?: Cycles1To2Cycles2Optional;
  list3?: Cycles1List3Cycles1List3Cycles3ListOptional;
};
export type Cycles1Args = {
  data: Cycles1;
};
export type SimpleCycles3To1SimpleCycles1Optional = SimpleCycles1 | null | undefined;
export type SimpleCycles3 = {
  phantom3?: CompositesOptScalarString1Optional;
  to1?: SimpleCycles3To1SimpleCycles1Optional;
};
export type SimpleCycles2To3SimpleCycles3Optional = SimpleCycles3 | null | undefined;
export type SimpleCycles2 = {
  phantom2?: CompositesOptScalarString1Optional;
  to3?: SimpleCycles2To3SimpleCycles3Optional;
};
export type SimpleCycles1To2SimpleCycles2Optional = SimpleCycles2 | null | undefined;
export type SimpleCycles1 = {
  phantom1?: CompositesOptScalarString1Optional;
  to2?: SimpleCycles1To2SimpleCycles2Optional;
};
export type SimpleCycles1Args = {
  data: SimpleCycles1;
};


export type TsPrimitivesHandler = Handler<PrimitivesArgs, Primitives>;
export type TsCompositesHandler = Handler<CompositesArgs, Composites>;
export type TsCyclesHandler = Handler<Cycles1Args, Cycles1>;
export type TsSimpleCyclesHandler = Handler<SimpleCycles1Args, SimpleCycles1>;
