// This file was @generated by metagen and is intended
// to be generated again on subsequent metagen runs.

use core::marker::PhantomData;
use metagen_client::prelude::*;

//
// --- --- QueryGraph types --- --- //
//

#[derive(Clone)]
pub struct QueryGraph {
    ty_to_gql_ty_map: TyToGqlTyMap,
    addr: Url,
}

impl QueryGraph {
    pub fn graphql(&self) -> GraphQlTransportReqwest {
        GraphQlTransportReqwest::new(self.addr.clone(), self.ty_to_gql_ty_map.clone())
    }
    pub fn graphql_sync(&self) -> GraphQlTransportReqwestSync {
        GraphQlTransportReqwestSync::new(self.addr.clone(), self.ty_to_gql_ty_map.clone())
    }
}

//
// --- --- Typegraph types --- --- //
//

#[allow(non_snake_case)]
mod node_metas {
    use super::*;
    pub fn scalar() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            sub_nodes: None,
            variants: None,
            input_files: None,
        }
    }    
    pub fn RootIdentityFnInput1() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("input".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootIdentityFn() -> NodeMeta {
        NodeMeta {
            arg_types: Some(
                [
                    ("input".into(), "integer_64be4".into()),
                ].into()
            ),
            ..RootIdentityFnInput1()
        }
    }
    pub fn RootCompositeUnionFnOutput() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            sub_nodes: None,
            variants: Some(
                [
                    ("post_5".into(), Post5 as NodeMetaFn),
                    ("user_1".into(), User1 as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn User1() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("email".into(), scalar as NodeMetaFn),
                    ("posts".into(), Post6 as NodeMetaFn),
                    ("id".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn Post6() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("id".into(), scalar as NodeMetaFn),
                    ("slug".into(), scalar as NodeMetaFn),
                    ("title".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn Post5() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("title".into(), scalar as NodeMetaFn),
                    ("slug".into(), scalar as NodeMetaFn),
                    ("id".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootCompositeUnionFn() -> NodeMeta {
        NodeMeta {
            arg_types: Some(
                [
                    ("id".into(), "string_e1a43".into()),
                ].into()
            ),
            ..RootCompositeUnionFnOutput()
        }
    }
    pub fn RootIdentityFnInput2() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("input".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootIdentityUpdateFn() -> NodeMeta {
        NodeMeta {
            arg_types: Some(
                [
                    ("input".into(), "integer_64be4".into()),
                ].into()
            ),
            ..RootIdentityFnInput2()
        }
    }
    pub fn User0() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("posts".into(), Post0 as NodeMetaFn),
                    ("id".into(), scalar as NodeMetaFn),
                    ("email".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn Post0() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("slug".into(), scalar as NodeMetaFn),
                    ("title".into(), scalar as NodeMetaFn),
                    ("id".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootGetUserFn() -> NodeMeta {
        NodeMeta {
            ..User0()
        }
    }
    pub fn Post1() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("title".into(), scalar as NodeMetaFn),
                    ("slug".into(), scalar as NodeMetaFn),
                    ("id".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootGetPostsFn() -> NodeMeta {
        NodeMeta {
            ..Post1()
        }
    }
    pub fn Post3() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("id".into(), scalar as NodeMetaFn),
                    ("slug".into(), scalar as NodeMetaFn),
                    ("title".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootCompositeNoArgsFn() -> NodeMeta {
        NodeMeta {
            ..Post3()
        }
    }
    pub fn RootScalarNoArgsFn() -> NodeMeta {
        NodeMeta {
            ..scalar()
        }
    }
    pub fn Post4() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("title".into(), scalar as NodeMetaFn),
                    ("slug".into(), scalar as NodeMetaFn),
                    ("id".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootCompositeArgsFn() -> NodeMeta {
        NodeMeta {
            arg_types: Some(
                [
                    ("id".into(), "string_e1a43".into()),
                ].into()
            ),
            ..Post4()
        }
    }
    pub fn RootScalarUnionFn() -> NodeMeta {
        NodeMeta {
            arg_types: Some(
                [
                    ("id".into(), "string_e1a43".into()),
                ].into()
            ),
            ..scalar()
        }
    }
    pub fn RootMixedUnionFnOutput() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            sub_nodes: None,
            variants: Some(
                [
                    ("post_7".into(), Post7 as NodeMetaFn),
                    ("user_2".into(), User2 as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn User2() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("id".into(), scalar as NodeMetaFn),
                    ("email".into(), scalar as NodeMetaFn),
                    ("posts".into(), Post8 as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn Post8() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("id".into(), scalar as NodeMetaFn),
                    ("slug".into(), scalar as NodeMetaFn),
                    ("title".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn Post7() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("id".into(), scalar as NodeMetaFn),
                    ("title".into(), scalar as NodeMetaFn),
                    ("slug".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootMixedUnionFn() -> NodeMeta {
        NodeMeta {
            arg_types: Some(
                [
                    ("id".into(), "string_e1a43".into()),
                ].into()
            ),
            ..RootMixedUnionFnOutput()
        }
    }
    pub fn RootNestedCompositeFnOutput() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("list".into(), RootNestedCompositeFnOutputListStruct as NodeMetaFn),
                    ("scalar".into(), scalar as NodeMetaFn),
                    ("composite".into(), RootNestedCompositeFnOutputCompositeStruct as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootNestedCompositeFnOutputCompositeStruct() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("value".into(), scalar as NodeMetaFn),
                    ("nested".into(), RootNestedCompositeFnOutputCompositeStructNestedStruct as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootNestedCompositeFnOutputCompositeStructNestedStruct() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("inner".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootNestedCompositeFnOutputListStruct() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            variants: None,
            sub_nodes: Some(
                [
                    ("value".into(), scalar as NodeMetaFn),
                ].into()
            ),
            input_files: None,
        }
    }
    pub fn RootNestedCompositeFn() -> NodeMeta {
        NodeMeta {
            ..RootNestedCompositeFnOutput()
        }
    }
    pub fn RootScalarArgsFn() -> NodeMeta {
        NodeMeta {
            arg_types: Some(
                [
                    ("id".into(), "user_id_string_uuid".into()),
                    ("slug".into(), "string_e1a43".into()),
                    ("title".into(), "string_e1a43".into()),
                ].into()
            ),
            ..scalar()
        }
    }

}
use types::*;
pub mod types {
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootGetUserFnInput {
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post2 {
        pub title: String,
        pub slug: String,
        pub id: UserIdStringUuid,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootCompositeArgsFnInput {
        pub id: String,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootIdentityFnInput0 {
        pub input: i64,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct User0Partial {
        pub posts: Option<UserPostsPostList0>,
        pub id: Option<UserIdStringUuid>,
        pub email: Option<UserEmailStringEmail>,
    }
    pub type UserIdStringUuid = String;
    pub type UserEmailStringEmail = String;
    pub type UserPostsPostList0 = Vec<Box<Post0Partial>>;
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post0Partial {
        pub slug: Option<String>,
        pub title: Option<String>,
        pub id: Option<UserIdStringUuid>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post1Partial {
        pub title: Option<String>,
        pub slug: Option<String>,
        pub id: Option<UserIdStringUuid>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post3Partial {
        pub id: Option<UserIdStringUuid>,
        pub slug: Option<String>,
        pub title: Option<String>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post4Partial {
        pub title: Option<String>,
        pub slug: Option<String>,
        pub id: Option<UserIdStringUuid>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    #[serde(untagged)]
    pub enum RootScalarUnionFnOutput {
        StringE1a43(String),
        Integer64be4(i64),
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    #[serde(untagged)]
    pub enum RootCompositeUnionFnOutput {
        Post5(Post5Partial),
        User1(User1Partial),
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post5Partial {
        pub title: Option<String>,
        pub slug: Option<String>,
        pub id: Option<UserIdStringUuid>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct User1Partial {
        pub email: Option<UserEmailStringEmail>,
        pub posts: Option<UserPostsPostList1>,
        pub id: Option<UserIdStringUuid>,
    }
    pub type UserPostsPostList1 = Vec<Box<Post6Partial>>;
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post6Partial {
        pub id: Option<UserIdStringUuid>,
        pub slug: Option<String>,
        pub title: Option<String>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    #[serde(untagged)]
    pub enum RootMixedUnionFnOutput {
        Post7(Post7Partial),
        User2(User2Partial),
        StringE1a43(String),
        Integer64be4(i64),
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post7Partial {
        pub id: Option<UserIdStringUuid>,
        pub title: Option<String>,
        pub slug: Option<String>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct User2Partial {
        pub id: Option<UserIdStringUuid>,
        pub email: Option<UserEmailStringEmail>,
        pub posts: Option<UserPostsPostList2>,
    }
    pub type UserPostsPostList2 = Vec<Box<Post8Partial>>;
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post8Partial {
        pub id: Option<UserIdStringUuid>,
        pub slug: Option<String>,
        pub title: Option<String>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootNestedCompositeFnOutputPartial {
        pub list: Option<RootNestedCompositeFnOutputListRootNestedCompositeFnOutputListStructList>,
        pub scalar: Option<i64>,
        pub composite: Option<RootNestedCompositeFnOutputCompositeStructPartial>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootNestedCompositeFnOutputCompositeStructPartial {
        pub value: Option<i64>,
        pub nested: Option<RootNestedCompositeFnOutputCompositeStructNestedStructPartial>,
    }
    pub type RootNestedCompositeFnOutputListRootNestedCompositeFnOutputListStructList = Vec<Box<RootNestedCompositeFnOutputListStructPartial>>;
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootNestedCompositeFnOutputCompositeStructNestedStructPartial {
        pub inner: Option<i64>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootNestedCompositeFnOutputListStructPartial {
        pub value: Option<i64>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootIdentityFnInput1Partial {
        pub input: Option<i64>,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootIdentityFnInput2Partial {
        pub input: Option<i64>,
    }
}
#[derive(Default, Debug)]
pub struct User0Selections<ATy = NoAlias> {
    pub posts: CompositeSelect<Post0Selections<ATy>, ATy>,
    pub id: ScalarSelect<ATy>,
    pub email: ScalarSelect<ATy>,
}
impl_selection_traits!(User0Selections, posts, id, email);
#[derive(Default, Debug)]
pub struct Post0Selections<ATy = NoAlias> {
    pub slug: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(Post0Selections, slug, title, id);
#[derive(Default, Debug)]
pub struct Post1Selections<ATy = NoAlias> {
    pub title: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(Post1Selections, title, slug, id);
#[derive(Default, Debug)]
pub struct Post3Selections<ATy = NoAlias> {
    pub id: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
}
impl_selection_traits!(Post3Selections, id, slug, title);
#[derive(Default, Debug)]
pub struct Post4Selections<ATy = NoAlias> {
    pub title: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(Post4Selections, title, slug, id);
#[derive(Default, Debug)]
pub struct RootCompositeUnionFnOutputSelections<ATy = NoAlias> {
    pub post: CompositeSelect<Post5Selections<ATy>, NoAlias>,
    pub user: CompositeSelect<User1Selections<ATy>, NoAlias>,
}
impl_union_selection_traits!(RootCompositeUnionFnOutputSelections, ("post_5", post), ("user_1", user));
#[derive(Default, Debug)]
pub struct Post5Selections<ATy = NoAlias> {
    pub title: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(Post5Selections, title, slug, id);
#[derive(Default, Debug)]
pub struct User1Selections<ATy = NoAlias> {
    pub email: ScalarSelect<ATy>,
    pub posts: CompositeSelect<Post6Selections<ATy>, ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(User1Selections, email, posts, id);
#[derive(Default, Debug)]
pub struct Post6Selections<ATy = NoAlias> {
    pub id: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
}
impl_selection_traits!(Post6Selections, id, slug, title);
#[derive(Default, Debug)]
pub struct RootMixedUnionFnOutputSelections<ATy = NoAlias> {
    pub post: CompositeSelect<Post7Selections<ATy>, NoAlias>,
    pub user: CompositeSelect<User2Selections<ATy>, NoAlias>,
}
impl_union_selection_traits!(RootMixedUnionFnOutputSelections, ("post_7", post), ("user_2", user));
#[derive(Default, Debug)]
pub struct Post7Selections<ATy = NoAlias> {
    pub id: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
}
impl_selection_traits!(Post7Selections, id, title, slug);
#[derive(Default, Debug)]
pub struct User2Selections<ATy = NoAlias> {
    pub id: ScalarSelect<ATy>,
    pub email: ScalarSelect<ATy>,
    pub posts: CompositeSelect<Post8Selections<ATy>, ATy>,
}
impl_selection_traits!(User2Selections, id, email, posts);
#[derive(Default, Debug)]
pub struct Post8Selections<ATy = NoAlias> {
    pub id: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
}
impl_selection_traits!(Post8Selections, id, slug, title);
#[derive(Default, Debug)]
pub struct RootNestedCompositeFnOutputSelections<ATy = NoAlias> {
    pub list: CompositeSelect<RootNestedCompositeFnOutputListStructSelections<ATy>, ATy>,
    pub scalar: ScalarSelect<ATy>,
    pub composite: CompositeSelect<RootNestedCompositeFnOutputCompositeStructSelections<ATy>, ATy>,
}
impl_selection_traits!(RootNestedCompositeFnOutputSelections, list, scalar, composite);
#[derive(Default, Debug)]
pub struct RootNestedCompositeFnOutputCompositeStructSelections<ATy = NoAlias> {
    pub value: ScalarSelect<ATy>,
    pub nested: CompositeSelect<RootNestedCompositeFnOutputCompositeStructNestedStructSelections<ATy>, ATy>,
}
impl_selection_traits!(RootNestedCompositeFnOutputCompositeStructSelections, value, nested);
#[derive(Default, Debug)]
pub struct RootNestedCompositeFnOutputCompositeStructNestedStructSelections<ATy = NoAlias> {
    pub inner: ScalarSelect<ATy>,
}
impl_selection_traits!(RootNestedCompositeFnOutputCompositeStructNestedStructSelections, inner);
#[derive(Default, Debug)]
pub struct RootNestedCompositeFnOutputListStructSelections<ATy = NoAlias> {
    pub value: ScalarSelect<ATy>,
}
impl_selection_traits!(RootNestedCompositeFnOutputListStructSelections, value);
#[derive(Default, Debug)]
pub struct RootIdentityFnInput1Selections<ATy = NoAlias> {
    pub input: ScalarSelect<ATy>,
}
impl_selection_traits!(RootIdentityFnInput1Selections, input);
#[derive(Default, Debug)]
pub struct RootIdentityFnInput2Selections<ATy = NoAlias> {
    pub input: ScalarSelect<ATy>,
}
impl_selection_traits!(RootIdentityFnInput2Selections, input);

impl QueryGraph {

    pub fn new(addr: Url) -> Self {
        Self {
            addr,
            ty_to_gql_ty_map: std::sync::Arc::new([
                ("string_e1a43".into(), "String!".into()),
                ("user_id_string_uuid".into(), "ID!".into()),
                ("integer_64be4".into(), "Int!".into()),
                ("post_5".into(), "post!".into()),
                ("user_1".into(), "user!".into()),
                ("post_7".into(), "post!".into()),
                ("user_2".into(), "user!".into()),
            ].into()),
        }
    }
    
        pub fn scalar_args(
            &self,
            args: impl Into<NodeArgs<Post2>>
        ) -> MutationNode<String>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "scalarArgs".into(),
                        SelectionErased::ScalarArgs(args.into().into()),
                    )]
                    .into(),
                ),
                &[
                    ("scalarArgs".into(), node_metas::RootScalarArgsFn as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            MutationNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn nested_composite(
            &self,
        ) -> UnselectedNode<RootNestedCompositeFnOutputSelections, RootNestedCompositeFnOutputSelections<HasAlias>, QueryMarker, RootNestedCompositeFnOutputPartial>
        {
            UnselectedNode {
                root_name: "nestedComposite".into(),
                root_meta: node_metas::RootNestedCompositeFn,
                args: NodeArgsErased::None,
                _marker: PhantomData,
            }
        }
        pub fn mixed_union(
            &self,
            args: impl Into<NodeArgs<RootCompositeArgsFnInput>>
        ) -> UnselectedNode<RootMixedUnionFnOutputSelections, RootMixedUnionFnOutputSelections<HasAlias>, QueryMarker, RootMixedUnionFnOutput>
        {
            UnselectedNode {
                root_name: "mixedUnion".into(),
                root_meta: node_metas::RootMixedUnionFn,
                args: args.into().into(),
                _marker: PhantomData,
            }
        }
        pub fn scalar_union(
            &self,
            args: impl Into<NodeArgs<RootCompositeArgsFnInput>>
        ) -> QueryNode<RootScalarUnionFnOutput>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "scalarUnion".into(),
                        SelectionErased::ScalarArgs(args.into().into()),
                    )]
                    .into(),
                ),
                &[
                    ("scalarUnion".into(), node_metas::RootScalarUnionFn as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn composite_args(
            &self,
            args: impl Into<NodeArgs<RootCompositeArgsFnInput>>
        ) -> UnselectedNode<Post4Selections, Post4Selections<HasAlias>, MutationMarker, Post4Partial>
        {
            UnselectedNode {
                root_name: "compositeArgs".into(),
                root_meta: node_metas::RootCompositeArgsFn,
                args: args.into().into(),
                _marker: PhantomData,
            }
        }
        pub fn scalar_no_args(
            &self,
        ) -> QueryNode<String>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "scalarNoArgs".into(),
                        SelectionErased::Scalar,
                    )]
                    .into(),
                ),
                &[
                    ("scalarNoArgs".into(), node_metas::RootScalarNoArgsFn as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn composite_no_args(
            &self,
        ) -> UnselectedNode<Post3Selections, Post3Selections<HasAlias>, MutationMarker, Post3Partial>
        {
            UnselectedNode {
                root_name: "compositeNoArgs".into(),
                root_meta: node_metas::RootCompositeNoArgsFn,
                args: NodeArgsErased::None,
                _marker: PhantomData,
            }
        }
        pub fn get_posts(
            &self,
        ) -> UnselectedNode<Post1Selections, Post1Selections<HasAlias>, QueryMarker, Post1Partial>
        {
            UnselectedNode {
                root_name: "getPosts".into(),
                root_meta: node_metas::RootGetPostsFn,
                args: NodeArgsErased::None,
                _marker: PhantomData,
            }
        }
        pub fn get_user(
            &self,
        ) -> UnselectedNode<User0Selections, User0Selections<HasAlias>, QueryMarker, User0Partial>
        {
            UnselectedNode {
                root_name: "getUser".into(),
                root_meta: node_metas::RootGetUserFn,
                args: NodeArgsErased::None,
                _marker: PhantomData,
            }
        }
        pub fn identity_update(
            &self,
            args: impl Into<NodeArgs<RootIdentityFnInput0>>
        ) -> UnselectedNode<RootIdentityFnInput2Selections, RootIdentityFnInput2Selections<HasAlias>, MutationMarker, RootIdentityFnInput2Partial>
        {
            UnselectedNode {
                root_name: "identityUpdate".into(),
                root_meta: node_metas::RootIdentityUpdateFn,
                args: args.into().into(),
                _marker: PhantomData,
            }
        }
        pub fn composite_union(
            &self,
            args: impl Into<NodeArgs<RootCompositeArgsFnInput>>
        ) -> UnselectedNode<RootCompositeUnionFnOutputSelections, RootCompositeUnionFnOutputSelections<HasAlias>, QueryMarker, RootCompositeUnionFnOutput>
        {
            UnselectedNode {
                root_name: "compositeUnion".into(),
                root_meta: node_metas::RootCompositeUnionFn,
                args: args.into().into(),
                _marker: PhantomData,
            }
        }
        pub fn identity(
            &self,
            args: impl Into<NodeArgs<RootIdentityFnInput0>>
        ) -> UnselectedNode<RootIdentityFnInput1Selections, RootIdentityFnInput1Selections<HasAlias>, QueryMarker, RootIdentityFnInput1Partial>
        {
            UnselectedNode {
                root_name: "identity".into(),
                root_meta: node_metas::RootIdentityFn,
                args: args.into().into(),
                _marker: PhantomData,
            }
        }
}

