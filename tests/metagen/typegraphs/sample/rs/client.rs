// This file was @generated by metagen and is intended
// to be generated again on subsequent metagen runs.

use core::marker::PhantomData;
use metagen_client::prelude::*;

//
// --- --- QueryGraph types --- --- //
//

#[derive(Clone)]
pub struct QueryGraph {
    ty_to_gql_ty_map: TyToGqlTyMap,
    addr: Url,
}

impl QueryGraph {
    pub fn graphql(&self) -> GraphQlTransportReqwest {
        GraphQlTransportReqwest::new(self.addr.clone(), self.ty_to_gql_ty_map.clone())
    }
    pub fn graphql_sync(&self) -> GraphQlTransportReqwestSync {
        GraphQlTransportReqwestSync::new(self.addr.clone(), self.ty_to_gql_ty_map.clone())
    }
}

//
// --- --- Typegraph types --- --- //
//
use types::*;
pub mod types {
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootGetUserFnInput0 {
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootGetUserFnInput1 {
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootGetUserFnInput2 {
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post2 {
        pub slug: String,
        pub title: String,
        pub id: UserIdStringUuid,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootGetUserFnInput3 {
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootCompositeArgsFnInput0 {
        pub id: String,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootCompositeArgsFnInput1 {
        pub id: String,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootCompositeArgsFnInput2 {
        pub id: String,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootCompositeArgsFnInput3 {
        pub id: String,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootGetUserFnInput4 {
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootIdentityFnInput0 {
        pub input: i64,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootIdentityFnInput1 {
        pub input: i64,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct User0Partial {
        pub id: UserIdStringUuid,
        pub email: UserEmailStringEmail,
        pub posts: UserPostsPostList0,
    }
    pub type UserIdStringUuid = String;
    pub type UserEmailStringEmail = String;
    pub type UserPostsPostList0 = Vec<Box<Post0Partial>>;
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post0Partial {
        pub title: String,
        pub slug: String,
        pub id: UserIdStringUuid,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post1Partial {
        pub slug: String,
        pub title: String,
        pub id: UserIdStringUuid,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post3Partial {
        pub slug: String,
        pub id: UserIdStringUuid,
        pub title: String,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post4Partial {
        pub title: String,
        pub id: UserIdStringUuid,
        pub slug: String,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    #[serde(untagged)]
    pub enum RootScalarUnionFnOutput {
        StringE1a43(String),
        Integer64be4(i64),
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    #[serde(untagged)]
    pub enum RootCompositeUnionFnOutput {
        Post5(Post5Partial),
        User1(User1Partial),
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post5Partial {
        pub slug: String,
        pub title: String,
        pub id: UserIdStringUuid,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct User1Partial {
        pub email: UserEmailStringEmail,
        pub id: UserIdStringUuid,
        pub posts: UserPostsPostList1,
    }
    pub type UserPostsPostList1 = Vec<Box<Post6Partial>>;
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post6Partial {
        pub slug: String,
        pub title: String,
        pub id: UserIdStringUuid,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    #[serde(untagged)]
    pub enum RootMixedUnionFnOutput {
        Post7(Post7Partial),
        User2(User2Partial),
        StringE1a43(String),
        Integer64be4(i64),
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post7Partial {
        pub id: UserIdStringUuid,
        pub title: String,
        pub slug: String,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct User2Partial {
        pub id: UserIdStringUuid,
        pub email: UserEmailStringEmail,
        pub posts: UserPostsPostList2,
    }
    pub type UserPostsPostList2 = Vec<Box<Post8Partial>>;
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct Post8Partial {
        pub slug: String,
        pub title: String,
        pub id: UserIdStringUuid,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootNestedCompositeFnOutputPartial {
        pub scalar: i64,
        pub composite: RootNestedCompositeFnOutputCompositeStructPartial,
        pub list: RootNestedCompositeFnOutputListRootNestedCompositeFnOutputListStructList,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootNestedCompositeFnOutputCompositeStructPartial {
        pub nested: RootNestedCompositeFnOutputCompositeStructNestedStructPartial,
        pub value: i64,
    }
    pub type RootNestedCompositeFnOutputListRootNestedCompositeFnOutputListStructList = Vec<Box<RootNestedCompositeFnOutputListStructPartial>>;
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootNestedCompositeFnOutputCompositeStructNestedStructPartial {
        pub inner: i64,
    }
    #[derive(Debug, serde::Serialize, serde::Deserialize)]
    pub struct RootNestedCompositeFnOutputListStructPartial {
        pub value: i64,
    }
}

#[allow(non_snake_case)]
mod node_metas {
    use super::*;
    pub fn scalar() -> NodeMeta {
        NodeMeta {
            arg_types: None,
            sub_nodes: None,
            variants: None,
            input_files: None,
        }
    }
}
#[derive(Default, Debug)]
pub struct User0Selections<ATy = NoAlias> {
    pub id: ScalarSelect<ATy>,
    pub email: ScalarSelect<ATy>,
    pub posts: CompositeSelect<Post0Partial<ATy>, ATy>,
}
impl_selection_traits!(User0Selections, id, email, posts);
#[derive(Default, Debug)]
pub struct Post0Selections<ATy = NoAlias> {
    pub title: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(Post0Selections, title, slug, id);
#[derive(Default, Debug)]
pub struct Post1Selections<ATy = NoAlias> {
    pub slug: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(Post1Selections, slug, title, id);
#[derive(Default, Debug)]
pub struct Post3Selections<ATy = NoAlias> {
    pub slug: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
}
impl_selection_traits!(Post3Selections, slug, id, title);
#[derive(Default, Debug)]
pub struct Post4Selections<ATy = NoAlias> {
    pub title: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
}
impl_selection_traits!(Post4Selections, title, id, slug);
#[derive(Default, Debug)]
pub struct RootCompositeUnionFnOutputSelections<ATy = NoAlias> {
    pub post: CompositeSelect<Post5Partial<ATy>, NoAlias>,
    pub user: CompositeSelect<User1Partial<ATy>, NoAlias>,
}
impl_union_selection_traits!(RootCompositeUnionFnOutputSelections, ("post_5", post), ("user_1", user));
#[derive(Default, Debug)]
pub struct Post5Selections<ATy = NoAlias> {
    pub slug: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(Post5Selections, slug, title, id);
#[derive(Default, Debug)]
pub struct User1Selections<ATy = NoAlias> {
    pub email: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
    pub posts: CompositeSelect<Post6Partial<ATy>, ATy>,
}
impl_selection_traits!(User1Selections, email, id, posts);
#[derive(Default, Debug)]
pub struct Post6Selections<ATy = NoAlias> {
    pub slug: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(Post6Selections, slug, title, id);
#[derive(Default, Debug)]
pub struct RootMixedUnionFnOutputSelections<ATy = NoAlias> {
    pub post: CompositeSelect<Post7Partial<ATy>, NoAlias>,
    pub user: CompositeSelect<User2Partial<ATy>, NoAlias>,
}
impl_union_selection_traits!(RootMixedUnionFnOutputSelections, ("post_7", post), ("user_2", user));
#[derive(Default, Debug)]
pub struct Post7Selections<ATy = NoAlias> {
    pub id: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
    pub slug: ScalarSelect<ATy>,
}
impl_selection_traits!(Post7Selections, id, title, slug);
#[derive(Default, Debug)]
pub struct User2Selections<ATy = NoAlias> {
    pub id: ScalarSelect<ATy>,
    pub email: ScalarSelect<ATy>,
    pub posts: CompositeSelect<Post8Partial<ATy>, ATy>,
}
impl_selection_traits!(User2Selections, id, email, posts);
#[derive(Default, Debug)]
pub struct Post8Selections<ATy = NoAlias> {
    pub slug: ScalarSelect<ATy>,
    pub title: ScalarSelect<ATy>,
    pub id: ScalarSelect<ATy>,
}
impl_selection_traits!(Post8Selections, slug, title, id);
#[derive(Default, Debug)]
pub struct RootNestedCompositeFnOutputSelections<ATy = NoAlias> {
    pub scalar: ScalarSelect<ATy>,
    pub composite: CompositeSelect<RootNestedCompositeFnOutputCompositeStructPartial<ATy>, ATy>,
    pub list: CompositeSelect<RootNestedCompositeFnOutputListStructPartial<ATy>, ATy>,
}
impl_selection_traits!(RootNestedCompositeFnOutputSelections, scalar, composite, list);
#[derive(Default, Debug)]
pub struct RootNestedCompositeFnOutputCompositeStructSelections<ATy = NoAlias> {
    pub nested: CompositeSelect<RootNestedCompositeFnOutputCompositeStructNestedStructPartial<ATy>, ATy>,
    pub value: ScalarSelect<ATy>,
}
impl_selection_traits!(RootNestedCompositeFnOutputCompositeStructSelections, nested, value);
#[derive(Default, Debug)]
pub struct RootNestedCompositeFnOutputCompositeStructNestedStructSelections<ATy = NoAlias> {
    pub inner: ScalarSelect<ATy>,
}
impl_selection_traits!(RootNestedCompositeFnOutputCompositeStructNestedStructSelections, inner);
#[derive(Default, Debug)]
pub struct RootNestedCompositeFnOutputListStructSelections<ATy = NoAlias> {
    pub value: ScalarSelect<ATy>,
}
impl_selection_traits!(RootNestedCompositeFnOutputListStructSelections, value);

impl QueryGraph {

    pub fn new(addr: Url) -> Self {
        Self {
            addr,
            ty_to_gql_ty_map: std::sync::Arc::new([
                ("String".into(), "String!".into()),
                ("UserIdStringUuid".into(), "ID!".into()),
                ("i64".into(), "Int!".into()),
                ("Post5Partial".into(), "post!".into()),
                ("User1Partial".into(), "user!".into()),
                ("Post7Partial".into(), "post!".into()),
                ("User2Partial".into(), "user!".into()),
            ].into()),
        }
    }
    
        pub fn composite_no_args(
            &self,
        ) -> MutationNode<Post3Partial>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "compositeNoArgs".into(),
                        SelectionErased::Scalar,
                    )]
                    .into(),
                ),
                &[
                    ("compositeNoArgs".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            MutationNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn scalar_args(
            &self,
            args: impl Into<NodeArgs<Post2>>
        ) -> MutationNode<String>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "scalarArgs".into(),
                        SelectionErased::ScalarArgs(args.into().into()),
                    )]
                    .into(),
                ),
                &[
                    ("scalarArgs".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            MutationNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn composite_union(
            &self,
            args: impl Into<NodeArgs<RootCompositeArgsFnInput2>>
        ) -> QueryNode<RootCompositeUnionFnOutput>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "compositeUnion".into(),
                        SelectionErased::ScalarArgs(args.into().into()),
                    )]
                    .into(),
                ),
                &[
                    ("compositeUnion".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn identity(
            &self,
            args: impl Into<NodeArgs<RootIdentityFnInput0>>
        ) -> QueryNode<RootIdentityFnInput0>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "identity".into(),
                        SelectionErased::ScalarArgs(args.into().into()),
                    )]
                    .into(),
                ),
                &[
                    ("identity".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn scalar_union(
            &self,
            args: impl Into<NodeArgs<RootCompositeArgsFnInput1>>
        ) -> QueryNode<RootScalarUnionFnOutput>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "scalarUnion".into(),
                        SelectionErased::ScalarArgs(args.into().into()),
                    )]
                    .into(),
                ),
                &[
                    ("scalarUnion".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn identity_update(
            &self,
            args: impl Into<NodeArgs<RootIdentityFnInput1>>
        ) -> MutationNode<RootIdentityFnInput1>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "identityUpdate".into(),
                        SelectionErased::ScalarArgs(args.into().into()),
                    )]
                    .into(),
                ),
                &[
                    ("identityUpdate".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            MutationNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn composite_args(
            &self,
            args: impl Into<NodeArgs<RootCompositeArgsFnInput0>>
        ) -> MutationNode<Post4Partial>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "compositeArgs".into(),
                        SelectionErased::ScalarArgs(args.into().into()),
                    )]
                    .into(),
                ),
                &[
                    ("compositeArgs".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            MutationNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn scalar_no_args(
            &self,
        ) -> QueryNode<String>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "scalarNoArgs".into(),
                        SelectionErased::Scalar,
                    )]
                    .into(),
                ),
                &[
                    ("scalarNoArgs".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn get_posts(
            &self,
        ) -> QueryNode<Post1Partial>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "getPosts".into(),
                        SelectionErased::Scalar,
                    )]
                    .into(),
                ),
                &[
                    ("getPosts".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn nested_composite(
            &self,
        ) -> QueryNode<RootNestedCompositeFnOutputPartial>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "nestedComposite".into(),
                        SelectionErased::Scalar,
                    )]
                    .into(),
                ),
                &[
                    ("nestedComposite".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn get_user(
            &self,
        ) -> QueryNode<User0Partial>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "getUser".into(),
                        SelectionErased::Scalar,
                    )]
                    .into(),
                ),
                &[
                    ("getUser".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
        pub fn mixed_union(
            &self,
            args: impl Into<NodeArgs<RootCompositeArgsFnInput3>>
        ) -> QueryNode<RootMixedUnionFnOutput>
        {
            let nodes = selection_to_node_set(
                SelectionErasedMap(
                    [(
                        "mixedUnion".into(),
                        SelectionErased::ScalarArgs(args.into().into()),
                    )]
                    .into(),
                ),
                &[
                    ("mixedUnion".into(), node_metas::scalar as NodeMetaFn),
                ].into(),
                "$q".into(),
            )
            .unwrap();
            QueryNode(nodes.into_iter().next().unwrap(), PhantomData)
        }
}

