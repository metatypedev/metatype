from types import NoneType
from typing import Callable, List, Union, get_origin, ForwardRef
from dataclasses import dataclass, asdict, fields

FORWARD_REFS = {}

class Struct:
    def try_new(dt_class, val: any):
        # Object
        ftypes = {f.name: f.type for f in fields(dt_class)}
        attrs = {}
        for f in val:
            fval = val[f]
            ftype = ftypes[f]
            serialized = False
            # Union
            if get_origin(ftype) is Union:
                try:
                    attrs[f] = Struct.try_union(ftype.__args__, fval)
                    serialized = True
                except Exception as _e:
                    pass
            # List
            elif get_origin(ftype) is list:
                try:
                    attrs[f] = Struct.try_typed_list(ftype.__args__, fval)
                    serialized = True
                except Exception as _e:
                    pass
            # Any
            if not serialized:
                if type(ftype) is str and ftype in FORWARD_REFS:
                    klass = FORWARD_REFS[ftype]
                    attrs[f] = Struct.new(klass, fval)
                else:
                    attrs[f] = Struct.new(ftype, fval)
        return dt_class(**attrs)

    def try_typed_list(tpe: any, items: any):
        hint = tpe.__args__[0]
        klass = FORWARD_REFS[hint.__forward_arg__] if type(hint) is ForwardRef else hint
        return [Struct.new(klass, v) for v in items]

    def try_union(variants: List[any], val: any):
        errors = []
        for variant in variants:
            try:
                if variant is NoneType:
                    if val is None:
                        return None
                    else:
                        continue
                if get_origin(variant) is list:
                    if type(val) is list:
                        return Struct.try_typed_list(variant, val)
                    else:
                        continue
                klass = FORWARD_REFS[variant.__forward_arg__]
                return Struct.try_new(klass, val)
            except Exception as e:
                errors.append(str(e))
        raise Exception("\n".join(errors))


    def new(dt_class: any, val: any):
        try:
            return Struct.try_new(dt_class, val)
        except:
            return val

    def repr(self):
        return asdict(self)


{% for class in classes -%}

{{ class.def }}
FORWARD_REFS['{{ class.hint }}'] = {{ class.hint }}

{% endfor -%}


{% for def in types -%}
{{ def }}
{% endfor %}

def __repr(value: any):
        if isinstance(value, Struct):
            return value.repr()
        return value

{%for func in funcs %}
def typed_{{ func.name }}(user_fn: Callable[[{{ func.input_name }}], {{ func.output_name }}]):
    def exported_wrapper(raw_inp):
        inp: {{ func.input_name }} = Struct.new({{ func.input_name }}, raw_inp)
        out: {{ func.output_name }} = user_fn(inp)
        if type(out) is list:
            return [__repr(v) for v in out]
        return __repr(out)
    return exported_wrapper
{% endfor %}
