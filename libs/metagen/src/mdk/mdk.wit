package metatype:mdk;

interface shared {
  record req {
    op-name: string,
    in-json: string,
  }

  type res = result<string, string>;
}

interface typegate-wasi-host {
  use shared.{req, res};

  hostcall: func(req: req) -> res;
}

interface mat {
  use shared.{req, res};

  handle: func(req: req) -> res;

  record mat-info {
    op-name: string,
    mat-title: string,
    mat-hash: string,
    mat-data: string,
  }

  record init-args {
    metatype-version: string,
    expected-ops: list<mat-info>
  }

  record init-response {}

  variant init-error {
    version-mismatch(string),
    unexpected-mat(mat-info),
    other(string)
  }

  init: func(args: init-args) -> result<init-response, init-error>;
}

world wasi-mat {
  import typegate-wasi-host;
  export mat;
}
