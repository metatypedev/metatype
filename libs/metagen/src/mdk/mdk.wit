package metatype:mdk;

interface shared {
  record req {
    op-name: string,
    in-json: string,
  }

  type res = result<string, string>;
}

interface typegate-wasi-host {
  use shared.{req, res};

  hostcall: func(req: req) -> res;
}

interface mat {
  use shared.{req, res};

  handle: func(req: req) -> res;

  record init-args {
  }

  record mat-tag {
    title: string,
    hash: string,
  }

  record init-res {
    metatype-version: string,
    implemented-mats: list<mat-tag>
  }

  init: func(args: init-args) -> init-res;
}

world wasi-mat {
  import typegate-wasi-host;
  export mat;
}
