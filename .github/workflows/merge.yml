on:
  merge_group:
    types:
      - checks_requested

env:
  GHJK_VERSION: "2725af8"
  DENO_VERSION: "1.41.0"
  RUST_BACKTRACE: "full"
  RUST_LOG: "info,swc_ecma_codegen=off,tracing::span=off"
  DENO_DIR: deno-dir

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            website:
              - '.github/workflows/tests.yml'
              - 'website/**'
            meta-cli:
              - '.github/workflows/tests.yml'
              - 'libs/**'
              - 'meta-cli/**'
              - 'Cargo.lock'
            typegate:
              - '.github/workflows/tests.yml'
              - 'libs/**'
              - 'typegate/**'
              - 'meta-cli/**'
              - 'Cargo.lock'
            full:
              - '.github/workflows/tests.yml'
              - 'libs/**'
              - 'typegate/**'
              - 'typegraph/**'
              - 'meta-cli/**'
              - 'Cargo.lock'
              - 'examples/**'
            rust:
              - '.github/workflows/tests.yml'
              - 'libs/**'
              - 'Cargo.lock'
    outputs:
      website: ${{ steps.filter.outputs.website }}
      meta-cli: ${{ steps.filter.outputs.meta-cli }}
      typegate: ${{ steps.filter.outputs.typegate }}
      full: ${{ steps.filter.outputs.full }}
      rust: ${{ steps.filter.outputs.rust }}


  test-meta-cli-compat:
    needs: changes
    if: ${{ needs.changes.outputs.meta-cli == 'true' }}
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        include:
          - os: macos-13
            activate: "source .venv/bin/activate"
          - os: macos-14
            activate: "source .venv/bin/activate"
          #- os: windows-latest
          #  activate: '.venv\Scripts\activate.bat'
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Cache deno dir
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: deno-mac-${{ hashFiles('**/deno.lock') }}
      - uses: dsherret/rust-toolchain-file@v1
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ runner.os }}-rust-${{ hashFiles('**/rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache .venv dir
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ matrix.os }}-venv-${{ hashFiles('**/poetry.lock', '.ghjk/lock.json') }}
      - uses: metatypedev/setup-ghjk@2e8bbf084060a18828338a7cdd43fde6feb2a3cc
        with:
          # temporary fix
          cache-key-prefix: ${{ matrix.os }}
      - shell: bash
        env:
          WASM_FILE: target/debug/typegraph_core.wasm
        run: |
          python3 -m venv .venv
          ${{ matrix.activate }}

          cd typegraph/python
          poetry install --no-root
          cd ../..
          poetry install --no-root

          deno cache --import-map typegate/import_map.json typegate/src/main.ts typegate/tests/utils/mod.ts

          cargo build -p typegraph_core --target wasm32-unknown-unknown --target-dir target/wasm
          mkdir -p $(dirname $WASM_FILE)
          wasm-opt -Oz target/wasm/wasm32-unknown-unknown/debug/typegraph_core.wasm -o $WASM_FILE.opt
          wasm-tools component new $WASM_FILE.opt -o $WASM_FILE
          rm -rf typegraph/python/typegraph/gen
          poetry run python -m wasmtime.bindgen $WASM_FILE --out-dir typegraph/python/typegraph/gen

          cargo run --locked --package meta-cli -- --help
          cargo test --locked --package meta-cli

          # check the fat CLI build
          cargo run --locked --package meta-cli --features typegate -- --help
