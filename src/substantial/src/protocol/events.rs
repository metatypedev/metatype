// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protocol/events.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:substantial.protos.events.Start)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Start {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.events.Start.kwargs)
    pub kwargs: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.events.Start.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Start {
    fn default() -> &'a Start {
        <Start as ::protobuf::Message>::default_instance()
    }
}

impl Start {
    pub fn new() -> Start {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "kwargs",
            |m: &Start| { &m.kwargs },
            |m: &mut Start| { &mut m.kwargs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Start>(
            "Start",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Start {
    const NAME: &'static str = "Start";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.kwargs)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.kwargs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.kwargs.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Start {
        Start::new()
    }

    fn clear(&mut self) {
        self.kwargs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Start {
        static instance: Start = Start {
            kwargs: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Start {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Start").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Start {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Start {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:substantial.protos.events.Save)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Save {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.events.Save.id)
    pub id: u32,
    // @@protoc_insertion_point(field:substantial.protos.events.Save.value)
    pub value: ::std::string::String,
    // @@protoc_insertion_point(field:substantial.protos.events.Save.counter)
    pub counter: i32,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.events.Save.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Save {
    fn default() -> &'a Save {
        <Save as ::protobuf::Message>::default_instance()
    }
}

impl Save {
    pub fn new() -> Save {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Save| { &m.id },
            |m: &mut Save| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Save| { &m.value },
            |m: &mut Save| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "counter",
            |m: &Save| { &m.counter },
            |m: &mut Save| { &mut m.counter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Save>(
            "Save",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Save {
    const NAME: &'static str = "Save";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                24 => {
                    self.counter = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        if self.counter != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.counter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        if self.counter != 0 {
            os.write_int32(3, self.counter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Save {
        Save::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.value.clear();
        self.counter = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Save {
        static instance: Save = Save {
            id: 0,
            value: ::std::string::String::new(),
            counter: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Save {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Save").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Save {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Save {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:substantial.protos.events.Sleep)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Sleep {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.events.Sleep.id)
    pub id: u32,
    // @@protoc_insertion_point(field:substantial.protos.events.Sleep.start)
    pub start: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:substantial.protos.events.Sleep.end)
    pub end: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.events.Sleep.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sleep {
    fn default() -> &'a Sleep {
        <Sleep as ::protobuf::Message>::default_instance()
    }
}

impl Sleep {
    pub fn new() -> Sleep {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Sleep| { &m.id },
            |m: &mut Sleep| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "start",
            |m: &Sleep| { &m.start },
            |m: &mut Sleep| { &mut m.start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "end",
            |m: &Sleep| { &m.end },
            |m: &mut Sleep| { &mut m.end },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sleep>(
            "Sleep",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sleep {
    const NAME: &'static str = "Sleep";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.start)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.end)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if let Some(v) = self.start.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.end.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if let Some(v) = self.start.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.end.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sleep {
        Sleep::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.start.clear();
        self.end.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sleep {
        static instance: Sleep = Sleep {
            id: 0,
            start: ::protobuf::MessageField::none(),
            end: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sleep {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sleep").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sleep {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sleep {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:substantial.protos.events.Send)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Send {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.events.Send.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:substantial.protos.events.Send.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.events.Send.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Send {
    fn default() -> &'a Send {
        <Send as ::protobuf::Message>::default_instance()
    }
}

impl Send {
    pub fn new() -> Send {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Send| { &m.name },
            |m: &mut Send| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Send| { &m.value },
            |m: &mut Send| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Send>(
            "Send",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Send {
    const NAME: &'static str = "Send";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Send {
        Send::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Send {
        static instance: Send = Send {
            name: ::std::string::String::new(),
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Send {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Send").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Send {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Send {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:substantial.protos.events.Stop)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Stop {
    // message oneof groups
    pub result: ::std::option::Option<stop::Result>,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.events.Stop.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Stop {
    fn default() -> &'a Stop {
        <Stop as ::protobuf::Message>::default_instance()
    }
}

impl Stop {
    pub fn new() -> Stop {
        ::std::default::Default::default()
    }

    // string ok = 1;

    pub fn ok(&self) -> &str {
        match self.result {
            ::std::option::Option::Some(stop::Result::Ok(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_ok(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_ok(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(stop::Result::Ok(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ok(&mut self, v: ::std::string::String) {
        self.result = ::std::option::Option::Some(stop::Result::Ok(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ok(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(stop::Result::Ok(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(stop::Result::Ok(::std::string::String::new()));
        }
        match self.result {
            ::std::option::Option::Some(stop::Result::Ok(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ok(&mut self) -> ::std::string::String {
        if self.has_ok() {
            match self.result.take() {
                ::std::option::Option::Some(stop::Result::Ok(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string err = 2;

    pub fn err(&self) -> &str {
        match self.result {
            ::std::option::Option::Some(stop::Result::Err(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_err(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_err(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(stop::Result::Err(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: ::std::string::String) {
        self.result = ::std::option::Option::Some(stop::Result::Err(v))
    }

    // Mutable pointer to the field.
    pub fn mut_err(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(stop::Result::Err(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(stop::Result::Err(::std::string::String::new()));
        }
        match self.result {
            ::std::option::Option::Some(stop::Result::Err(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_err(&mut self) -> ::std::string::String {
        if self.has_err() {
            match self.result.take() {
                ::std::option::Option::Some(stop::Result::Err(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "ok",
            Stop::has_ok,
            Stop::ok,
            Stop::set_ok,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "err",
            Stop::has_err,
            Stop::err,
            Stop::set_err,
        ));
        oneofs.push(stop::Result::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Stop>(
            "Stop",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Stop {
    const NAME: &'static str = "Stop";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.result = ::std::option::Option::Some(stop::Result::Ok(is.read_string()?));
                },
                18 => {
                    self.result = ::std::option::Option::Some(stop::Result::Err(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &stop::Result::Ok(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &stop::Result::Err(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &stop::Result::Ok(ref v) => {
                    os.write_string(1, v)?;
                },
                &stop::Result::Err(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Stop {
        Stop::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Stop {
        static instance: Stop = Stop {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Stop {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Stop").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Stop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Stop {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Stop`
pub mod stop {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:substantial.protos.events.Stop.result)
    pub enum Result {
        // @@protoc_insertion_point(oneof_field:substantial.protos.events.Stop.ok)
        Ok(::std::string::String),
        // @@protoc_insertion_point(oneof_field:substantial.protos.events.Stop.err)
        Err(::std::string::String),
    }

    impl ::protobuf::Oneof for Result {
    }

    impl ::protobuf::OneofFull for Result {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Stop as ::protobuf::MessageFull>::descriptor().oneof_by_name("result").unwrap()).clone()
        }
    }

    impl Result {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Result>("result")
        }
    }
}

// @@protoc_insertion_point(message:substantial.protos.events.Event)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Event {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.events.Event.at)
    pub at: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // message oneof groups
    pub of: ::std::option::Option<event::Of>,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.events.Event.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // .substantial.protos.events.Start start = 10;

    pub fn start(&self) -> &Start {
        match self.of {
            ::std::option::Option::Some(event::Of::Start(ref v)) => v,
            _ => <Start as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_start(&mut self) {
        self.of = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        match self.of {
            ::std::option::Option::Some(event::Of::Start(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: Start) {
        self.of = ::std::option::Option::Some(event::Of::Start(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start(&mut self) -> &mut Start {
        if let ::std::option::Option::Some(event::Of::Start(_)) = self.of {
        } else {
            self.of = ::std::option::Option::Some(event::Of::Start(Start::new()));
        }
        match self.of {
            ::std::option::Option::Some(event::Of::Start(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start(&mut self) -> Start {
        if self.has_start() {
            match self.of.take() {
                ::std::option::Option::Some(event::Of::Start(v)) => v,
                _ => panic!(),
            }
        } else {
            Start::new()
        }
    }

    // .substantial.protos.events.Save save = 11;

    pub fn save(&self) -> &Save {
        match self.of {
            ::std::option::Option::Some(event::Of::Save(ref v)) => v,
            _ => <Save as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_save(&mut self) {
        self.of = ::std::option::Option::None;
    }

    pub fn has_save(&self) -> bool {
        match self.of {
            ::std::option::Option::Some(event::Of::Save(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_save(&mut self, v: Save) {
        self.of = ::std::option::Option::Some(event::Of::Save(v))
    }

    // Mutable pointer to the field.
    pub fn mut_save(&mut self) -> &mut Save {
        if let ::std::option::Option::Some(event::Of::Save(_)) = self.of {
        } else {
            self.of = ::std::option::Option::Some(event::Of::Save(Save::new()));
        }
        match self.of {
            ::std::option::Option::Some(event::Of::Save(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_save(&mut self) -> Save {
        if self.has_save() {
            match self.of.take() {
                ::std::option::Option::Some(event::Of::Save(v)) => v,
                _ => panic!(),
            }
        } else {
            Save::new()
        }
    }

    // .substantial.protos.events.Sleep sleep = 12;

    pub fn sleep(&self) -> &Sleep {
        match self.of {
            ::std::option::Option::Some(event::Of::Sleep(ref v)) => v,
            _ => <Sleep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sleep(&mut self) {
        self.of = ::std::option::Option::None;
    }

    pub fn has_sleep(&self) -> bool {
        match self.of {
            ::std::option::Option::Some(event::Of::Sleep(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sleep(&mut self, v: Sleep) {
        self.of = ::std::option::Option::Some(event::Of::Sleep(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sleep(&mut self) -> &mut Sleep {
        if let ::std::option::Option::Some(event::Of::Sleep(_)) = self.of {
        } else {
            self.of = ::std::option::Option::Some(event::Of::Sleep(Sleep::new()));
        }
        match self.of {
            ::std::option::Option::Some(event::Of::Sleep(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sleep(&mut self) -> Sleep {
        if self.has_sleep() {
            match self.of.take() {
                ::std::option::Option::Some(event::Of::Sleep(v)) => v,
                _ => panic!(),
            }
        } else {
            Sleep::new()
        }
    }

    // .substantial.protos.events.Send send = 13;

    pub fn send(&self) -> &Send {
        match self.of {
            ::std::option::Option::Some(event::Of::Send(ref v)) => v,
            _ => <Send as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_send(&mut self) {
        self.of = ::std::option::Option::None;
    }

    pub fn has_send(&self) -> bool {
        match self.of {
            ::std::option::Option::Some(event::Of::Send(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_send(&mut self, v: Send) {
        self.of = ::std::option::Option::Some(event::Of::Send(v))
    }

    // Mutable pointer to the field.
    pub fn mut_send(&mut self) -> &mut Send {
        if let ::std::option::Option::Some(event::Of::Send(_)) = self.of {
        } else {
            self.of = ::std::option::Option::Some(event::Of::Send(Send::new()));
        }
        match self.of {
            ::std::option::Option::Some(event::Of::Send(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_send(&mut self) -> Send {
        if self.has_send() {
            match self.of.take() {
                ::std::option::Option::Some(event::Of::Send(v)) => v,
                _ => panic!(),
            }
        } else {
            Send::new()
        }
    }

    // .substantial.protos.events.Stop stop = 14;

    pub fn stop(&self) -> &Stop {
        match self.of {
            ::std::option::Option::Some(event::Of::Stop(ref v)) => v,
            _ => <Stop as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_stop(&mut self) {
        self.of = ::std::option::Option::None;
    }

    pub fn has_stop(&self) -> bool {
        match self.of {
            ::std::option::Option::Some(event::Of::Stop(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stop(&mut self, v: Stop) {
        self.of = ::std::option::Option::Some(event::Of::Stop(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stop(&mut self) -> &mut Stop {
        if let ::std::option::Option::Some(event::Of::Stop(_)) = self.of {
        } else {
            self.of = ::std::option::Option::Some(event::Of::Stop(Stop::new()));
        }
        match self.of {
            ::std::option::Option::Some(event::Of::Stop(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stop(&mut self) -> Stop {
        if self.has_stop() {
            match self.of.take() {
                ::std::option::Option::Some(event::Of::Stop(v)) => v,
                _ => panic!(),
            }
        } else {
            Stop::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "at",
            |m: &Event| { &m.at },
            |m: &mut Event| { &mut m.at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Start>(
            "start",
            Event::has_start,
            Event::start,
            Event::mut_start,
            Event::set_start,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Save>(
            "save",
            Event::has_save,
            Event::save,
            Event::mut_save,
            Event::set_save,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Sleep>(
            "sleep",
            Event::has_sleep,
            Event::sleep,
            Event::mut_sleep,
            Event::set_sleep,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Send>(
            "send",
            Event::has_send,
            Event::send,
            Event::mut_send,
            Event::set_send,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Stop>(
            "stop",
            Event::has_stop,
            Event::stop,
            Event::mut_stop,
            Event::set_stop,
        ));
        oneofs.push(event::Of::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Event>(
            "Event",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Event {
    const NAME: &'static str = "Event";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.at)?;
                },
                82 => {
                    self.of = ::std::option::Option::Some(event::Of::Start(is.read_message()?));
                },
                90 => {
                    self.of = ::std::option::Option::Some(event::Of::Save(is.read_message()?));
                },
                98 => {
                    self.of = ::std::option::Option::Some(event::Of::Sleep(is.read_message()?));
                },
                106 => {
                    self.of = ::std::option::Option::Some(event::Of::Send(is.read_message()?));
                },
                114 => {
                    self.of = ::std::option::Option::Some(event::Of::Stop(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.of {
            match v {
                &event::Of::Start(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Of::Save(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Of::Sleep(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Of::Send(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Of::Stop(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.at.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.of {
            match v {
                &event::Of::Start(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &event::Of::Save(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &event::Of::Sleep(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &event::Of::Send(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &event::Of::Stop(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Event {
        Event::new()
    }

    fn clear(&mut self) {
        self.at.clear();
        self.of = ::std::option::Option::None;
        self.of = ::std::option::Option::None;
        self.of = ::std::option::Option::None;
        self.of = ::std::option::Option::None;
        self.of = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Event {
        static instance: Event = Event {
            at: ::protobuf::MessageField::none(),
            of: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Event {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Event").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Event`
pub mod event {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:substantial.protos.events.Event.of)
    pub enum Of {
        // @@protoc_insertion_point(oneof_field:substantial.protos.events.Event.start)
        Start(super::Start),
        // @@protoc_insertion_point(oneof_field:substantial.protos.events.Event.save)
        Save(super::Save),
        // @@protoc_insertion_point(oneof_field:substantial.protos.events.Event.sleep)
        Sleep(super::Sleep),
        // @@protoc_insertion_point(oneof_field:substantial.protos.events.Event.send)
        Send(super::Send),
        // @@protoc_insertion_point(oneof_field:substantial.protos.events.Event.stop)
        Stop(super::Stop),
    }

    impl ::protobuf::Oneof for Of {
    }

    impl ::protobuf::OneofFull for Of {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Event as ::protobuf::MessageFull>::descriptor().oneof_by_name("of").unwrap()).clone()
        }
    }

    impl Of {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Of>("of")
        }
    }
}

// @@protoc_insertion_point(message:substantial.protos.events.Records)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Records {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.events.Records.run_id)
    pub run_id: ::std::string::String,
    // @@protoc_insertion_point(field:substantial.protos.events.Records.events)
    pub events: ::std::vec::Vec<Event>,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.events.Records.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Records {
    fn default() -> &'a Records {
        <Records as ::protobuf::Message>::default_instance()
    }
}

impl Records {
    pub fn new() -> Records {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "run_id",
            |m: &Records| { &m.run_id },
            |m: &mut Records| { &mut m.run_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "events",
            |m: &Records| { &m.events },
            |m: &mut Records| { &mut m.events },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Records>(
            "Records",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Records {
    const NAME: &'static str = "Records";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.run_id = is.read_string()?;
                },
                18 => {
                    self.events.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.run_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.run_id);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.run_id.is_empty() {
            os.write_string(1, &self.run_id)?;
        }
        for v in &self.events {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Records {
        Records::new()
    }

    fn clear(&mut self) {
        self.run_id.clear();
        self.events.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Records {
        static instance: Records = Records {
            run_id: ::std::string::String::new(),
            events: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Records {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Records").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Records {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Records {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15protocol/events.proto\x12\x19substantial.protos.events\x1a\x1cgoog\
    le/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"8\n\x05\
    Start\x12/\n\x06kwargs\x18\x01\x20\x01(\x0b2\x17.google.protobuf.StructR\
    \x06kwargs\"F\n\x04Save\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value\x12\x18\n\x07counter\x18\
    \x03\x20\x01(\x05R\x07counter\"w\n\x05Sleep\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\rR\x02id\x120\n\x05start\x18\x02\x20\x01(\x0b2\x1a.google.protobuf\
    .TimestampR\x05start\x12,\n\x03end\x18\x03\x20\x01(\x0b2\x1a.google.prot\
    obuf.TimestampR\x03end\"0\n\x04Send\x12\x12\n\x04name\x18\x01\x20\x01(\t\
    R\x04name\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"6\n\x04Stop\
    \x12\x10\n\x02ok\x18\x01\x20\x01(\tH\0R\x02ok\x12\x12\n\x03err\x18\x02\
    \x20\x01(\tH\0R\x03errB\x08\n\x06result\"\xd2\x02\n\x05Event\x12*\n\x02a\
    t\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x02at\x128\n\x05s\
    tart\x18\n\x20\x01(\x0b2\x20.substantial.protos.events.StartH\0R\x05star\
    t\x125\n\x04save\x18\x0b\x20\x01(\x0b2\x1f.substantial.protos.events.Sav\
    eH\0R\x04save\x128\n\x05sleep\x18\x0c\x20\x01(\x0b2\x20.substantial.prot\
    os.events.SleepH\0R\x05sleep\x125\n\x04send\x18\r\x20\x01(\x0b2\x1f.subs\
    tantial.protos.events.SendH\0R\x04send\x125\n\x04stop\x18\x0e\x20\x01(\
    \x0b2\x1f.substantial.protos.events.StopH\0R\x04stopB\x04\n\x02of\"Z\n\
    \x07Records\x12\x15\n\x06run_id\x18\x01\x20\x01(\tR\x05runId\x128\n\x06e\
    vents\x18\x02\x20\x03(\x0b2\x20.substantial.protos.events.EventR\x06even\
    tsJ\xb5\n\n\x06\x12\x04\0\01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\"\n\t\n\x02\x03\0\x12\x03\x04\0&\n\t\n\x02\x03\
    \x01\x12\x03\x05\0)\n\n\n\x02\x04\0\x12\x04\x07\0\t\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x07\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x02$\n\x0c\n\
    \x05\x04\0\x02\0\x06\x12\x03\x08\x02\x18\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x08\x19\x1f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\"#\n\n\n\x02\
    \x04\x01\x12\x04\x0b\0\x0f\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0b\x08\x0c\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0c\x02\x10\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0c\t\x0b\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0c\x0e\x0f\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\r\x02\x13\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\r\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\r\t\x0e\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\r\x11\x12\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0e\
    \x02\x14\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0e\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x0e\x08\x0f\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\x0e\x12\x13\n\n\n\x02\x04\x02\x12\x04\x11\0\x15\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x11\x08\r\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x12\x02\
    \x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x12\t\x0b\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\
    \x12\x0e\x0f\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x13\x02&\n\x0c\n\x05\
    \x04\x02\x02\x01\x06\x12\x03\x13\x02\x1b\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03\x13\x1c!\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x13$%\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03\x14\x02$\n\x0c\n\x05\x04\x02\x02\x02\x06\
    \x12\x03\x14\x02\x1b\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x14\x1c\x1f\
    \n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x14\"#\n\n\n\x02\x04\x03\x12\
    \x04\x17\0\x1a\x01\n\n\n\x03\x04\x03\x01\x12\x03\x17\x08\x0c\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x03\x18\x02\x12\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\
    \x18\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x18\t\r\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x18\x10\x11\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03\x19\x02\x13\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x19\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x19\t\x0e\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03\x19\x11\x12\n\n\n\x02\x04\x04\x12\x04\x1c\0!\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03\x1c\x08\x0c\n\x0c\n\x04\x04\x04\x08\0\x12\x04\
    \x1d\x02\x20\x03\n\x0c\n\x05\x04\x04\x08\0\x01\x12\x03\x1d\x08\x0e\n\x0b\
    \n\x04\x04\x04\x02\0\x12\x03\x1e\x04\x12\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03\x1e\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1e\x0b\r\n\x0c\
    \n\x05\x04\x04\x02\0\x03\x12\x03\x1e\x10\x11\n\x0b\n\x04\x04\x04\x02\x01\
    \x12\x03\x1f\x04\x13\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x1f\x04\n\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1f\x0b\x0e\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x03\x1f\x11\x12\n\n\n\x02\x04\x05\x12\x04#\0,\x01\n\n\n\
    \x03\x04\x05\x01\x12\x03#\x08\r\n\x0b\n\x04\x04\x05\x02\0\x12\x03$\x02#\
    \n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03$\x02\x1b\n\x0c\n\x05\x04\x05\x02\
    \0\x01\x12\x03$\x1c\x1e\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03$!\"\n\x0c\
    \n\x04\x04\x05\x08\0\x12\x04%\x02+\x03\n\x0c\n\x05\x04\x05\x08\0\x01\x12\
    \x03%\x08\n\n\x0b\n\x04\x04\x05\x02\x01\x12\x03&\x04\x15\n\x0c\n\x05\x04\
    \x05\x02\x01\x06\x12\x03&\x04\t\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03&\
    \n\x0f\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03&\x12\x14\n\x0b\n\x04\x04\
    \x05\x02\x02\x12\x03'\x04\x13\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x03'\
    \x04\x08\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03'\t\r\n\x0c\n\x05\x04\
    \x05\x02\x02\x03\x12\x03'\x10\x12\n\x0b\n\x04\x04\x05\x02\x03\x12\x03(\
    \x04\x15\n\x0c\n\x05\x04\x05\x02\x03\x06\x12\x03(\x04\t\n\x0c\n\x05\x04\
    \x05\x02\x03\x01\x12\x03(\n\x0f\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x03(\
    \x12\x14\n\x0b\n\x04\x04\x05\x02\x04\x12\x03)\x04\x13\n\x0c\n\x05\x04\
    \x05\x02\x04\x06\x12\x03)\x04\x08\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\
    \x03)\t\r\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03)\x10\x12\n\x0b\n\x04\
    \x04\x05\x02\x05\x12\x03*\x04\x13\n\x0c\n\x05\x04\x05\x02\x05\x06\x12\
    \x03*\x04\x08\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\x03*\t\r\n\x0c\n\x05\
    \x04\x05\x02\x05\x03\x12\x03*\x10\x12\n\n\n\x02\x04\x06\x12\x04.\01\x01\
    \n\n\n\x03\x04\x06\x01\x12\x03.\x08\x0f\n\x0b\n\x04\x04\x06\x02\0\x12\
    \x03/\x02\x14\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03/\x02\x08\n\x0c\n\x05\
    \x04\x06\x02\0\x01\x12\x03/\t\x0f\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03/\
    \x12\x13\n\x0b\n\x04\x04\x06\x02\x01\x12\x030\x02\x1c\n\x0c\n\x05\x04\
    \x06\x02\x01\x04\x12\x030\x02\n\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x030\
    \x0b\x10\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x030\x11\x17\n\x0c\n\x05\
    \x04\x06\x02\x01\x03\x12\x030\x1a\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Start::generated_message_descriptor_data());
            messages.push(Save::generated_message_descriptor_data());
            messages.push(Sleep::generated_message_descriptor_data());
            messages.push(Send::generated_message_descriptor_data());
            messages.push(Stop::generated_message_descriptor_data());
            messages.push(Event::generated_message_descriptor_data());
            messages.push(Records::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
