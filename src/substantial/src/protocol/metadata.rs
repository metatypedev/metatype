// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protocol/metadata.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:substantial.protos.metadata.Info)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Info {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.metadata.Info.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.metadata.Info.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Info {
    fn default() -> &'a Info {
        <Info as ::protobuf::Message>::default_instance()
    }
}

impl Info {
    pub fn new() -> Info {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Info| { &m.message },
            |m: &mut Info| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Info>(
            "Info",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Info {
    const NAME: &'static str = "Info";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Info {
        Info::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Info {
        static instance: Info = Info {
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Info {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Info").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Info {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:substantial.protos.metadata.Error)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Error {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.metadata.Error.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:substantial.protos.metadata.Error.stack)
    pub stack: ::std::string::String,
    // @@protoc_insertion_point(field:substantial.protos.metadata.Error.type)
    pub type_: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.metadata.Error.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Error {
    fn default() -> &'a Error {
        <Error as ::protobuf::Message>::default_instance()
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Error| { &m.message },
            |m: &mut Error| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stack",
            |m: &Error| { &m.stack },
            |m: &mut Error| { &mut m.stack },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Error| { &m.type_ },
            |m: &mut Error| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Error>(
            "Error",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Error {
    const NAME: &'static str = "Error";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                18 => {
                    self.stack = is.read_string()?;
                },
                26 => {
                    self.type_ = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        if !self.stack.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.stack);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.type_);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        if !self.stack.is_empty() {
            os.write_string(2, &self.stack)?;
        }
        if !self.type_.is_empty() {
            os.write_string(3, &self.type_)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Error {
        Error::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.stack.clear();
        self.type_.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Error {
        static instance: Error = Error {
            message: ::std::string::String::new(),
            stack: ::std::string::String::new(),
            type_: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Error {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Error").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:substantial.protos.metadata.Metadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Metadata {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.metadata.Metadata.at)
    pub at: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // message oneof groups
    pub of: ::std::option::Option<metadata::Of>,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.metadata.Metadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    // .substantial.protos.metadata.Info info = 10;

    pub fn info(&self) -> &Info {
        match self.of {
            ::std::option::Option::Some(metadata::Of::Info(ref v)) => v,
            _ => <Info as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_info(&mut self) {
        self.of = ::std::option::Option::None;
    }

    pub fn has_info(&self) -> bool {
        match self.of {
            ::std::option::Option::Some(metadata::Of::Info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: Info) {
        self.of = ::std::option::Option::Some(metadata::Of::Info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_info(&mut self) -> &mut Info {
        if let ::std::option::Option::Some(metadata::Of::Info(_)) = self.of {
        } else {
            self.of = ::std::option::Option::Some(metadata::Of::Info(Info::new()));
        }
        match self.of {
            ::std::option::Option::Some(metadata::Of::Info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_info(&mut self) -> Info {
        if self.has_info() {
            match self.of.take() {
                ::std::option::Option::Some(metadata::Of::Info(v)) => v,
                _ => panic!(),
            }
        } else {
            Info::new()
        }
    }

    // .substantial.protos.metadata.Error error = 11;

    pub fn error(&self) -> &Error {
        match self.of {
            ::std::option::Option::Some(metadata::Of::Error(ref v)) => v,
            _ => <Error as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_error(&mut self) {
        self.of = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.of {
            ::std::option::Option::Some(metadata::Of::Error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.of = ::std::option::Option::Some(metadata::Of::Error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut Error {
        if let ::std::option::Option::Some(metadata::Of::Error(_)) = self.of {
        } else {
            self.of = ::std::option::Option::Some(metadata::Of::Error(Error::new()));
        }
        match self.of {
            ::std::option::Option::Some(metadata::Of::Error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        if self.has_error() {
            match self.of.take() {
                ::std::option::Option::Some(metadata::Of::Error(v)) => v,
                _ => panic!(),
            }
        } else {
            Error::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "at",
            |m: &Metadata| { &m.at },
            |m: &mut Metadata| { &mut m.at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Info>(
            "info",
            Metadata::has_info,
            Metadata::info,
            Metadata::mut_info,
            Metadata::set_info,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Error>(
            "error",
            Metadata::has_error,
            Metadata::error,
            Metadata::mut_error,
            Metadata::set_error,
        ));
        oneofs.push(metadata::Of::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Metadata>(
            "Metadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Metadata {
    const NAME: &'static str = "Metadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.at)?;
                },
                82 => {
                    self.of = ::std::option::Option::Some(metadata::Of::Info(is.read_message()?));
                },
                90 => {
                    self.of = ::std::option::Option::Some(metadata::Of::Error(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.of {
            match v {
                &metadata::Of::Info(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &metadata::Of::Error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.at.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.of {
            match v {
                &metadata::Of::Info(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &metadata::Of::Error(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn clear(&mut self) {
        self.at.clear();
        self.of = ::std::option::Option::None;
        self.of = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metadata {
        static instance: Metadata = Metadata {
            at: ::protobuf::MessageField::none(),
            of: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Metadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Metadata`
pub mod metadata {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:substantial.protos.metadata.Metadata.of)
    pub enum Of {
        // @@protoc_insertion_point(oneof_field:substantial.protos.metadata.Metadata.info)
        Info(super::Info),
        // @@protoc_insertion_point(oneof_field:substantial.protos.metadata.Metadata.error)
        Error(super::Error),
    }

    impl ::protobuf::Oneof for Of {
    }

    impl ::protobuf::OneofFull for Of {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Metadata as ::protobuf::MessageFull>::descriptor().oneof_by_name("of").unwrap()).clone()
        }
    }

    impl Of {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Of>("of")
        }
    }
}

// @@protoc_insertion_point(message:substantial.protos.metadata.Records)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Records {
    // message fields
    // @@protoc_insertion_point(field:substantial.protos.metadata.Records.run_id)
    pub run_id: ::std::string::String,
    // @@protoc_insertion_point(field:substantial.protos.metadata.Records.metadata)
    pub metadata: ::std::vec::Vec<Metadata>,
    // special fields
    // @@protoc_insertion_point(special_field:substantial.protos.metadata.Records.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Records {
    fn default() -> &'a Records {
        <Records as ::protobuf::Message>::default_instance()
    }
}

impl Records {
    pub fn new() -> Records {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "run_id",
            |m: &Records| { &m.run_id },
            |m: &mut Records| { &mut m.run_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metadata",
            |m: &Records| { &m.metadata },
            |m: &mut Records| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Records>(
            "Records",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Records {
    const NAME: &'static str = "Records";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.run_id = is.read_string()?;
                },
                18 => {
                    self.metadata.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.run_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.run_id);
        }
        for value in &self.metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.run_id.is_empty() {
            os.write_string(1, &self.run_id)?;
        }
        for v in &self.metadata {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Records {
        Records::new()
    }

    fn clear(&mut self) {
        self.run_id.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Records {
        static instance: Records = Records {
            run_id: ::std::string::String::new(),
            metadata: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Records {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Records").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Records {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Records {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17protocol/metadata.proto\x12\x1bsubstantial.protos.metadata\x1a\x1f\
    google/protobuf/timestamp.proto\"\x20\n\x04Info\x12\x18\n\x07message\x18\
    \x01\x20\x01(\tR\x07message\"K\n\x05Error\x12\x18\n\x07message\x18\x01\
    \x20\x01(\tR\x07message\x12\x14\n\x05stack\x18\x02\x20\x01(\tR\x05stack\
    \x12\x12\n\x04type\x18\x03\x20\x01(\tR\x04type\"\xb1\x01\n\x08Metadata\
    \x12*\n\x02at\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x02at\
    \x127\n\x04info\x18\n\x20\x01(\x0b2!.substantial.protos.metadata.InfoH\0\
    R\x04info\x12:\n\x05error\x18\x0b\x20\x01(\x0b2\".substantial.protos.met\
    adata.ErrorH\0R\x05errorB\x04\n\x02of\"c\n\x07Records\x12\x15\n\x06run_i\
    d\x18\x01\x20\x01(\tR\x05runId\x12A\n\x08metadata\x18\x02\x20\x03(\x0b2%\
    .substantial.protos.metadata.MetadataR\x08metadataJ\xa0\x05\n\x06\x12\
    \x04\0\0\x1a\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0$\n\t\n\x02\x03\0\x12\x03\x04\0)\n\n\n\x02\x04\0\x12\x04\x06\0\x08\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\x0c\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x07\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x07\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x07\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x07\x13\x14\n\n\n\x02\x04\x01\x12\x04\t\0\r\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\t\x08\r\n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x02\x15\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\n\t\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\n\x13\x14\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x0b\x02\x13\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0b\t\x0e\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0b\x11\x12\n\x0b\n\x04\x04\x01\
    \x02\x02\x12\x03\x0c\x02\x12\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0c\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x0c\t\r\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03\x0c\x10\x11\n\n\n\x02\x04\x02\x12\x04\x0f\0\x15\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\x0f\x08\x10\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x10\x02#\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x10\x02\x1b\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x10\x1c\x1e\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03\x10!\"\n\x0c\n\x04\x04\x02\x08\0\x12\x04\x11\x02\x14\x03\
    \n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03\x11\x08\n\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03\x12\x04\x13\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x12\x04\
    \x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x12\t\r\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03\x12\x10\x12\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x13\
    \x04\x15\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x13\x04\t\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x13\n\x0f\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03\x13\x12\x14\n\n\n\x02\x04\x03\x12\x04\x17\0\x1a\x01\n\n\n\x03\
    \x04\x03\x01\x12\x03\x17\x08\x0f\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x18\
    \x02\x14\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x18\t\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\x18\x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x19\x02!\n\x0c\n\
    \x05\x04\x03\x02\x01\x04\x12\x03\x19\x02\n\n\x0c\n\x05\x04\x03\x02\x01\
    \x06\x12\x03\x19\x0b\x13\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x19\x14\
    \x1c\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x19\x1f\x20b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Info::generated_message_descriptor_data());
            messages.push(Error::generated_message_descriptor_data());
            messages.push(Metadata::generated_message_descriptor_data());
            messages.push(Records::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
