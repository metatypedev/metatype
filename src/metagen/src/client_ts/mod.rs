// Copyright Metatype OÃœ, licensed under the Mozilla Public License Version 2.0.
// SPDX-License-Identifier: MPL-2.0

mod node_metas;
mod selections;

use core::fmt::Write;

use fdk_ts::types::manifest_page;
use fdk_ts::types::TsType;
use node_metas::TsNodeMeta;
use selections::TsSelection;
use shared::manifest::ManifestPage;
use shared::node_metas::MetasPageBuilder;
use tg_schema::EffectType;
use typegraph::conv::TypeKey;
use typegraph::TypeNodeExt as _;

use crate::interlude::*;
use crate::*;

use crate::fdk_ts::utils;
use crate::shared::client::*;

struct TsClientManifest {
    tg: Arc<Typegraph>,
    types: ManifestPage<TsType>,
    node_metas: ManifestPage<TsNodeMeta>,
    selections: ManifestPage<TsSelection>,
}

impl TsClientManifest {
    fn new(tg: Arc<Typegraph>) -> Result<TsClientManifest> {
        let types = manifest_page(&tg)?;
        let node_metas = MetasPageBuilder::new(tg.clone())?.build()?;
        let selections = selections::manifest_page(&tg)?;
        Ok(Self {
            tg,
            types,
            node_metas,
            selections,
        })
    }
}

#[derive(Serialize, Deserialize, Debug, garde::Validate)]
pub struct ClienTsGenConfig {
    #[serde(flatten)]
    #[garde(dive)]
    pub base: crate::config::FdkGeneratorConfigBase,
}

impl ClienTsGenConfig {
    pub fn from_json(json: serde_json::Value, workspace_path: &Path) -> anyhow::Result<Self> {
        let mut config: ClienTsGenConfig = serde_json::from_value(json)?;
        config.base.path = workspace_path.join(config.base.path);
        config.base.typegraph_path = config
            .base
            .typegraph_path
            .as_ref()
            .map(|path| workspace_path.join(path));
        Ok(config)
    }
}

pub struct Generator {
    config: ClienTsGenConfig,
}

impl Generator {
    pub const INPUT_TG: &'static str = "tg_name";
    pub fn new(config: ClienTsGenConfig) -> Result<Self, garde::Report> {
        use garde::Validate;
        config.validate()?;
        Ok(Self { config })
    }
}

impl crate::Plugin for Generator {
    fn bill_of_inputs(&self) -> IndexMap<String, GeneratorInputOrder> {
        [(
            Self::INPUT_TG.to_string(),
            if let Some(tg_name) = &self.config.base.typegraph_name {
                GeneratorInputOrder::TypegraphFromTypegate {
                    name: tg_name.clone(),
                }
            } else if let Some(tg_path) = &self.config.base.typegraph_path {
                GeneratorInputOrder::TypegraphFromPath {
                    path: tg_path.clone(),
                    name: self.config.base.typegraph_name.clone(),
                }
            } else {
                unreachable!()
            },
        )]
        .into_iter()
        .collect()
    }

    fn generate(
        &self,
        inputs: IndexMap<String, GeneratorInputResolved>,
    ) -> anyhow::Result<GeneratorOutput> {
        let tg = match inputs
            .get(Self::INPUT_TG)
            .context("missing generator input")?
        {
            GeneratorInputResolved::TypegraphFromTypegate { raw } => raw,
            GeneratorInputResolved::TypegraphFromPath { raw } => raw,
            _ => bail!("unexpected input type"),
        };
        let mut out = IndexMap::new();
        let manif = TsClientManifest::new(tg.clone())?;
        let mut buf = String::new();
        manif.render(&mut buf)?;
        out.insert(
            self.config.base.path.join("client.ts"),
            GeneratedFile {
                contents: buf,
                overwrite: true,
            },
        );

        Ok(GeneratorOutput(out))
    }
}

struct Memos {
    types: IndexMap<TypeKey, String>,
    node_metas: IndexMap<TypeKey, String>,
    selections: IndexMap<TypeKey, String>,
}

impl TsClientManifest {
    fn render(&self, out: &mut impl Write) -> anyhow::Result<()> {
        writeln!(
            out,
            "// This file was @generated by metagen and is intended"
        )?;
        writeln!(out, "// to be generated again on subsequent metagen runs.")?;
        writeln!(out)?;

        // Render the common sections like the transports
        writeln!(out, "{}", include_str!("static/mod.ts"))?;

        let mut types_buffer = String::new();
        self.types.render_all(&mut types_buffer, &())?;
        let name_memo = self.types.get_cached_refs();

        self.node_metas.render_all(out, &())?;
        let node_metas = self.node_metas.get_cached_refs();

        out.write_str(&types_buffer)?;
        let _ = types_buffer;

        self.selections.render_all(out, &())?;
        let selections = self.selections.get_cached_refs();

        let memos = Memos {
            types: name_memo,
            node_metas,
            selections,
        };

        self.render_query_graph(out, &memos)?;

        writeln!(out)?;
        Ok(())
    }

    fn render_query_graph(&self, out: &mut impl Write, memos: &Memos) -> anyhow::Result<()> {
        let gql_types = get_gql_types(&self.tg)?;

        write!(
            out,
            r#"
export class QueryGraph extends _QueryGraphBase {{
  constructor() {{
    super({{"#
        )?;
        for (key, gql_ty) in gql_types.into_iter() {
            // TODO
            let ty_name = memos.types.get(&key).unwrap();
            write!(
                out,
                r#"
      "{ty_name}": "{gql_ty}","#
            )?;
        }
        write!(
            out,
            r#"
    }});
  }}
            "#
        )?;

        self.render_meta_functions(out, memos)?;

        writeln!(
            out,
            "
}}"
        )?;

        Ok(())
    }

    fn render_meta_functions(&self, out: &mut impl Write, memos: &Memos) -> anyhow::Result<()> {
        for func in self.tg.root_functions() {
            let (_, ty) = func?;
            use heck::ToLowerCamelCase;

            let node_name = ty.name()?;
            let method_name = node_name.to_lower_camel_case();
            let out_ty_name = memos.types.get(&ty.output()?.key()).unwrap();

            let arg_ty = ty
                .non_empty_input()?
                .map(|ty| memos.types.get(&ty.key()))
                .flatten();
            let select_ty = memos.selections.get(&ty.output()?.key());

            let args_row = match (arg_ty, select_ty) {
                (Some(arg_ty), Some(select_ty)) => {
                    format!("args: {arg_ty} | PlaceholderArgs<{arg_ty}>, select: {select_ty}")
                }
                // functions that return scalars don't need selections
                (Some(arg_ty), None) => format!("args: {arg_ty} | PlaceholderArgs<{arg_ty}>"),
                // not all functions have args (empty struct arg)
                (None, Some(select_ty)) => format!("select: {select_ty}"),
                (None, None) => "".into(),
            };

            let args_selection = match (ty.non_empty_input()?, select_ty) {
                (Some(_), Some(_)) => "[args, select]",
                (Some(_), None) => "args",
                (None, Some(_)) => "select",
                (None, None) => "true",
            };

            let meta_method = memos
                .node_metas
                .get(&ty.key())
                .map(|str| &str[..])
                .unwrap_or_else(|| "scalar");

            let node_type = match ty.effect() {
                EffectType::Read => "QueryNode",
                EffectType::Update | EffectType::Delete | EffectType::Create => "MutationNode",
            };

            write!(
                out,
                r#"
          {method_name}({args_row}): {node_type}<{out_ty_name}> {{
            const inner = _selectionToNodeSet(
              {{ "{node_name}": {args_selection} }},
              [["{node_name}", nodeMetas.{meta_method}]],
              "$q",
            )[0];
            return new {node_type}(inner);
          }}"#
            )?;
        }

        Ok(())
    }
}

#[test]
fn e2e() -> anyhow::Result<()> {
    use crate::tests::*;

    let tg_name = "gen-test";
    let config = config::Config {
        targets: [(
            "default".to_string(),
            config::Target(
                [GeneratorConfig {
                    generator_name: "client_ts".to_string(),
                    other: serde_json::to_value(client_ts::ClienTsGenConfig {
                        base: config::FdkGeneratorConfigBase {
                            typegraph_name: Some(tg_name.into()),
                            typegraph_path: None,
                            // NOTE: root will map to the test's tempdir
                            path: "./".into(),
                            template_dir: None,
                        },
                    })?,
                }]
                .into_iter()
                .collect(),
            ),
        )]
        .into_iter()
        .collect(),
    };
    tokio::runtime::Builder::new_multi_thread()
        .enable_all()
        .thread_stack_size(16 * 1024 * 1024)
        .build()?
        .block_on(async {
            let tg = test_typegraph_3().await?;
            e2e_test(vec![E2eTestCase {
                typegraphs: [(tg_name.to_string(), tg)].into_iter().collect(),
                target: "default".into(),
                config,
                build_fn: |args| {
                    Box::pin(async move {
                        let status = tokio::process::Command::new("deno")
                            .args("check client.ts".split(' ').collect::<Vec<_>>())
                            .current_dir(&args.path)
                            .kill_on_drop(true)
                            .spawn()?
                            .wait()
                            .await?;
                        if !status.success() {
                            anyhow::bail!("error checking generated crate");
                        }
                        let status = tokio::process::Command::new("deno")
                            .args("lint client.ts".split(' ').collect::<Vec<_>>())
                            .current_dir(&args.path)
                            .kill_on_drop(true)
                            .spawn()?
                            .wait()
                            .await?;
                        if !status.success() {
                            anyhow::bail!("error lint generated crate");
                        }
                        Ok(())
                    })
                },
                target_dir: Some("./fixtures/client_ts/".into()),
            }])
            .await
        })?;
    Ok(())
}
