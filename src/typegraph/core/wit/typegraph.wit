package metatype:typegraph;


interface core {
    record error {
        stack: list<string>,
    }

    // typegraph description
    record cors {
        allow-origin: list<string>,
        allow-headers: list<string>,
        expose-headers: list<string>,
        allow-methods: list<string>,
        allow-credentials: bool,
        max-age-sec: option<u32>
    }

    record rate {
        window-limit: u32,
        window-sec: u32,
        query-limit: u32,
        context-identifier: option<string>,
        local-excess: u32,
    }

    record typegraph-init-params {
        name: string,
        dynamic: option<bool>,
        path: string,
        // TypeMeta
        prefix: option<string>,
        cors: cors,
        rate: option<rate>,
    }

    record artifact {
        path: string,
        hash: string,
        size: u32,
    }

    init-typegraph: func(params: typegraph-init-params) -> result<_, error>;

    record migration-action {
        apply: bool,
        create: bool,
        reset: bool,
    }

    record prisma-migration-config {
        migrations-dir: string,
        migration-actions: list<tuple<string, migration-action>>,
        default-migration-action: migration-action,
    }

    record serialize-params {
        typegraph-path: string,
        prefix: option<string>,
        artifact-resolution: bool,
        codegen: bool,
        prisma-migration: prisma-migration-config,
        pretty: bool,
    }

    serialize-typegraph: func(params: serialize-params) -> result<tuple<string, list<artifact>>, error>;

    type type-id = u32;
    record type-base {
        name: option<string>,
        // string => json string
        runtime-config: option<list<tuple<string, string>>>,
        as-id: bool,
    }

    with-injection: func(type-id: type-id, injection: string) -> result<type-id, error>;

    record type-proxy {
        name: string,
        extras: list<tuple<string, string>>,
    }
    refb: func(name: string, attributes: list<tuple<string, string>>) -> result<type-id, error>;

    record type-integer {
        min: option<s32>,
        max: option<s32>,
        exclusive-minimum: option<s32>,
        exclusive-maximum: option<s32>,
        multiple-of: option<s32>,
        enumeration: option<list<s32>>
    }
    integerb: func(data: type-integer, base: type-base) -> result<type-id, error>;

    record type-float {
        min: option<float64>,
        max: option<float64>,
        exclusive-minimum: option<float64>,
        exclusive-maximum: option<float64>,
        multiple-of: option<float64>,
        enumeration: option<list<float64>>
    }
    floatb: func(data: type-float, base: type-base) -> result<type-id, error>;

    booleanb: func(base: type-base) -> result<type-id, error>;

    record type-string {
        min: option<u32>,
        max: option<u32>,
        format: option<string>,
        pattern: option<string>,
        enumeration: option<list<string>>
    }
    stringb: func(data: type-string, base: type-base) -> result<type-id, error>;

    record type-file {
        min: option<u32>,
        max: option<u32>,
        allow: option<list<string>>,
    }
    fileb: func(data: type-file, base: type-base) -> result<type-id, error>;


    record type-list {
        of: type-id,
        min: option<u32>,
        max: option<u32>,
        unique-items: option<bool>
    }
    listb: func(data: type-list, base: type-base) -> result<type-id, error>;

    record type-optional {
        of: type-id,
        default-item: option<string>
    }
    optionalb: func(data: type-optional, base: type-base) -> result<type-id, error>;

    record type-union {
        variants: list<type-id>,
    }
    unionb: func(data: type-union, base: type-base) -> result<type-id, error>;

    record type-either {
        variants: list<type-id>,
    }
    eitherb: func(data: type-either, base: type-base) -> result<type-id, error>;

    record type-struct {
        props: list<tuple<string, type-id>>,
        additional-props: bool,
        min: option<u32>,
        max: option<u32>,
        enumeration: option<list<string>>,
    }
    structb: func(data: type-struct, base: type-base) -> result<type-id, error>;
    extend-struct: func(tpe: type-id, props: list<tuple<string, type-id>>) -> result<type-id, error>;

    get-type-repr: func(id: type-id) -> result<string, error>;

    variant value-source {
        raw(string),  // json
        context(string),  // key
        secret(string),  // key
        parent(string),  // name
        param(string),  // name
    }

    record parameter-transform {
        resolver-input: type-id,
        transform-tree: string,
    }

    record type-func {
        inp: type-id,
        parameter-transform: option<parameter-transform>,
        out: type-id,
        mat: materializer-id,
        rate-calls: bool,
        rate-weight: option<u32>,
    }

    funcb: func(data: type-func) -> result<type-id, error>;

    record transform-data {
        query-input: type-id,
        parameter-transform: parameter-transform,
    }

    get-transform-data: func(resolver-input: type-id, transform-tree: string) -> result<transform-data, error>;

    type policy-id = u32;

    record policy {
        name: string,
        materializer: materializer-id,
    }

    record policy-per-effect {
        read: option<policy-id>,
        create: option<policy-id>,
        update: option<policy-id>,
        delete: option<policy-id>,
    }

    variant policy-spec {
        simple(policy-id),
        per-effect(policy-per-effect),
    }

    register-policy: func(pol: policy) -> result<policy-id, error>;

    with-policy: func(type-id: type-id, policy-chain: list<policy-spec>) -> result<type-id, error>;

    // policy-id, policy-name
    get-public-policy: func() -> result<tuple<policy-id, string>, error>;
    get-internal-policy: func() -> result<tuple<policy-id, string>, error>;

    variant context-check {
        not-null,
        value(string),
        pattern(string),
    }
    register-context-policy: func(key: string, check: context-check) -> result<tuple<policy-id, string>, error>;

    rename-type: func(tpe: type-id, new-name: string) -> result<type-id, error>;

    expose: func(fns: list<tuple<string, type-id>>, default-policy: option<list<policy-spec>>) -> result<_, error>;

    set-seed: func(seed: option<u32>) -> result<_, error>;

    type runtime-id = u32;
    type materializer-id = u32;

    record func-params {
        inp: type-id,
        out: type-id,
        mat: materializer-id,
    }
}

interface runtimes {
    use core.{error, type-id, func-params, runtime-id, materializer-id, artifact};

    get-deno-runtime: func() -> runtime-id;

    type idempotency = bool;

    variant effect {
        read,
        create(idempotency),
        update(idempotency),
        delete(idempotency),
    }

    record base-materializer {
        runtime: runtime-id,
        effect: effect,
    }


    // deno
    record materializer-deno-func {
        code: string,
        secrets: list<string>,
    }

    record materializer-deno-static {
        value: string,
    }

    record materializer-deno-predefined {
        name: string,
    }

    record materializer-deno-import {
        func-name: string,
        module: string,
        deps: list<string>,
        secrets: list<string>,
    }

    register-deno-func: func(data: materializer-deno-func, effect: effect) -> result<materializer-id, error>;
    register-deno-static: func(data: materializer-deno-static, type-id: type-id) -> result<materializer-id, error>;

    get-predefined-deno-func: func(data: materializer-deno-predefined) -> result<materializer-id, error>;
    import-deno-function: func(data: materializer-deno-import, effect: effect) -> result<materializer-id, error>;


    // graphql
    record graphql-runtime-data {
        endpoint: string,
    }

    record materializer-graphql-query {
        path: option<list<string>>,
    }

    register-graphql-runtime: func(data: graphql-runtime-data) -> result<runtime-id, error>;
    graphql-query: func(base: base-materializer, data: materializer-graphql-query) -> result<materializer-id, error>;
    graphql-mutation: func(base: base-materializer, data: materializer-graphql-query) -> result<materializer-id, error>;

    record http-runtime-data {
        endpoint: string,
        cert-secret: option<string>,
        basic-auth-secret: option<string>,
    }

    enum http-method {
        get,
        post,
        put,
        patch,
        delete,
    }

    record materializer-http-request {
        method: http-method,
        path: string,
        content-type: option<string>,
        header-prefix: option<string>,
        query-fields: option<list<string>>,
        rename-fields: option<list<tuple<string, string>>>,
        body-fields: option<list<string>>,
        auth-token-field: option<string>,
    }

    register-http-runtime: func(data: http-runtime-data) -> result<runtime-id, error>;
    http-request: func(base: base-materializer, data: materializer-http-request) -> result<materializer-id, error>;

    // python
    record materializer-python-def {
        runtime: runtime-id,
        name: string,
        fn: string,
    }

    record materializer-python-lambda {
        runtime: runtime-id,
        fn: string,
    }

    record materializer-python-module {
        runtime: runtime-id,
        file: string,
        deps: list<string>,
    }

    record materializer-python-import {
        module: u32,
        func-name: string,
        secrets: list<string>
    }

    // TODO: host:port

    register-python-runtime: func() -> result<runtime-id, error>;
    from-python-lambda: func(base: base-materializer, data: materializer-python-lambda) -> result<materializer-id, error>;
    from-python-def: func(base: base-materializer, data: materializer-python-def) -> result<materializer-id, error>;
    from-python-module: func(base: base-materializer, data: materializer-python-module) -> result<materializer-id, error>;
    from-python-import: func(base: base-materializer, data: materializer-python-import) -> result<materializer-id, error>;

    // random
    record random-runtime-data {
        seed: option<u32>,
        reset: option<string>,
    }

    record materializer-random {
        runtime: runtime-id,
    }

    register-random-runtime: func(data: random-runtime-data) -> result<materializer-id, error>;
    create-random-mat: func(base: base-materializer, data: materializer-random) -> result<materializer-id, error>;

    // wasm

    record wasm-runtime-data {
        wasm-artifact: string,
    }

    record materializer-wasm-reflected-func {
        func-name: string,
    }

    register-wasm-reflected-runtime: func(data: wasm-runtime-data) -> result<runtime-id, error>;
    from-wasm-reflected-func: func(base: base-materializer, data: materializer-wasm-reflected-func) -> result<materializer-id, error>;

    record materializer-wasm-wire-handler {
        func-name: string,
    }

    register-wasm-wire-runtime: func(data: wasm-runtime-data) -> result<runtime-id, error>;
    from-wasm-wire-handler: func(base: base-materializer, data: materializer-wasm-wire-handler) -> result<materializer-id, error>;

    // prisma
    record prisma-runtime-data {
        name: string,
        connection-string-secret: string,
    }

    record prisma-link-data {
        target-type: type-id,
        relationship-name: option<string>,
        foreign-key: option<bool>,
        target-field: option<string>,
        unique: option<bool>,
    }

    register-prisma-runtime: func(data: prisma-runtime-data) -> result<runtime-id, error>;
    prisma-find-unique: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-find-many: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-find-first: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-aggregate: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-count: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-group-by: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-create-one: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-create-many: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-update-one: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-update-many: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-upsert-one: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-delete-one: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-delete-many: func(runtime: runtime-id, model: type-id) -> result<func-params, error>;
    prisma-execute: func(runtime: runtime-id, query: string, param: type-id, effect: effect) -> result<func-params, error>;
    prisma-query-raw: func(runtime: runtime-id, query: string, param: option<type-id>, out: type-id) -> result<func-params, error>;
    prisma-link: func(data: prisma-link-data) -> result<type-id, error>;


    // prisma-migrate
    enum prisma-migration-operation {
        diff,
        create,
        apply,
        deploy,
        reset,
    }
    prisma-migration: func(operation: prisma-migration-operation) -> result<func-params, error>;

    // temporal
    record temporal-runtime-data {
        name: string,
        host-secret: string,
        namespace-secret: option<string>,
    }

    variant temporal-operation-type {
        start-workflow,
        signal-workflow,
        query-workflow,
        describe-workflow
    }

    record temporal-operation-data {
        mat-arg: option<string>,
        func-arg: option<type-id>,
        func-out: option<type-id>,
        operation: temporal-operation-type,
    }

    register-temporal-runtime: func(data: temporal-runtime-data) -> result<runtime-id, error>;
    generate-temporal-operation: func(runtime: runtime-id, data: temporal-operation-data) -> result<func-params, error>;

    // typegate
    enum typegate-operation {
        list-typegraphs,
        find-typegraph,
        add-typegraph,
        remove-typegraphs,
        get-serialized-typegraph,
        get-arg-info-by-path,
        find-available-operations,
        find-prisma-models,
        raw-prisma-read,
        raw-prisma-create,
        raw-prisma-update,
        raw-prisma-delete,
        query-prisma-model,
    }

    register-typegate-materializer: func(operation: typegate-operation) -> result<materializer-id, error>;

    // typegraph  (introspection)
    enum typegraph-operation {
        resolver,
        get-type,
        get-schema,
    }

    register-typegraph-materializer: func(operation: typegraph-operation) -> result<materializer-id, error>;

    // substantial
    record substantial-runtime-data {
        endpoint: string,
        basic-auth-secret: option<string>,
    }

    enum workflow-kind {
        python, // for now
    }

    record workflow {
        name: string,
        file: string,
        deps: list<string>,
        kind: workflow-kind
    }

    variant substantial-operation-type {
        start(workflow),
        stop(workflow),
        send(workflow),
    }

    record substantial-operation-data {
        func-arg: option<type-id>,
        // func-out: option<type-id>,
        operation: substantial-operation-type,
    }

    register-substantial-runtime: func(data: substantial-runtime-data) -> result<runtime-id, error>;
    generate-substantial-operation: func(runtime: runtime-id, data: substantial-operation-data) -> result<func-params, error>;
    
    // kv
    record kv-runtime-data {
        url: string
    }
    
    register-kv-runtime: func(data: kv-runtime-data) -> result<runtime-id, error>;

    enum kv-materializer {
        get,
        set,
        delete,
        keys,
        values,
    }

    kv-operation: func(base: base-materializer, data: kv-materializer) -> result<materializer-id, error>;

    // Grpc
    record grpc-runtime-data {
        proto-file: string,
        endpoint: string,
    }

    register-grpc-runtime: func(data: grpc-runtime-data) -> result<runtime-id, error>;

    record grpc-data {
        method: string,
    }

    call-grpc-method: func(runtime: runtime-id, data: grpc-data) -> result<func-params, error>;
}

interface aws {
    use core.{error, runtime-id, materializer-id};

    record s3-runtime-data {
        host-secret: string,
        region-secret: string,
        access-key-secret: string,
        secret-key-secret: string,
        path-style-secret: string,
    }

    record s3-presign-get-params {
        bucket: string,
        expiry-secs: option<u32>,
    }

    record s3-presign-put-params {
        bucket: string,
        expiry-secs: option<u32>,
        content-type: option<string>,
    }

    register-s3-runtime: func(data: s3-runtime-data) -> result<runtime-id, error>;
    s3-presign-get: func(runtime: runtime-id, data: s3-presign-get-params) -> result<materializer-id, error>;
    s3-presign-put: func(runtime: runtime-id, data: s3-presign-put-params) -> result<materializer-id, error>;
    s3-list: func(runtime: runtime-id, bucket: string) -> result<materializer-id, error>;
    s3-upload: func(runtime: runtime-id, bucket: string) -> result<materializer-id, error>;
    s3-upload-all: func(runtime: runtime-id, bucket: string) -> result<materializer-id, error>;
}


interface utils {
    use core.{error};
    type type-id = u32;


    // Example:
    // reduce({a: 1, { b: {c: g.inherit(), d: [1, 2, 3]}})
    // produces a list of reduce-path
    // [
    //  { path: [a], value: { inherit: false, payload: 1 } }
    //  { path: [a, b, c], value: { inherit: true } }
    //  { path: [a, b, d], value: { inherit: false, payload: [1, 2, 3] } }
    // ]
    record reduce-value {
        inherit: bool,
        // json string
        payload: option<string>
    }

    record reduce-path {
        path: list<string>,
        value: reduce-value,
    }

    record reduce {
        paths: list<reduce-path>
    }

    gen-reduceb: func(supertype-id: type-id, data: reduce) -> result<type-id, error>;

    add-graphql-endpoint: func(graphql: string) -> result<u32, error>;

    variant auth-protocol {
        oauth2,
        jwt,
        basic,
    }

    record auth {
        name: string,
        protocol: auth-protocol,
        // string => json string
        auth-data: list<tuple<string, string>>,
    }

    add-auth: func(data: auth) -> result<u32, error>;
    add-raw-auth: func(data: string) -> result<u32, error>;
    oauth2: func(service-name: string, scopes: string) -> result<string, error>;
    oauth2-without-profiler: func(service-name: string, scopes: string) -> result<string, error>;
    oauth2-with-extended-profiler: func(service-name: string, scopes: string, extension: string) -> result<string, error>;
    oauth2-with-custom-profiler: func(service-name: string, scopes: string, profiler: type-id) -> result<string, error>;

    record query-deploy-params {
        tg: string,
        secrets: option<list<tuple<string, string>>>,
    }

    gql-deploy-query: func(params: query-deploy-params) -> result<string, error>;
    gql-remove-query: func(tg-name: list<string>) -> result<string, error>;

    remove-injections: func(type-id: type-id) -> result<type-id, error>;

    record fdk-config {
        workspace-path: string,
        target-name: string,
        config-json: string,
        tg-json: string,
    }

    record fdk-output {
        path: string,
        content: string,
        overwrite: bool,
    }

    metagen-exec: func(config: fdk-config) -> result<list<fdk-output>, error>;
    metagen-write-files: func(items: list<fdk-output>, typegraph-dir: string) -> result<_, error>;
}

interface host {
    print: func(s: string);
    eprint: func(s: string);
    expand-path: func(root: string, exclude: list<string>) -> result<list<string>, string>;
    path-exists: func(path: string) -> result<bool, string>;
    read-file: func(path: string) -> result<list<u8>, string>;
    write-file: func(path: string, data: list<u8>) -> result<_, string>;
    get-cwd: func() -> result<string, string>;
}


world typegraph {
    export core;
    export runtimes;
    export utils;
    export aws;
    import host;
}
